// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_Block_split7796_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        D_dout,
        D_empty_n,
        D_read,
        IC_dout,
        IC_empty_n,
        IC_read,
        OC_dout,
        OC_empty_n,
        OC_read,
        batch_dout,
        batch_empty_n,
        batch_read,
        batch_out_din,
        batch_out_full_n,
        batch_out_write,
        batch_out1_din,
        batch_out1_full_n,
        batch_out1_write,
        D_V_out_out_din,
        D_V_out_out_full_n,
        D_V_out_out_write,
        D_V_out_out2_din,
        D_V_out_out2_full_n,
        D_V_out_out2_write,
        IC_V_out_out_din,
        IC_V_out_out_full_n,
        IC_V_out_out_write,
        OC_V_out_out_din,
        OC_V_out_out_full_n,
        OC_V_out_out_write,
        OC_V_out_out3_din,
        OC_V_out_out3_full_n,
        OC_V_out_out3_write,
        ret_V_1_out_out_din,
        ret_V_1_out_out_full_n,
        ret_V_1_out_out_write,
        ret_V_1_out_out4_din,
        ret_V_1_out_out4_full_n,
        ret_V_1_out_out4_write,
        mul_ln31_1_out_out_din,
        mul_ln31_1_out_out_full_n,
        mul_ln31_1_out_out_write,
        mul_ln31_1_out_out5_din,
        mul_ln31_1_out_out5_full_n,
        mul_ln31_1_out_out5_write,
        mul_ln31_1_out_out6_din,
        mul_ln31_1_out_out6_full_n,
        mul_ln31_1_out_out6_write,
        ret_V_cast_out_out_din,
        ret_V_cast_out_out_full_n,
        ret_V_cast_out_out_write,
        ret_V_cast_out_out7_din,
        ret_V_cast_out_out7_full_n,
        ret_V_cast_out_out7_write,
        ret_V_cast_out_out8_din,
        ret_V_cast_out_out8_full_n,
        ret_V_cast_out_out8_write,
        ret_V_cast_out_out9_din,
        ret_V_cast_out_out9_full_n,
        ret_V_cast_out_out9_write,
        ret_V_cast_out_out10_din,
        ret_V_cast_out_out10_full_n,
        ret_V_cast_out_out10_write
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] D_dout;
input   D_empty_n;
output   D_read;
input  [31:0] IC_dout;
input   IC_empty_n;
output   IC_read;
input  [31:0] OC_dout;
input   OC_empty_n;
output   OC_read;
input  [31:0] batch_dout;
input   batch_empty_n;
output   batch_read;
output  [31:0] batch_out_din;
input   batch_out_full_n;
output   batch_out_write;
output  [31:0] batch_out1_din;
input   batch_out1_full_n;
output   batch_out1_write;
output  [15:0] D_V_out_out_din;
input   D_V_out_out_full_n;
output   D_V_out_out_write;
output  [15:0] D_V_out_out2_din;
input   D_V_out_out2_full_n;
output   D_V_out_out2_write;
output  [15:0] IC_V_out_out_din;
input   IC_V_out_out_full_n;
output   IC_V_out_out_write;
output  [15:0] OC_V_out_out_din;
input   OC_V_out_out_full_n;
output   OC_V_out_out_write;
output  [15:0] OC_V_out_out3_din;
input   OC_V_out_out3_full_n;
output   OC_V_out_out3_write;
output  [31:0] ret_V_1_out_out_din;
input   ret_V_1_out_out_full_n;
output   ret_V_1_out_out_write;
output  [31:0] ret_V_1_out_out4_din;
input   ret_V_1_out_out4_full_n;
output   ret_V_1_out_out4_write;
output  [31:0] mul_ln31_1_out_out_din;
input   mul_ln31_1_out_out_full_n;
output   mul_ln31_1_out_out_write;
output  [31:0] mul_ln31_1_out_out5_din;
input   mul_ln31_1_out_out5_full_n;
output   mul_ln31_1_out_out5_write;
output  [31:0] mul_ln31_1_out_out6_din;
input   mul_ln31_1_out_out6_full_n;
output   mul_ln31_1_out_out6_write;
output  [11:0] ret_V_cast_out_out_din;
input   ret_V_cast_out_out_full_n;
output   ret_V_cast_out_out_write;
output  [11:0] ret_V_cast_out_out7_din;
input   ret_V_cast_out_out7_full_n;
output   ret_V_cast_out_out7_write;
output  [11:0] ret_V_cast_out_out8_din;
input   ret_V_cast_out_out8_full_n;
output   ret_V_cast_out_out8_write;
output  [11:0] ret_V_cast_out_out9_din;
input   ret_V_cast_out_out9_full_n;
output   ret_V_cast_out_out9_write;
output  [11:0] ret_V_cast_out_out10_din;
input   ret_V_cast_out_out10_full_n;
output   ret_V_cast_out_out10_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg D_read;
reg IC_read;
reg OC_read;
reg batch_read;
reg batch_out_write;
reg batch_out1_write;
reg D_V_out_out_write;
reg D_V_out_out2_write;
reg IC_V_out_out_write;
reg OC_V_out_out_write;
reg OC_V_out_out3_write;
reg ret_V_1_out_out_write;
reg ret_V_1_out_out4_write;
reg mul_ln31_1_out_out_write;
reg mul_ln31_1_out_out5_write;
reg mul_ln31_1_out_out6_write;
reg ret_V_cast_out_out_write;
reg ret_V_cast_out_out7_write;
reg ret_V_cast_out_out8_write;
reg ret_V_cast_out_out9_write;
reg ret_V_cast_out_out10_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    D_blk_n;
reg    IC_blk_n;
reg    OC_blk_n;
reg    batch_blk_n;
reg    batch_out_blk_n;
wire    ap_CS_fsm_state10;
reg    batch_out1_blk_n;
reg    D_V_out_out_blk_n;
reg    D_V_out_out2_blk_n;
reg    IC_V_out_out_blk_n;
reg    OC_V_out_out_blk_n;
reg    OC_V_out_out3_blk_n;
reg    ret_V_1_out_out_blk_n;
reg    ret_V_1_out_out4_blk_n;
reg    mul_ln31_1_out_out_blk_n;
reg    mul_ln31_1_out_out5_blk_n;
reg    mul_ln31_1_out_out6_blk_n;
reg    ret_V_cast_out_out_blk_n;
reg    ret_V_cast_out_out7_blk_n;
reg    ret_V_cast_out_out8_blk_n;
reg    ret_V_cast_out_out9_blk_n;
reg    ret_V_cast_out_out10_blk_n;
reg  signed [31:0] batch_read_reg_263;
wire   [15:0] D_V_fu_213_p1;
reg   [15:0] D_V_reg_270;
wire   [31:0] zext_ln31_fu_217_p1;
wire   [15:0] IC_V_fu_221_p1;
reg   [15:0] IC_V_reg_282;
wire   [15:0] OC_V_fu_225_p1;
reg   [15:0] OC_V_reg_288;
reg   [11:0] trunc_ln_reg_295;
wire  signed [31:0] grp_fu_249_p2;
reg  signed [31:0] mul_ln31_reg_304;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_239_p2;
reg   [31:0] mul_ln31_1_reg_319;
wire    ap_CS_fsm_state9;
reg    ap_block_state1;
reg    ap_block_state10;
wire   [31:0] grp_fu_255_p2;
wire    ap_CS_fsm_state5;
wire   [15:0] grp_fu_249_p0;
wire   [15:0] grp_fu_249_p1;
wire   [15:0] grp_fu_255_p0;
wire   [15:0] grp_fu_255_p1;
reg    grp_fu_249_ce;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_fu_255_ce;
wire    ap_CS_fsm_state8;
reg   [9:0] ap_NS_fsm;
wire   [31:0] grp_fu_255_p00;
wire   [31:0] grp_fu_255_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
end

top_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln31_reg_304),
    .din1(batch_read_reg_263),
    .ce(1'b1),
    .dout(grp_fu_239_p2)
);

top_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U115(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_249_p0),
    .din1(grp_fu_249_p1),
    .ce(grp_fu_249_ce),
    .dout(grp_fu_249_p2)
);

top_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U116(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_255_p0),
    .din1(grp_fu_255_p1),
    .ce(grp_fu_255_ce),
    .dout(grp_fu_255_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        D_V_reg_270 <= D_V_fu_213_p1;
        IC_V_reg_282 <= IC_V_fu_221_p1;
        OC_V_reg_288 <= OC_V_fu_225_p1;
        batch_read_reg_263 <= batch_dout;
        trunc_ln_reg_295 <= {{OC_dout[15:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln31_1_reg_319 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln31_reg_304 <= grp_fu_249_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        D_V_out_out2_blk_n = D_V_out_out2_full_n;
    end else begin
        D_V_out_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        D_V_out_out2_write = 1'b1;
    end else begin
        D_V_out_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        D_V_out_out_blk_n = D_V_out_out_full_n;
    end else begin
        D_V_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        D_V_out_out_write = 1'b1;
    end else begin
        D_V_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_blk_n = D_empty_n;
    end else begin
        D_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((batch_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (1'b0 == IC_empty_n) | (1'b0 == D_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_read = 1'b1;
    end else begin
        D_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        IC_V_out_out_blk_n = IC_V_out_out_full_n;
    end else begin
        IC_V_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        IC_V_out_out_write = 1'b1;
    end else begin
        IC_V_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        IC_blk_n = IC_empty_n;
    end else begin
        IC_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((batch_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (1'b0 == IC_empty_n) | (1'b0 == D_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        IC_read = 1'b1;
    end else begin
        IC_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        OC_V_out_out3_blk_n = OC_V_out_out3_full_n;
    end else begin
        OC_V_out_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        OC_V_out_out3_write = 1'b1;
    end else begin
        OC_V_out_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        OC_V_out_out_blk_n = OC_V_out_out_full_n;
    end else begin
        OC_V_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        OC_V_out_out_write = 1'b1;
    end else begin
        OC_V_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_blk_n = OC_empty_n;
    end else begin
        OC_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((batch_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (1'b0 == IC_empty_n) | (1'b0 == D_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_read = 1'b1;
    end else begin
        OC_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_blk_n = batch_empty_n;
    end else begin
        batch_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        batch_out1_blk_n = batch_out1_full_n;
    end else begin
        batch_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        batch_out1_write = 1'b1;
    end else begin
        batch_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        batch_out_blk_n = batch_out_full_n;
    end else begin
        batch_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        batch_out_write = 1'b1;
    end else begin
        batch_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((batch_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (1'b0 == IC_empty_n) | (1'b0 == D_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_read = 1'b1;
    end else begin
        batch_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (~((batch_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (1'b0 == IC_empty_n) | (1'b0 == D_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_249_ce = 1'b1;
    end else begin
        grp_fu_249_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)))) begin
        grp_fu_255_ce = 1'b1;
    end else begin
        grp_fu_255_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln31_1_out_out5_blk_n = mul_ln31_1_out_out5_full_n;
    end else begin
        mul_ln31_1_out_out5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        mul_ln31_1_out_out5_write = 1'b1;
    end else begin
        mul_ln31_1_out_out5_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln31_1_out_out6_blk_n = mul_ln31_1_out_out6_full_n;
    end else begin
        mul_ln31_1_out_out6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        mul_ln31_1_out_out6_write = 1'b1;
    end else begin
        mul_ln31_1_out_out6_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln31_1_out_out_blk_n = mul_ln31_1_out_out_full_n;
    end else begin
        mul_ln31_1_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        mul_ln31_1_out_out_write = 1'b1;
    end else begin
        mul_ln31_1_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_V_1_out_out4_blk_n = ret_V_1_out_out4_full_n;
    end else begin
        ret_V_1_out_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        ret_V_1_out_out4_write = 1'b1;
    end else begin
        ret_V_1_out_out4_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_V_1_out_out_blk_n = ret_V_1_out_out_full_n;
    end else begin
        ret_V_1_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        ret_V_1_out_out_write = 1'b1;
    end else begin
        ret_V_1_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_V_cast_out_out10_blk_n = ret_V_cast_out_out10_full_n;
    end else begin
        ret_V_cast_out_out10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        ret_V_cast_out_out10_write = 1'b1;
    end else begin
        ret_V_cast_out_out10_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_V_cast_out_out7_blk_n = ret_V_cast_out_out7_full_n;
    end else begin
        ret_V_cast_out_out7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        ret_V_cast_out_out7_write = 1'b1;
    end else begin
        ret_V_cast_out_out7_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_V_cast_out_out8_blk_n = ret_V_cast_out_out8_full_n;
    end else begin
        ret_V_cast_out_out8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        ret_V_cast_out_out8_write = 1'b1;
    end else begin
        ret_V_cast_out_out8_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_V_cast_out_out9_blk_n = ret_V_cast_out_out9_full_n;
    end else begin
        ret_V_cast_out_out9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        ret_V_cast_out_out9_write = 1'b1;
    end else begin
        ret_V_cast_out_out9_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_V_cast_out_out_blk_n = ret_V_cast_out_out_full_n;
    end else begin
        ret_V_cast_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        ret_V_cast_out_out_write = 1'b1;
    end else begin
        ret_V_cast_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((batch_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (1'b0 == IC_empty_n) | (1'b0 == D_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign D_V_fu_213_p1 = D_dout[15:0];

assign D_V_out_out2_din = D_V_reg_270;

assign D_V_out_out_din = D_V_reg_270;

assign IC_V_fu_221_p1 = IC_dout[15:0];

assign IC_V_out_out_din = IC_V_reg_282;

assign OC_V_fu_225_p1 = OC_dout[15:0];

assign OC_V_out_out3_din = OC_V_reg_288;

assign OC_V_out_out_din = OC_V_reg_288;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((batch_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (1'b0 == IC_empty_n) | (1'b0 == D_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state10 = ((ret_V_1_out_out4_full_n == 1'b0) | (ret_V_1_out_out_full_n == 1'b0) | (batch_out1_full_n == 1'b0) | (batch_out_full_n == 1'b0) | (1'b0 == OC_V_out_out3_full_n) | (1'b0 == OC_V_out_out_full_n) | (1'b0 == IC_V_out_out_full_n) | (1'b0 == D_V_out_out2_full_n) | (1'b0 == D_V_out_out_full_n) | (ret_V_cast_out_out10_full_n == 1'b0) | (ret_V_cast_out_out9_full_n == 1'b0) | (ret_V_cast_out_out8_full_n == 1'b0) | (ret_V_cast_out_out7_full_n == 1'b0) | (ret_V_cast_out_out_full_n == 1'b0) | (mul_ln31_1_out_out6_full_n == 1'b0) | (mul_ln31_1_out_out5_full_n == 1'b0) | (mul_ln31_1_out_out_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign batch_out1_din = batch_read_reg_263;

assign batch_out_din = batch_read_reg_263;

assign grp_fu_249_p0 = zext_ln31_fu_217_p1;

assign grp_fu_249_p1 = zext_ln31_fu_217_p1;

assign grp_fu_255_p0 = grp_fu_255_p00;

assign grp_fu_255_p00 = OC_V_reg_288;

assign grp_fu_255_p1 = grp_fu_255_p10;

assign grp_fu_255_p10 = IC_V_reg_282;

assign mul_ln31_1_out_out5_din = mul_ln31_1_reg_319;

assign mul_ln31_1_out_out6_din = mul_ln31_1_reg_319;

assign mul_ln31_1_out_out_din = mul_ln31_1_reg_319;

assign ret_V_1_out_out4_din = grp_fu_255_p2;

assign ret_V_1_out_out_din = grp_fu_255_p2;

assign ret_V_cast_out_out10_din = trunc_ln_reg_295;

assign ret_V_cast_out_out7_din = trunc_ln_reg_295;

assign ret_V_cast_out_out8_din = trunc_ln_reg_295;

assign ret_V_cast_out_out9_din = trunc_ln_reg_295;

assign ret_V_cast_out_out_din = trunc_ln_reg_295;

assign start_out = real_start;

assign zext_ln31_fu_217_p1 = D_V_fu_213_p1;

endmodule //top_Block_split7796_proc
