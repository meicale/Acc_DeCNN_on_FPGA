// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_Loop_VITIS_LOOP_88_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        OC_V_loc_dout,
        OC_V_loc_empty_n,
        OC_V_loc_read,
        k3_buffer_V_0_address0,
        k3_buffer_V_0_ce0,
        k3_buffer_V_0_we0,
        k3_buffer_V_0_d0,
        k3_buffer_V_1_address0,
        k3_buffer_V_1_ce0,
        k3_buffer_V_1_we0,
        k3_buffer_V_1_d0,
        k3_buffer_V_2_address0,
        k3_buffer_V_2_ce0,
        k3_buffer_V_2_we0,
        k3_buffer_V_2_d0,
        k3_buffer_V_3_address0,
        k3_buffer_V_3_ce0,
        k3_buffer_V_3_we0,
        k3_buffer_V_3_d0,
        k3_buffer_V_4_address0,
        k3_buffer_V_4_ce0,
        k3_buffer_V_4_we0,
        k3_buffer_V_4_d0,
        k3_buffer_V_5_address0,
        k3_buffer_V_5_ce0,
        k3_buffer_V_5_we0,
        k3_buffer_V_5_d0,
        k3_buffer_V_6_address0,
        k3_buffer_V_6_ce0,
        k3_buffer_V_6_we0,
        k3_buffer_V_6_d0,
        k3_buffer_V_7_address0,
        k3_buffer_V_7_ce0,
        k3_buffer_V_7_we0,
        k3_buffer_V_7_d0,
        k3_buffer_V_8_address0,
        k3_buffer_V_8_ce0,
        k3_buffer_V_8_we0,
        k3_buffer_V_8_d0,
        k0_3_dout,
        k0_3_empty_n,
        k0_3_read,
        m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY,
        m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY,
        m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST,
        m_axi_gmem3_WID,
        m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY,
        m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID,
        m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA,
        m_axi_gmem3_RLAST,
        m_axi_gmem3_RID,
        m_axi_gmem3_RUSER,
        m_axi_gmem3_RRESP,
        m_axi_gmem3_BVALID,
        m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP,
        m_axi_gmem3_BID,
        m_axi_gmem3_BUSER
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_pp0_stage0 = 10'd256;
parameter    ap_ST_fsm_state12 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] OC_V_loc_dout;
input   OC_V_loc_empty_n;
output   OC_V_loc_read;
output  [5:0] k3_buffer_V_0_address0;
output   k3_buffer_V_0_ce0;
output   k3_buffer_V_0_we0;
output  [63:0] k3_buffer_V_0_d0;
output  [5:0] k3_buffer_V_1_address0;
output   k3_buffer_V_1_ce0;
output   k3_buffer_V_1_we0;
output  [63:0] k3_buffer_V_1_d0;
output  [5:0] k3_buffer_V_2_address0;
output   k3_buffer_V_2_ce0;
output   k3_buffer_V_2_we0;
output  [63:0] k3_buffer_V_2_d0;
output  [5:0] k3_buffer_V_3_address0;
output   k3_buffer_V_3_ce0;
output   k3_buffer_V_3_we0;
output  [63:0] k3_buffer_V_3_d0;
output  [5:0] k3_buffer_V_4_address0;
output   k3_buffer_V_4_ce0;
output   k3_buffer_V_4_we0;
output  [63:0] k3_buffer_V_4_d0;
output  [5:0] k3_buffer_V_5_address0;
output   k3_buffer_V_5_ce0;
output   k3_buffer_V_5_we0;
output  [63:0] k3_buffer_V_5_d0;
output  [5:0] k3_buffer_V_6_address0;
output   k3_buffer_V_6_ce0;
output   k3_buffer_V_6_we0;
output  [63:0] k3_buffer_V_6_d0;
output  [5:0] k3_buffer_V_7_address0;
output   k3_buffer_V_7_ce0;
output   k3_buffer_V_7_we0;
output  [63:0] k3_buffer_V_7_d0;
output  [5:0] k3_buffer_V_8_address0;
output   k3_buffer_V_8_ce0;
output   k3_buffer_V_8_we0;
output  [63:0] k3_buffer_V_8_d0;
input  [63:0] k0_3_dout;
input   k0_3_empty_n;
output   k0_3_read;
output   m_axi_gmem3_AWVALID;
input   m_axi_gmem3_AWREADY;
output  [63:0] m_axi_gmem3_AWADDR;
output  [0:0] m_axi_gmem3_AWID;
output  [31:0] m_axi_gmem3_AWLEN;
output  [2:0] m_axi_gmem3_AWSIZE;
output  [1:0] m_axi_gmem3_AWBURST;
output  [1:0] m_axi_gmem3_AWLOCK;
output  [3:0] m_axi_gmem3_AWCACHE;
output  [2:0] m_axi_gmem3_AWPROT;
output  [3:0] m_axi_gmem3_AWQOS;
output  [3:0] m_axi_gmem3_AWREGION;
output  [0:0] m_axi_gmem3_AWUSER;
output   m_axi_gmem3_WVALID;
input   m_axi_gmem3_WREADY;
output  [63:0] m_axi_gmem3_WDATA;
output  [7:0] m_axi_gmem3_WSTRB;
output   m_axi_gmem3_WLAST;
output  [0:0] m_axi_gmem3_WID;
output  [0:0] m_axi_gmem3_WUSER;
output   m_axi_gmem3_ARVALID;
input   m_axi_gmem3_ARREADY;
output  [63:0] m_axi_gmem3_ARADDR;
output  [0:0] m_axi_gmem3_ARID;
output  [31:0] m_axi_gmem3_ARLEN;
output  [2:0] m_axi_gmem3_ARSIZE;
output  [1:0] m_axi_gmem3_ARBURST;
output  [1:0] m_axi_gmem3_ARLOCK;
output  [3:0] m_axi_gmem3_ARCACHE;
output  [2:0] m_axi_gmem3_ARPROT;
output  [3:0] m_axi_gmem3_ARQOS;
output  [3:0] m_axi_gmem3_ARREGION;
output  [0:0] m_axi_gmem3_ARUSER;
input   m_axi_gmem3_RVALID;
output   m_axi_gmem3_RREADY;
input  [63:0] m_axi_gmem3_RDATA;
input   m_axi_gmem3_RLAST;
input  [0:0] m_axi_gmem3_RID;
input  [0:0] m_axi_gmem3_RUSER;
input  [1:0] m_axi_gmem3_RRESP;
input   m_axi_gmem3_BVALID;
output   m_axi_gmem3_BREADY;
input  [1:0] m_axi_gmem3_BRESP;
input  [0:0] m_axi_gmem3_BID;
input  [0:0] m_axi_gmem3_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg OC_V_loc_read;
reg k3_buffer_V_0_ce0;
reg k3_buffer_V_0_we0;
reg k3_buffer_V_1_ce0;
reg k3_buffer_V_1_we0;
reg k3_buffer_V_2_ce0;
reg k3_buffer_V_2_we0;
reg k3_buffer_V_3_ce0;
reg k3_buffer_V_3_we0;
reg k3_buffer_V_4_ce0;
reg k3_buffer_V_4_we0;
reg k3_buffer_V_5_ce0;
reg k3_buffer_V_5_we0;
reg k3_buffer_V_6_ce0;
reg k3_buffer_V_6_we0;
reg k3_buffer_V_7_ce0;
reg k3_buffer_V_7_we0;
reg k3_buffer_V_8_ce0;
reg k3_buffer_V_8_we0;
reg k0_3_read;
reg m_axi_gmem3_ARVALID;
reg m_axi_gmem3_RREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    OC_V_loc_blk_n;
reg    k0_3_blk_n;
reg    gmem3_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem3_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln88_reg_432;
reg   [15:0] i_reg_254;
reg   [15:0] phi_urem_reg_265;
reg   [32:0] phi_mul_reg_277;
reg   [15:0] trunc_ln_reg_405;
reg   [60:0] trunc_ln89_2_reg_411;
wire   [15:0] add_ln88_1_fu_344_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln88_fu_350_p2;
wire   [15:0] add_ln88_2_fu_355_p2;
reg   [15:0] add_ln88_2_reg_436;
wire   [0:0] icmp_ln88_1_fu_361_p2;
reg   [0:0] icmp_ln88_1_reg_441;
wire   [3:0] trunc_ln89_fu_367_p1;
reg   [3:0] trunc_ln89_reg_446;
wire   [32:0] add_ln89_fu_371_p2;
reg   [12:0] tmp_reg_455;
reg   [63:0] gmem3_addr_read_reg_460;
wire   [15:0] select_ln88_fu_387_p3;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state10;
reg    ap_enable_reg_pp0_iter2;
reg   [15:0] ap_phi_mux_phi_urem_phi_fu_269_p4;
wire   [63:0] zext_ln89_fu_393_p1;
wire  signed [63:0] sext_ln89_3_fu_330_p1;
reg    ap_block_state1;
wire   [18:0] shl_ln_fu_288_p3;
wire   [19:0] zext_ln88_fu_296_p1;
wire   [19:0] zext_ln88_1_fu_300_p1;
wire   [19:0] add_ln88_fu_304_p2;
wire    ap_CS_fsm_state12;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state8) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter1_state10) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter1_state10) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_254 <= 16'd0;
    end else if (((icmp_ln88_fu_350_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_254 <= add_ln88_1_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul_reg_277 <= 33'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_reg_432 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        phi_mul_reg_277 <= add_ln89_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_urem_reg_265 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_reg_432 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        phi_urem_reg_265 <= select_ln88_fu_387_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln88_2_reg_436 <= add_ln88_2_fu_355_p2;
        icmp_ln88_1_reg_441 <= icmp_ln88_1_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_reg_432 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem3_addr_read_reg_460 <= m_axi_gmem3_RDATA;
        tmp_reg_455 <= {{phi_mul_reg_277[32:20]}};
        trunc_ln89_reg_446 <= trunc_ln89_fu_367_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln88_reg_432 <= icmp_ln88_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln89_2_reg_411 <= {{k0_3_dout[63:3]}};
        trunc_ln_reg_405 <= {{add_ln88_fu_304_p2[19:4]}};
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_V_loc_blk_n = OC_V_loc_empty_n;
    end else begin
        OC_V_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == OC_V_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (k0_3_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_V_loc_read = 1'b1;
    end else begin
        OC_V_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_350_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_reg_432 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_phi_urem_phi_fu_269_p4 = select_ln88_fu_387_p3;
    end else begin
        ap_phi_mux_phi_urem_phi_fu_269_p4 = phi_urem_reg_265;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem3_blk_n_AR = m_axi_gmem3_ARREADY;
    end else begin
        gmem3_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_reg_432 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem3_blk_n_R = m_axi_gmem3_RVALID;
    end else begin
        gmem3_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k0_3_blk_n = k0_3_empty_n;
    end else begin
        k0_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == OC_V_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (k0_3_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k0_3_read = 1'b1;
    end else begin
        k0_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_0_ce0 = 1'b1;
    end else begin
        k3_buffer_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln89_reg_446 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_0_we0 = 1'b1;
    end else begin
        k3_buffer_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_1_ce0 = 1'b1;
    end else begin
        k3_buffer_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln89_reg_446 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_1_we0 = 1'b1;
    end else begin
        k3_buffer_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_2_ce0 = 1'b1;
    end else begin
        k3_buffer_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln89_reg_446 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_2_we0 = 1'b1;
    end else begin
        k3_buffer_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_3_ce0 = 1'b1;
    end else begin
        k3_buffer_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln89_reg_446 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_3_we0 = 1'b1;
    end else begin
        k3_buffer_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_4_ce0 = 1'b1;
    end else begin
        k3_buffer_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln89_reg_446 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_4_we0 = 1'b1;
    end else begin
        k3_buffer_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_5_ce0 = 1'b1;
    end else begin
        k3_buffer_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln89_reg_446 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_5_we0 = 1'b1;
    end else begin
        k3_buffer_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_6_ce0 = 1'b1;
    end else begin
        k3_buffer_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln89_reg_446 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_6_we0 = 1'b1;
    end else begin
        k3_buffer_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_7_ce0 = 1'b1;
    end else begin
        k3_buffer_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln89_reg_446 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_7_we0 = 1'b1;
    end else begin
        k3_buffer_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_8_ce0 = 1'b1;
    end else begin
        k3_buffer_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln89_reg_446 == 4'd0) & ~(trunc_ln89_reg_446 == 4'd1) & ~(trunc_ln89_reg_446 == 4'd2) & ~(trunc_ln89_reg_446 == 4'd3) & ~(trunc_ln89_reg_446 == 4'd4) & ~(trunc_ln89_reg_446 == 4'd5) & ~(trunc_ln89_reg_446 == 4'd6) & ~(trunc_ln89_reg_446 == 4'd7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k3_buffer_V_8_we0 = 1'b1;
    end else begin
        k3_buffer_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem3_ARREADY == 1'b1))) begin
        m_axi_gmem3_ARVALID = 1'b1;
    end else begin
        m_axi_gmem3_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_reg_432 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_gmem3_RREADY = 1'b1;
    end else begin
        m_axi_gmem3_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == OC_V_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (k0_3_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem3_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln88_1_fu_344_p2 = (i_reg_254 + 16'd1);

assign add_ln88_2_fu_355_p2 = (ap_phi_mux_phi_urem_phi_fu_269_p4 + 16'd1);

assign add_ln88_fu_304_p2 = (zext_ln88_fu_296_p1 + zext_ln88_1_fu_300_p1);

assign add_ln89_fu_371_p2 = (phi_mul_reg_277 + 33'd116509);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln88_reg_432 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem3_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln88_reg_432 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem3_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == OC_V_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (k0_3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((icmp_ln88_reg_432 == 1'd0) & (m_axi_gmem3_RVALID == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln88_1_fu_361_p2 = ((add_ln88_2_fu_355_p2 < 16'd9) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_350_p2 = ((i_reg_254 == trunc_ln_reg_405) ? 1'b1 : 1'b0);

assign k3_buffer_V_0_address0 = zext_ln89_fu_393_p1;

assign k3_buffer_V_0_d0 = gmem3_addr_read_reg_460;

assign k3_buffer_V_1_address0 = zext_ln89_fu_393_p1;

assign k3_buffer_V_1_d0 = gmem3_addr_read_reg_460;

assign k3_buffer_V_2_address0 = zext_ln89_fu_393_p1;

assign k3_buffer_V_2_d0 = gmem3_addr_read_reg_460;

assign k3_buffer_V_3_address0 = zext_ln89_fu_393_p1;

assign k3_buffer_V_3_d0 = gmem3_addr_read_reg_460;

assign k3_buffer_V_4_address0 = zext_ln89_fu_393_p1;

assign k3_buffer_V_4_d0 = gmem3_addr_read_reg_460;

assign k3_buffer_V_5_address0 = zext_ln89_fu_393_p1;

assign k3_buffer_V_5_d0 = gmem3_addr_read_reg_460;

assign k3_buffer_V_6_address0 = zext_ln89_fu_393_p1;

assign k3_buffer_V_6_d0 = gmem3_addr_read_reg_460;

assign k3_buffer_V_7_address0 = zext_ln89_fu_393_p1;

assign k3_buffer_V_7_d0 = gmem3_addr_read_reg_460;

assign k3_buffer_V_8_address0 = zext_ln89_fu_393_p1;

assign k3_buffer_V_8_d0 = gmem3_addr_read_reg_460;

assign m_axi_gmem3_ARADDR = sext_ln89_3_fu_330_p1;

assign m_axi_gmem3_ARBURST = 2'd0;

assign m_axi_gmem3_ARCACHE = 4'd0;

assign m_axi_gmem3_ARID = 1'd0;

assign m_axi_gmem3_ARLEN = trunc_ln_reg_405;

assign m_axi_gmem3_ARLOCK = 2'd0;

assign m_axi_gmem3_ARPROT = 3'd0;

assign m_axi_gmem3_ARQOS = 4'd0;

assign m_axi_gmem3_ARREGION = 4'd0;

assign m_axi_gmem3_ARSIZE = 3'd0;

assign m_axi_gmem3_ARUSER = 1'd0;

assign m_axi_gmem3_AWADDR = 64'd0;

assign m_axi_gmem3_AWBURST = 2'd0;

assign m_axi_gmem3_AWCACHE = 4'd0;

assign m_axi_gmem3_AWID = 1'd0;

assign m_axi_gmem3_AWLEN = 32'd0;

assign m_axi_gmem3_AWLOCK = 2'd0;

assign m_axi_gmem3_AWPROT = 3'd0;

assign m_axi_gmem3_AWQOS = 4'd0;

assign m_axi_gmem3_AWREGION = 4'd0;

assign m_axi_gmem3_AWSIZE = 3'd0;

assign m_axi_gmem3_AWUSER = 1'd0;

assign m_axi_gmem3_AWVALID = 1'b0;

assign m_axi_gmem3_BREADY = 1'b0;

assign m_axi_gmem3_WDATA = 64'd0;

assign m_axi_gmem3_WID = 1'd0;

assign m_axi_gmem3_WLAST = 1'b0;

assign m_axi_gmem3_WSTRB = 8'd0;

assign m_axi_gmem3_WUSER = 1'd0;

assign m_axi_gmem3_WVALID = 1'b0;

assign select_ln88_fu_387_p3 = ((icmp_ln88_1_reg_441[0:0] == 1'b1) ? add_ln88_2_reg_436 : 16'd0);

assign sext_ln89_3_fu_330_p1 = $signed(trunc_ln89_2_reg_411);

assign shl_ln_fu_288_p3 = {{OC_V_loc_dout}, {3'd0}};

assign trunc_ln89_fu_367_p1 = phi_urem_reg_265[3:0];

assign zext_ln88_1_fu_300_p1 = OC_V_loc_dout;

assign zext_ln88_fu_296_p1 = shl_ln_fu_288_p3;

assign zext_ln89_fu_393_p1 = tmp_reg_455;

endmodule //top_Loop_VITIS_LOOP_88_1_proc
