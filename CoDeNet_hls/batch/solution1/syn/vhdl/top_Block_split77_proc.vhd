-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_Block_split77_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    D_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    D_empty_n : IN STD_LOGIC;
    D_read : OUT STD_LOGIC;
    STRIDE_2_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    STRIDE_2_empty_n : IN STD_LOGIC;
    STRIDE_2_read : OUT STD_LOGIC;
    CONV_D_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    CONV_D_out_out_full_n : IN STD_LOGIC;
    CONV_D_out_out_write : OUT STD_LOGIC;
    CONV_D_out_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    CONV_D_out_out1_full_n : IN STD_LOGIC;
    CONV_D_out_out1_write : OUT STD_LOGIC );
end;


architecture behav of top_Block_split77_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal D_blk_n : STD_LOGIC;
    signal STRIDE_2_blk_n : STD_LOGIC;
    signal CONV_D_out_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal CONV_D_out_out1_blk_n : STD_LOGIC;
    signal CONV_D_fu_74_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal CONV_D_reg_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal trunc_ln_fu_60_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln154_fu_70_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = CONV_D_out_out1_full_n) or (ap_const_logic_0 = CONV_D_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                CONV_D_reg_82 <= CONV_D_fu_74_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, D_empty_n, STRIDE_2_empty_n, CONV_D_out_out_full_n, CONV_D_out_out1_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STRIDE_2_empty_n) or (ap_const_logic_0 = D_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = CONV_D_out_out1_full_n) or (ap_const_logic_0 = CONV_D_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    CONV_D_fu_74_p3 <= 
        sext_ln154_fu_70_p1 when (STRIDE_2_dout(0) = '1') else 
        D_dout;

    CONV_D_out_out1_blk_n_assign_proc : process(CONV_D_out_out1_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            CONV_D_out_out1_blk_n <= CONV_D_out_out1_full_n;
        else 
            CONV_D_out_out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    CONV_D_out_out1_din <= CONV_D_reg_82;

    CONV_D_out_out1_write_assign_proc : process(CONV_D_out_out_full_n, CONV_D_out_out1_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = CONV_D_out_out1_full_n) or (ap_const_logic_0 = CONV_D_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            CONV_D_out_out1_write <= ap_const_logic_1;
        else 
            CONV_D_out_out1_write <= ap_const_logic_0;
        end if; 
    end process;


    CONV_D_out_out_blk_n_assign_proc : process(CONV_D_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            CONV_D_out_out_blk_n <= CONV_D_out_out_full_n;
        else 
            CONV_D_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    CONV_D_out_out_din <= CONV_D_reg_82;

    CONV_D_out_out_write_assign_proc : process(CONV_D_out_out_full_n, CONV_D_out_out1_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = CONV_D_out_out1_full_n) or (ap_const_logic_0 = CONV_D_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            CONV_D_out_out_write <= ap_const_logic_1;
        else 
            CONV_D_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    D_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, D_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            D_blk_n <= D_empty_n;
        else 
            D_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    D_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, D_empty_n, STRIDE_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STRIDE_2_empty_n) or (ap_const_logic_0 = D_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            D_read <= ap_const_logic_1;
        else 
            D_read <= ap_const_logic_0;
        end if; 
    end process;


    STRIDE_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, STRIDE_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            STRIDE_2_blk_n <= STRIDE_2_empty_n;
        else 
            STRIDE_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    STRIDE_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, D_empty_n, STRIDE_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STRIDE_2_empty_n) or (ap_const_logic_0 = D_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            STRIDE_2_read <= ap_const_logic_1;
        else 
            STRIDE_2_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, D_empty_n, STRIDE_2_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STRIDE_2_empty_n) or (ap_const_logic_0 = D_empty_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(CONV_D_out_out_full_n, CONV_D_out_out1_full_n)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = CONV_D_out_out1_full_n) or (ap_const_logic_0 = CONV_D_out_out_full_n));
    end process;


    ap_done_assign_proc : process(ap_done_reg, CONV_D_out_out_full_n, CONV_D_out_out1_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = CONV_D_out_out1_full_n) or (ap_const_logic_0 = CONV_D_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(CONV_D_out_out_full_n, CONV_D_out_out1_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = CONV_D_out_out1_full_n) or (ap_const_logic_0 = CONV_D_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln154_fu_70_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_60_p4),32));

    trunc_ln_fu_60_p4 <= D_dout(31 downto 1);
end behav;
