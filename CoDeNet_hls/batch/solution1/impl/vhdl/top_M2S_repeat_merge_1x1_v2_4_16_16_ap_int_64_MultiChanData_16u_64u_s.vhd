-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_M2S_repeat_merge_1x1_v2_4_16_16_ap_int_64_MultiChanData_16u_64u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    k1_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
    k1_full_n : IN STD_LOGIC;
    k1_write : OUT STD_LOGIC;
    k1_buffer_V_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_0_ce0 : OUT STD_LOGIC;
    k1_buffer_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_1_ce0 : OUT STD_LOGIC;
    k1_buffer_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_2_ce0 : OUT STD_LOGIC;
    k1_buffer_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_3_ce0 : OUT STD_LOGIC;
    k1_buffer_V_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_4_ce0 : OUT STD_LOGIC;
    k1_buffer_V_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_5_ce0 : OUT STD_LOGIC;
    k1_buffer_V_5_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_6_ce0 : OUT STD_LOGIC;
    k1_buffer_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_7_ce0 : OUT STD_LOGIC;
    k1_buffer_V_7_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_8_ce0 : OUT STD_LOGIC;
    k1_buffer_V_8_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_9_ce0 : OUT STD_LOGIC;
    k1_buffer_V_9_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_10_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_10_ce0 : OUT STD_LOGIC;
    k1_buffer_V_10_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_11_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_11_ce0 : OUT STD_LOGIC;
    k1_buffer_V_11_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_12_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_12_ce0 : OUT STD_LOGIC;
    k1_buffer_V_12_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_13_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_13_ce0 : OUT STD_LOGIC;
    k1_buffer_V_13_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_14_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_14_ce0 : OUT STD_LOGIC;
    k1_buffer_V_14_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_15_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_15_ce0 : OUT STD_LOGIC;
    k1_buffer_V_15_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul_ln31_1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln31_1_loc_empty_n : IN STD_LOGIC;
    mul_ln31_1_loc_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (23 downto 0);
    skip1_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    skip1_empty_n : IN STD_LOGIC;
    skip1_read : OUT STD_LOGIC;
    mul_ln31_1_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mul_ln31_1_loc_out_full_n : IN STD_LOGIC;
    mul_ln31_1_loc_out_write : OUT STD_LOGIC;
    skip1_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    skip1_out_full_n : IN STD_LOGIC;
    skip1_out_write : OUT STD_LOGIC );
end;


architecture behav of top_M2S_repeat_merge_1x1_v2_4_16_16_ap_int_64_MultiChanData_16u_64u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv56_1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln110_reg_1099 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln110_reg_1099_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln31_1_loc_blk_n : STD_LOGIC;
    signal skip1_blk_n : STD_LOGIC;
    signal mul_ln31_1_loc_out_blk_n : STD_LOGIC;
    signal skip1_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_349 : STD_LOGIC_VECTOR (55 downto 0);
    signal i_reg_360 : STD_LOGIC_VECTOR (23 downto 0);
    signal REP_fu_371_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal REP_reg_1069 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal bound_reg_1089 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln110_fu_392_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln110_reg_1094 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln110_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln110_fu_408_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln110_reg_1103 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln111_fu_435_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln111_reg_1189 : STD_LOGIC_VECTOR (23 downto 0);
    signal k1_buffer_V_0_load_reg_1194 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_1_load_reg_1199 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_2_load_reg_1204 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_3_load_reg_1209 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_4_load_reg_1214 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_5_load_reg_1219 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_6_load_reg_1224 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_7_load_reg_1229 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_8_load_reg_1234 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_9_load_reg_1239 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_10_load_reg_1244 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_11_load_reg_1249 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_12_load_reg_1254 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_13_load_reg_1259 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_14_load_reg_1264 : STD_LOGIC_VECTOR (63 downto 0);
    signal k1_buffer_V_15_load_reg_1269 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_353_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_364_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln114_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal grp_fu_386_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_386_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln111_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_995_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_958_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_921_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_884_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_847_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_810_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_773_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_736_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_699_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_662_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_625_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_588_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_551_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_514_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_477_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_440_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_386_p00 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_386_p10 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_32ns_24ns_56_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component top_mux_1664_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        din12 : IN STD_LOGIC_VECTOR (63 downto 0);
        din13 : IN STD_LOGIC_VECTOR (63 downto 0);
        din14 : IN STD_LOGIC_VECTOR (63 downto 0);
        din15 : IN STD_LOGIC_VECTOR (63 downto 0);
        din16 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mul_32ns_24ns_56_5_1_U219 : component top_mul_32ns_24ns_56_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_386_p0,
        din1 => grp_fu_386_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_386_p2);

    mux_1664_64_1_1_U220 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_0_load_reg_1194,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_fu_440_p18);

    mux_1664_64_1_1_U221 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_1_load_reg_1199,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_s_fu_477_p18);

    mux_1664_64_1_1_U222 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_2_load_reg_1204,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_54_fu_514_p18);

    mux_1664_64_1_1_U223 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_3_load_reg_1209,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_55_fu_551_p18);

    mux_1664_64_1_1_U224 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_4_load_reg_1214,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_56_fu_588_p18);

    mux_1664_64_1_1_U225 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_5_load_reg_1219,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_57_fu_625_p18);

    mux_1664_64_1_1_U226 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_6_load_reg_1224,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_58_fu_662_p18);

    mux_1664_64_1_1_U227 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_7_load_reg_1229,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_59_fu_699_p18);

    mux_1664_64_1_1_U228 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_8_load_reg_1234,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_60_fu_736_p18);

    mux_1664_64_1_1_U229 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_9_load_reg_1239,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_61_fu_773_p18);

    mux_1664_64_1_1_U230 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_10_load_reg_1244,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_62_fu_810_p18);

    mux_1664_64_1_1_U231 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_11_load_reg_1249,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_63_fu_847_p18);

    mux_1664_64_1_1_U232 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_12_load_reg_1254,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_64_fu_884_p18);

    mux_1664_64_1_1_U233 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_13_load_reg_1259,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_65_fu_921_p18);

    mux_1664_64_1_1_U234 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_14_load_reg_1264,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_66_fu_958_p18);

    mux_1664_64_1_1_U235 : component top_mux_1664_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k1_buffer_V_15_load_reg_1269,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => ap_const_lv64_0,
        din4 => ap_const_lv64_0,
        din5 => ap_const_lv64_0,
        din6 => ap_const_lv64_0,
        din7 => ap_const_lv64_0,
        din8 => ap_const_lv64_0,
        din9 => ap_const_lv64_0,
        din10 => ap_const_lv64_0,
        din11 => ap_const_lv64_0,
        din12 => ap_const_lv64_0,
        din13 => ap_const_lv64_0,
        din14 => ap_const_lv64_0,
        din15 => ap_const_lv64_0,
        din16 => ap_const_lv64_0,
        dout => tmp_67_fu_995_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln110_reg_1099 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_360 <= add_ln111_reg_1189;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_360 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln110_reg_1099 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_349 <= add_ln110_reg_1094;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_349 <= ap_const_lv56_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                REP_reg_1069 <= REP_fu_371_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln110_reg_1094 <= add_ln110_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln110_reg_1099 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln111_reg_1189 <= add_ln111_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bound_reg_1089 <= grp_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln110_reg_1099 <= icmp_ln110_fu_398_p2;
                icmp_ln110_reg_1099_pp0_iter1_reg <= icmp_ln110_reg_1099;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln110_reg_1099 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                k1_buffer_V_0_load_reg_1194 <= k1_buffer_V_0_q0;
                k1_buffer_V_10_load_reg_1244 <= k1_buffer_V_10_q0;
                k1_buffer_V_11_load_reg_1249 <= k1_buffer_V_11_q0;
                k1_buffer_V_12_load_reg_1254 <= k1_buffer_V_12_q0;
                k1_buffer_V_13_load_reg_1259 <= k1_buffer_V_13_q0;
                k1_buffer_V_14_load_reg_1264 <= k1_buffer_V_14_q0;
                k1_buffer_V_15_load_reg_1269 <= k1_buffer_V_15_q0;
                k1_buffer_V_1_load_reg_1199 <= k1_buffer_V_1_q0;
                k1_buffer_V_2_load_reg_1204 <= k1_buffer_V_2_q0;
                k1_buffer_V_3_load_reg_1209 <= k1_buffer_V_3_q0;
                k1_buffer_V_4_load_reg_1214 <= k1_buffer_V_4_q0;
                k1_buffer_V_5_load_reg_1219 <= k1_buffer_V_5_q0;
                k1_buffer_V_6_load_reg_1224 <= k1_buffer_V_6_q0;
                k1_buffer_V_7_load_reg_1229 <= k1_buffer_V_7_q0;
                k1_buffer_V_8_load_reg_1234 <= k1_buffer_V_8_q0;
                k1_buffer_V_9_load_reg_1239 <= k1_buffer_V_9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_398_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln110_reg_1103 <= select_ln110_fu_408_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, mul_ln31_1_loc_empty_n, skip1_empty_n, mul_ln31_1_loc_out_full_n, skip1_out_full_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, icmp_ln110_fu_398_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (mul_ln31_1_loc_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (mul_ln31_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln110_fu_398_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln110_fu_398_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    REP_fu_371_p3 <= 
        ap_const_lv32_0 when (skip1_dout(0) = '1') else 
        mul_ln31_1_loc_dout;
    add_ln110_fu_392_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_353_p4) + unsigned(ap_const_lv56_1));
    add_ln111_fu_435_p2 <= std_logic_vector(unsigned(select_ln110_reg_1103) + unsigned(ap_const_lv24_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(k1_full_n, ap_enable_reg_pp0_iter1, icmp_ln110_reg_1099_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_01001 <= ((k1_full_n = ap_const_logic_0) and (icmp_ln110_reg_1099_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(k1_full_n, ap_enable_reg_pp0_iter1, icmp_ln110_reg_1099_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_11001 <= ((k1_full_n = ap_const_logic_0) and (icmp_ln110_reg_1099_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(k1_full_n, ap_enable_reg_pp0_iter1, icmp_ln110_reg_1099_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_subdone <= ((k1_full_n = ap_const_logic_0) and (icmp_ln110_reg_1099_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mul_ln31_1_loc_empty_n, skip1_empty_n, mul_ln31_1_loc_out_full_n, skip1_out_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (mul_ln31_1_loc_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (mul_ln31_1_loc_empty_n = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage1_iter1_assign_proc : process(k1_full_n, icmp_ln110_reg_1099_pp0_iter1_reg)
    begin
                ap_block_state10_pp0_stage1_iter1 <= ((k1_full_n = ap_const_logic_0) and (icmp_ln110_reg_1099_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln110_fu_398_p2)
    begin
        if ((icmp_ln110_fu_398_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_364_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln110_reg_1099, i_reg_360, ap_CS_fsm_pp0_stage0, add_ln111_reg_1189, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln110_reg_1099 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_364_p4 <= add_ln111_reg_1189;
        else 
            ap_phi_mux_i_phi_fu_364_p4 <= i_reg_360;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_353_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln110_reg_1099, indvar_flatten_reg_349, add_ln110_reg_1094, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln110_reg_1099 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_353_p4 <= add_ln110_reg_1094;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_353_p4 <= indvar_flatten_reg_349;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_386_p0 <= grp_fu_386_p00(32 - 1 downto 0);
    grp_fu_386_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(REP_reg_1069),56));
    grp_fu_386_p1 <= grp_fu_386_p10(24 - 1 downto 0);
    grp_fu_386_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),56));
    icmp_ln110_fu_398_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_353_p4 = bound_reg_1089) else "0";
    icmp_ln111_fu_403_p2 <= "1" when (ap_phi_mux_i_phi_fu_364_p4 = p_read) else "0";

    k1_blk_n_assign_proc : process(k1_full_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln110_reg_1099_pp0_iter1_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln110_reg_1099_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            k1_blk_n <= k1_full_n;
        else 
            k1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    k1_buffer_V_0_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_0_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_10_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_10_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_11_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_11_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_12_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_12_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_13_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_13_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_14_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_14_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_15_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_15_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_1_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_1_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_2_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_2_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_3_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_3_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_4_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_4_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_5_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_5_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_6_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_6_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_7_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_7_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_8_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_8_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_9_address0 <= zext_ln114_fu_416_p1(11 - 1 downto 0);

    k1_buffer_V_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            k1_buffer_V_9_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_din <= (((((((((((((((tmp_67_fu_995_p18 & tmp_66_fu_958_p18) & tmp_65_fu_921_p18) & tmp_64_fu_884_p18) & tmp_63_fu_847_p18) & tmp_62_fu_810_p18) & tmp_61_fu_773_p18) & tmp_60_fu_736_p18) & tmp_59_fu_699_p18) & tmp_58_fu_662_p18) & tmp_57_fu_625_p18) & tmp_56_fu_588_p18) & tmp_55_fu_551_p18) & tmp_54_fu_514_p18) & tmp_s_fu_477_p18) & tmp_fu_440_p18);

    k1_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln110_reg_1099_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln110_reg_1099_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            k1_write <= ap_const_logic_1;
        else 
            k1_write <= ap_const_logic_0;
        end if; 
    end process;


    mul_ln31_1_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln31_1_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln31_1_loc_blk_n <= mul_ln31_1_loc_empty_n;
        else 
            mul_ln31_1_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mul_ln31_1_loc_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln31_1_loc_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln31_1_loc_out_blk_n <= mul_ln31_1_loc_out_full_n;
        else 
            mul_ln31_1_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mul_ln31_1_loc_out_din <= mul_ln31_1_loc_dout;

    mul_ln31_1_loc_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln31_1_loc_empty_n, skip1_empty_n, mul_ln31_1_loc_out_full_n, skip1_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (mul_ln31_1_loc_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (mul_ln31_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln31_1_loc_out_write <= ap_const_logic_1;
        else 
            mul_ln31_1_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    mul_ln31_1_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln31_1_loc_empty_n, skip1_empty_n, mul_ln31_1_loc_out_full_n, skip1_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (mul_ln31_1_loc_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (mul_ln31_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln31_1_loc_read <= ap_const_logic_1;
        else 
            mul_ln31_1_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln110_fu_408_p3 <= 
        ap_const_lv24_0 when (icmp_ln111_fu_403_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_364_p4;

    skip1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, skip1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_blk_n <= skip1_empty_n;
        else 
            skip1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    skip1_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, skip1_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_out_blk_n <= skip1_out_full_n;
        else 
            skip1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    skip1_out_din <= skip1_dout;

    skip1_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln31_1_loc_empty_n, skip1_empty_n, mul_ln31_1_loc_out_full_n, skip1_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (mul_ln31_1_loc_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (mul_ln31_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_out_write <= ap_const_logic_1;
        else 
            skip1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    skip1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln31_1_loc_empty_n, skip1_empty_n, mul_ln31_1_loc_out_full_n, skip1_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (mul_ln31_1_loc_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (mul_ln31_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_read <= ap_const_logic_1;
        else 
            skip1_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln114_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln110_reg_1103),64));
end behav;
