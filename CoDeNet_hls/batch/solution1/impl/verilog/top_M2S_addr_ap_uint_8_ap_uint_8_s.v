// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_M2S_addr_ap_uint_8_ap_uint_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem5_AWVALID,
        m_axi_gmem5_AWREADY,
        m_axi_gmem5_AWADDR,
        m_axi_gmem5_AWID,
        m_axi_gmem5_AWLEN,
        m_axi_gmem5_AWSIZE,
        m_axi_gmem5_AWBURST,
        m_axi_gmem5_AWLOCK,
        m_axi_gmem5_AWCACHE,
        m_axi_gmem5_AWPROT,
        m_axi_gmem5_AWQOS,
        m_axi_gmem5_AWREGION,
        m_axi_gmem5_AWUSER,
        m_axi_gmem5_WVALID,
        m_axi_gmem5_WREADY,
        m_axi_gmem5_WDATA,
        m_axi_gmem5_WSTRB,
        m_axi_gmem5_WLAST,
        m_axi_gmem5_WID,
        m_axi_gmem5_WUSER,
        m_axi_gmem5_ARVALID,
        m_axi_gmem5_ARREADY,
        m_axi_gmem5_ARADDR,
        m_axi_gmem5_ARID,
        m_axi_gmem5_ARLEN,
        m_axi_gmem5_ARSIZE,
        m_axi_gmem5_ARBURST,
        m_axi_gmem5_ARLOCK,
        m_axi_gmem5_ARCACHE,
        m_axi_gmem5_ARPROT,
        m_axi_gmem5_ARQOS,
        m_axi_gmem5_ARREGION,
        m_axi_gmem5_ARUSER,
        m_axi_gmem5_RVALID,
        m_axi_gmem5_RREADY,
        m_axi_gmem5_RDATA,
        m_axi_gmem5_RLAST,
        m_axi_gmem5_RID,
        m_axi_gmem5_RUSER,
        m_axi_gmem5_RRESP,
        m_axi_gmem5_BVALID,
        m_axi_gmem5_BREADY,
        m_axi_gmem5_BRESP,
        m_axi_gmem5_BID,
        m_axi_gmem5_BUSER,
        s_mem_din,
        s_mem_full_n,
        s_mem_write,
        offsets_dout,
        offsets_empty_n,
        offsets_read,
        batch_dout,
        batch_empty_n,
        batch_read,
        CONV_D_loc_dout,
        CONV_D_loc_empty_n,
        CONV_D_loc_read,
        deform_dout,
        deform_empty_n,
        deform_read,
        skip3_dout,
        skip3_empty_n,
        skip3_read
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 14'd2048;
parameter    ap_ST_fsm_pp0_stage1 = 14'd4096;
parameter    ap_ST_fsm_state23 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem5_AWVALID;
input   m_axi_gmem5_AWREADY;
output  [63:0] m_axi_gmem5_AWADDR;
output  [0:0] m_axi_gmem5_AWID;
output  [31:0] m_axi_gmem5_AWLEN;
output  [2:0] m_axi_gmem5_AWSIZE;
output  [1:0] m_axi_gmem5_AWBURST;
output  [1:0] m_axi_gmem5_AWLOCK;
output  [3:0] m_axi_gmem5_AWCACHE;
output  [2:0] m_axi_gmem5_AWPROT;
output  [3:0] m_axi_gmem5_AWQOS;
output  [3:0] m_axi_gmem5_AWREGION;
output  [0:0] m_axi_gmem5_AWUSER;
output   m_axi_gmem5_WVALID;
input   m_axi_gmem5_WREADY;
output  [7:0] m_axi_gmem5_WDATA;
output  [0:0] m_axi_gmem5_WSTRB;
output   m_axi_gmem5_WLAST;
output  [0:0] m_axi_gmem5_WID;
output  [0:0] m_axi_gmem5_WUSER;
output   m_axi_gmem5_ARVALID;
input   m_axi_gmem5_ARREADY;
output  [63:0] m_axi_gmem5_ARADDR;
output  [0:0] m_axi_gmem5_ARID;
output  [31:0] m_axi_gmem5_ARLEN;
output  [2:0] m_axi_gmem5_ARSIZE;
output  [1:0] m_axi_gmem5_ARBURST;
output  [1:0] m_axi_gmem5_ARLOCK;
output  [3:0] m_axi_gmem5_ARCACHE;
output  [2:0] m_axi_gmem5_ARPROT;
output  [3:0] m_axi_gmem5_ARQOS;
output  [3:0] m_axi_gmem5_ARREGION;
output  [0:0] m_axi_gmem5_ARUSER;
input   m_axi_gmem5_RVALID;
output   m_axi_gmem5_RREADY;
input  [7:0] m_axi_gmem5_RDATA;
input   m_axi_gmem5_RLAST;
input  [0:0] m_axi_gmem5_RID;
input  [0:0] m_axi_gmem5_RUSER;
input  [1:0] m_axi_gmem5_RRESP;
input   m_axi_gmem5_BVALID;
output   m_axi_gmem5_BREADY;
input  [1:0] m_axi_gmem5_BRESP;
input  [0:0] m_axi_gmem5_BID;
input  [0:0] m_axi_gmem5_BUSER;
output  [7:0] s_mem_din;
input   s_mem_full_n;
output   s_mem_write;
input  [63:0] offsets_dout;
input   offsets_empty_n;
output   offsets_read;
input  [31:0] batch_dout;
input   batch_empty_n;
output   batch_read;
input  [31:0] CONV_D_loc_dout;
input   CONV_D_loc_empty_n;
output   CONV_D_loc_read;
input  [0:0] deform_dout;
input   deform_empty_n;
output   deform_read;
input  [0:0] skip3_dout;
input   skip3_empty_n;
output   skip3_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem5_ARVALID;
reg m_axi_gmem5_RREADY;
reg s_mem_write;
reg offsets_read;
reg batch_read;
reg CONV_D_loc_read;
reg deform_read;
reg skip3_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem5_blk_n_AR;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] skip3_read_reg_209;
reg    gmem5_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage1;
reg    s_mem_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg    offsets_blk_n;
reg    batch_blk_n;
reg    CONV_D_loc_blk_n;
reg    deform_blk_n;
reg    skip3_blk_n;
reg   [63:0] indvar_flatten_reg_115;
reg   [31:0] rep_reg_126;
reg   [63:0] offsets_read_reg_204;
reg  signed [31:0] CONV_D_loc_read_reg_213;
wire   [31:0] select_ln57_fu_137_p3;
reg   [31:0] select_ln57_reg_219;
wire   [31:0] grp_fu_145_p2;
reg   [31:0] mul_i_i_reg_224;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_155_p2;
reg   [63:0] mul_ln56_reg_240;
wire    ap_CS_fsm_state11;
wire   [63:0] add_ln60_fu_161_p2;
reg   [63:0] add_ln60_reg_245;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state12_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
reg    ap_block_state14_io;
wire    ap_block_state16_pp0_stage0_iter2;
wire    ap_block_state18_pp0_stage0_iter3;
wire    ap_block_state20_pp0_stage0_iter4;
reg    ap_block_state22_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln60_fu_167_p2;
reg   [0:0] icmp_ln60_reg_250;
wire   [31:0] select_ln60_fu_177_p3;
reg   [31:0] select_ln60_reg_254;
reg   [63:0] gmem5_addr_reg_260;
wire    ap_block_state13_pp0_stage1_iter0;
wire    ap_block_state15_pp0_stage1_iter1;
wire    ap_block_state17_pp0_stage1_iter2;
wire    ap_block_state19_pp0_stage1_iter3;
reg    ap_block_state21_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] add_ln61_fu_199_p2;
reg   [31:0] add_ln61_reg_266;
reg   [7:0] gmem5_addr_read_reg_271;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_119_p4;
reg   [31:0] ap_phi_mux_rep_phi_fu_130_p4;
wire   [63:0] add_ln64_fu_188_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_155_p0;
wire   [31:0] grp_fu_155_p1;
wire   [0:0] icmp_ln61_fu_172_p2;
wire   [63:0] zext_ln61_fu_185_p1;
wire    ap_CS_fsm_state23;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_155_p00;
wire   [63:0] grp_fu_155_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

top_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(CONV_D_loc_read_reg_213),
    .din1(CONV_D_loc_read_reg_213),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

top_mul_32ns_32ns_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_5_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_155_p0),
    .din1(grp_fu_155_p1),
    .ce(1'b1),
    .dout(grp_fu_155_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_reg_250 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_115 <= add_ln60_reg_245;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten_reg_115 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_reg_250 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        rep_reg_126 <= add_ln61_reg_266;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        rep_reg_126 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        CONV_D_loc_read_reg_213 <= CONV_D_loc_dout;
        offsets_read_reg_204 <= offsets_dout;
        select_ln57_reg_219 <= select_ln57_fu_137_p3;
        skip3_read_reg_209 <= skip3_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln60_reg_245 <= add_ln60_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_reg_250 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln61_reg_266 <= add_ln61_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (skip3_read_reg_209 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem5_addr_read_reg_271 <= m_axi_gmem5_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_reg_250 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (skip3_read_reg_209 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem5_addr_reg_260 <= add_ln64_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln60_reg_250 <= icmp_ln60_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_i_i_reg_224 <= grp_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln56_reg_240 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln60_reg_254 <= select_ln60_fu_177_p3;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        CONV_D_loc_blk_n = CONV_D_loc_empty_n;
    end else begin
        CONV_D_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((offsets_empty_n == 1'b0) | (1'b0 == CONV_D_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip3_empty_n == 1'b0) | (deform_empty_n == 1'b0) | (batch_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        CONV_D_loc_read = 1'b1;
    end else begin
        CONV_D_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln60_fu_167_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln60_reg_250 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_119_p4 = add_ln60_reg_245;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_119_p4 = indvar_flatten_reg_115;
    end
end

always @ (*) begin
    if (((icmp_ln60_reg_250 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_rep_phi_fu_130_p4 = add_ln61_reg_266;
    end else begin
        ap_phi_mux_rep_phi_fu_130_p4 = rep_reg_126;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_blk_n = batch_empty_n;
    end else begin
        batch_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((offsets_empty_n == 1'b0) | (1'b0 == CONV_D_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip3_empty_n == 1'b0) | (deform_empty_n == 1'b0) | (batch_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_read = 1'b1;
    end else begin
        batch_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        deform_blk_n = deform_empty_n;
    end else begin
        deform_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((offsets_empty_n == 1'b0) | (1'b0 == CONV_D_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip3_empty_n == 1'b0) | (deform_empty_n == 1'b0) | (batch_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        deform_read = 1'b1;
    end else begin
        deform_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (skip3_read_reg_209 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem5_blk_n_AR = m_axi_gmem5_ARREADY;
    end else begin
        gmem5_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (skip3_read_reg_209 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        gmem5_blk_n_R = m_axi_gmem5_RVALID;
    end else begin
        gmem5_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (skip3_read_reg_209 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_gmem5_ARVALID = 1'b1;
    end else begin
        m_axi_gmem5_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (skip3_read_reg_209 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem5_RREADY = 1'b1;
    end else begin
        m_axi_gmem5_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        offsets_blk_n = offsets_empty_n;
    end else begin
        offsets_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((offsets_empty_n == 1'b0) | (1'b0 == CONV_D_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip3_empty_n == 1'b0) | (deform_empty_n == 1'b0) | (batch_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        offsets_read = 1'b1;
    end else begin
        offsets_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (skip3_read_reg_209 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        s_mem_blk_n = s_mem_full_n;
    end else begin
        s_mem_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (skip3_read_reg_209 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_mem_write = 1'b1;
    end else begin
        s_mem_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_blk_n = skip3_empty_n;
    end else begin
        skip3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((offsets_empty_n == 1'b0) | (1'b0 == CONV_D_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip3_empty_n == 1'b0) | (deform_empty_n == 1'b0) | (batch_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_read = 1'b1;
    end else begin
        skip3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((offsets_empty_n == 1'b0) | (1'b0 == CONV_D_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip3_empty_n == 1'b0) | (deform_empty_n == 1'b0) | (batch_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln60_fu_167_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((icmp_ln60_fu_167_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln60_fu_161_p2 = (ap_phi_mux_indvar_flatten_phi_fu_119_p4 + 64'd1);

assign add_ln61_fu_199_p2 = (select_ln60_reg_254 + 32'd1);

assign add_ln64_fu_188_p2 = (offsets_read_reg_204 + zext_ln61_fu_185_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((s_mem_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (skip3_read_reg_209 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((s_mem_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (skip3_read_reg_209 == 1'd0)) | ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((s_mem_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (skip3_read_reg_209 == 1'd0)) | ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_gmem5_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (skip3_read_reg_209 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_gmem5_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (skip3_read_reg_209 == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((offsets_empty_n == 1'b0) | (1'b0 == CONV_D_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip3_empty_n == 1'b0) | (deform_empty_n == 1'b0) | (batch_empty_n == 1'b0));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((m_axi_gmem5_ARREADY == 1'b0) & (skip3_read_reg_209 == 1'd0));
end

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp0_stage1_iter4 = ((m_axi_gmem5_RVALID == 1'b0) & (skip3_read_reg_209 == 1'd0));
end

always @ (*) begin
    ap_block_state22_pp0_stage0_iter5 = ((s_mem_full_n == 1'b0) & (skip3_read_reg_209 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_155_p0 = grp_fu_155_p00;

assign grp_fu_155_p00 = select_ln57_reg_219;

assign grp_fu_155_p1 = grp_fu_155_p10;

assign grp_fu_155_p10 = mul_i_i_reg_224;

assign icmp_ln60_fu_167_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_119_p4 == mul_ln56_reg_240) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_172_p2 = ((ap_phi_mux_rep_phi_fu_130_p4 == mul_i_i_reg_224) ? 1'b1 : 1'b0);

assign m_axi_gmem5_ARADDR = gmem5_addr_reg_260;

assign m_axi_gmem5_ARBURST = 2'd0;

assign m_axi_gmem5_ARCACHE = 4'd0;

assign m_axi_gmem5_ARID = 1'd0;

assign m_axi_gmem5_ARLEN = 32'd1;

assign m_axi_gmem5_ARLOCK = 2'd0;

assign m_axi_gmem5_ARPROT = 3'd0;

assign m_axi_gmem5_ARQOS = 4'd0;

assign m_axi_gmem5_ARREGION = 4'd0;

assign m_axi_gmem5_ARSIZE = 3'd0;

assign m_axi_gmem5_ARUSER = 1'd0;

assign m_axi_gmem5_AWADDR = 64'd0;

assign m_axi_gmem5_AWBURST = 2'd0;

assign m_axi_gmem5_AWCACHE = 4'd0;

assign m_axi_gmem5_AWID = 1'd0;

assign m_axi_gmem5_AWLEN = 32'd0;

assign m_axi_gmem5_AWLOCK = 2'd0;

assign m_axi_gmem5_AWPROT = 3'd0;

assign m_axi_gmem5_AWQOS = 4'd0;

assign m_axi_gmem5_AWREGION = 4'd0;

assign m_axi_gmem5_AWSIZE = 3'd0;

assign m_axi_gmem5_AWUSER = 1'd0;

assign m_axi_gmem5_AWVALID = 1'b0;

assign m_axi_gmem5_BREADY = 1'b0;

assign m_axi_gmem5_WDATA = 8'd0;

assign m_axi_gmem5_WID = 1'd0;

assign m_axi_gmem5_WLAST = 1'b0;

assign m_axi_gmem5_WSTRB = 1'd0;

assign m_axi_gmem5_WUSER = 1'd0;

assign m_axi_gmem5_WVALID = 1'b0;

assign s_mem_din = gmem5_addr_read_reg_271;

assign select_ln57_fu_137_p3 = ((deform_dout[0:0] == 1'b1) ? batch_dout : 32'd0);

assign select_ln60_fu_177_p3 = ((icmp_ln61_fu_172_p2[0:0] == 1'b1) ? 32'd0 : ap_phi_mux_rep_phi_fu_130_p4);

assign zext_ln61_fu_185_p1 = select_ln60_reg_254;

endmodule //top_M2S_addr_ap_uint_8_ap_uint_8_s
