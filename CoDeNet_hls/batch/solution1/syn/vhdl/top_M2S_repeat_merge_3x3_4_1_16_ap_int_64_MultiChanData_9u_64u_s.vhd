-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_M2S_repeat_merge_3x3_4_1_16_ap_int_64_MultiChanData_9u_64u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    k3s_din : OUT STD_LOGIC_VECTOR (575 downto 0);
    k3s_full_n : IN STD_LOGIC;
    k3s_write : OUT STD_LOGIC;
    k3_buffer_V_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_0_ce0 : OUT STD_LOGIC;
    k3_buffer_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_0_ce1 : OUT STD_LOGIC;
    k3_buffer_V_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_1_ce0 : OUT STD_LOGIC;
    k3_buffer_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_1_ce1 : OUT STD_LOGIC;
    k3_buffer_V_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_2_ce0 : OUT STD_LOGIC;
    k3_buffer_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_2_ce1 : OUT STD_LOGIC;
    k3_buffer_V_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_3_ce0 : OUT STD_LOGIC;
    k3_buffer_V_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_3_ce1 : OUT STD_LOGIC;
    k3_buffer_V_3_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_4_ce0 : OUT STD_LOGIC;
    k3_buffer_V_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_4_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_4_ce1 : OUT STD_LOGIC;
    k3_buffer_V_4_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_5_ce0 : OUT STD_LOGIC;
    k3_buffer_V_5_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_5_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_5_ce1 : OUT STD_LOGIC;
    k3_buffer_V_5_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_6_ce0 : OUT STD_LOGIC;
    k3_buffer_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_6_ce1 : OUT STD_LOGIC;
    k3_buffer_V_6_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_7_ce0 : OUT STD_LOGIC;
    k3_buffer_V_7_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_7_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_7_ce1 : OUT STD_LOGIC;
    k3_buffer_V_7_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_8_ce0 : OUT STD_LOGIC;
    k3_buffer_V_8_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    k3_buffer_V_8_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    k3_buffer_V_8_ce1 : OUT STD_LOGIC;
    k3_buffer_V_8_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul_ln93_1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln93_1_loc_empty_n : IN STD_LOGIC;
    mul_ln93_1_loc_read : OUT STD_LOGIC;
    ret_V_cast_loc_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    ret_V_cast_loc_empty_n : IN STD_LOGIC;
    ret_V_cast_loc_read : OUT STD_LOGIC;
    skip3_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    skip3_empty_n : IN STD_LOGIC;
    skip3_read : OUT STD_LOGIC );
end;


architecture behav of top_M2S_repeat_merge_3x3_4_1_16_ap_int_64_MultiChanData_9u_64u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv44_0 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv44_1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv16_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000101";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv33_1C71D : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000011100011100011101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal k3s_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal skip3_4_reg_1443 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln93_1_loc_blk_n : STD_LOGIC;
    signal ret_V_cast_loc_blk_n : STD_LOGIC;
    signal skip3_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_860 : STD_LOGIC_VECTOR (43 downto 0);
    signal i_reg_871 : STD_LOGIC_VECTOR (11 downto 0);
    signal batchD_reg_1447 : STD_LOGIC_VECTOR (31 downto 0);
    signal OCIC_reg_1452 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_888_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal bound_reg_1468 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln129_fu_894_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal add_ln129_reg_1473 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln129_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_reg_1478 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln129_fu_910_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln129_reg_1482 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_932_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_1489 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal empty_reg_1489_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_1489_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln130_fu_943_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln130_reg_1503 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state11_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state26_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state10_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln134_fu_1005_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln134_reg_1543 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln134_1_fu_1010_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln134_1_reg_1548 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state9_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state29_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal k3_buffer_V_3_load_3_reg_1653 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal k3_buffer_V_4_load_3_reg_1658 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_5_load_3_reg_1663 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_6_load_3_reg_1668 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_7_load_3_reg_1673 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_8_load_3_reg_1678 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_0_load_3_reg_1683 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_1_load_3_reg_1688 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_2_load_3_reg_1693 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_4_load_4_reg_1698 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_5_load_4_reg_1703 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_6_load_4_reg_1708 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_7_load_4_reg_1713 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_8_load_4_reg_1718 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_0_load_4_reg_1723 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_1_load_4_reg_1728 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_2_load_4_reg_1733 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_3_load_4_reg_1738 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_5_load_5_reg_1833 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_6_load_5_reg_1838 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_7_load_5_reg_1843 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_8_load_5_reg_1848 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_0_load_5_reg_1853 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_1_load_5_reg_1858 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_2_load_5_reg_1863 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_3_load_5_reg_1868 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_4_load_5_reg_1873 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_6_load_6_reg_1878 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_7_load_6_reg_1883 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_8_load_6_reg_1888 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_0_load_6_reg_1893 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_1_load_6_reg_1898 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_2_load_6_reg_1903 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_3_load_6_reg_1908 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_4_load_6_reg_1913 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_5_load_6_reg_1918 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_7_load_7_reg_2058 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_8_load_7_reg_2063 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_0_load_7_reg_2068 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_1_load_7_reg_2073 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_2_load_7_reg_2078 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_3_load_7_reg_2083 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_4_load_7_reg_2088 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_5_load_7_reg_2093 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_6_load_7_reg_2098 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_8_load_8_reg_2103 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_0_load_8_reg_2108 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_1_load_8_reg_2113 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_2_load_8_reg_2118 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_3_load_8_reg_2123 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_4_load_8_reg_2128 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_5_load_8_reg_2133 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_6_load_8_reg_2138 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_7_load_8_reg_2143 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_0_load_reg_2148 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_1_load_reg_2153 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_2_load_reg_2158 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_3_load_reg_2163 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_4_load_reg_2168 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_5_load_reg_2173 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_6_load_reg_2178 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_7_load_reg_2183 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_8_load_reg_2188 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_938_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal urem_ln134_reg_2283 : STD_LOGIC_VECTOR (15 downto 0);
    signal k3_buffer_V_1_load_1_reg_2288 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_2_load_1_reg_2293 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_3_load_1_reg_2298 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_4_load_1_reg_2303 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_5_load_1_reg_2308 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_6_load_1_reg_2313 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_7_load_1_reg_2318 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_8_load_1_reg_2323 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_0_load_1_reg_2328 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_2_load_2_reg_2333 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_3_load_2_reg_2338 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_4_load_2_reg_2343 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_5_load_2_reg_2348 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_6_load_2_reg_2353 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_7_load_2_reg_2358 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_8_load_2_reg_2363 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_0_load_2_reg_2368 : STD_LOGIC_VECTOR (63 downto 0);
    signal k3_buffer_V_1_load_2_reg_2373 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_864_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_875_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln134_4_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln134_5_fu_1046_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_6_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_7_fu_1096_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_8_fu_1118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln134_9_fu_1140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_1_fu_1162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln134_2_fu_1184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_3_fu_1206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal grp_fu_888_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_888_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln130_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_i_i_fu_921_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast3_i_i_fu_928_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln130_fu_918_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_938_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln134_2_fu_948_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln134_3_fu_957_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln134_4_fu_966_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln134_5_fu_975_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln134_6_fu_984_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln134_7_fu_993_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1380_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_92_fu_1015_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1387_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_93_fu_1037_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1394_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_94_fu_1065_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1401_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_95_fu_1087_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1408_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_96_fu_1109_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1415_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_97_fu_1131_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1422_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_89_fu_1153_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1429_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_90_fu_1175_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1436_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_91_fu_1197_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln134_fu_1219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_1342_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_1327_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_fu_1312_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_1297_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_1282_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_1267_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_1252_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1237_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1222_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1380_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1380_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1387_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1387_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1394_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1394_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1401_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1401_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1408_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1408_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1415_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1415_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1422_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1422_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1429_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1429_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1436_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1436_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_938_ce : STD_LOGIC;
    signal grp_fu_1380_ce : STD_LOGIC;
    signal grp_fu_1387_ce : STD_LOGIC;
    signal grp_fu_1394_ce : STD_LOGIC;
    signal grp_fu_1401_ce : STD_LOGIC;
    signal grp_fu_1408_ce : STD_LOGIC;
    signal grp_fu_1415_ce : STD_LOGIC;
    signal grp_fu_1422_ce : STD_LOGIC;
    signal grp_fu_1429_ce : STD_LOGIC;
    signal grp_fu_1436_ce : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1380_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1387_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1394_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1401_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1408_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1415_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1422_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1429_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1436_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_888_p00 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_888_p10 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_32ns_12ns_44_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component top_urem_16ns_5ns_16_20_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component top_mux_964_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_mul_mul_16ns_18ns_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;



begin
    mul_32ns_12ns_44_5_1_U635 : component top_mul_32ns_12ns_44_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 12,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_888_p0,
        din1 => grp_fu_888_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_888_p2);

    urem_16ns_5ns_16_20_1_U636 : component top_urem_16ns_5ns_16_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_1489,
        din1 => grp_fu_938_p1,
        ce => grp_fu_938_ce,
        dout => grp_fu_938_p2);

    mux_964_64_1_1_U637 : component top_mux_964_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k3_buffer_V_0_load_reg_2148,
        din1 => k3_buffer_V_1_load_reg_2153,
        din2 => k3_buffer_V_2_load_reg_2158,
        din3 => k3_buffer_V_3_load_reg_2163,
        din4 => k3_buffer_V_4_load_reg_2168,
        din5 => k3_buffer_V_5_load_reg_2173,
        din6 => k3_buffer_V_6_load_reg_2178,
        din7 => k3_buffer_V_7_load_reg_2183,
        din8 => k3_buffer_V_8_load_reg_2188,
        din9 => zext_ln134_fu_1219_p1,
        dout => tmp_fu_1222_p11);

    mux_964_64_1_1_U638 : component top_mux_964_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k3_buffer_V_1_load_1_reg_2288,
        din1 => k3_buffer_V_2_load_1_reg_2293,
        din2 => k3_buffer_V_3_load_1_reg_2298,
        din3 => k3_buffer_V_4_load_1_reg_2303,
        din4 => k3_buffer_V_5_load_1_reg_2308,
        din5 => k3_buffer_V_6_load_1_reg_2313,
        din6 => k3_buffer_V_7_load_1_reg_2318,
        din7 => k3_buffer_V_8_load_1_reg_2323,
        din8 => k3_buffer_V_0_load_1_reg_2328,
        din9 => zext_ln134_fu_1219_p1,
        dout => tmp_s_fu_1237_p11);

    mux_964_64_1_1_U639 : component top_mux_964_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k3_buffer_V_2_load_2_reg_2333,
        din1 => k3_buffer_V_3_load_2_reg_2338,
        din2 => k3_buffer_V_4_load_2_reg_2343,
        din3 => k3_buffer_V_5_load_2_reg_2348,
        din4 => k3_buffer_V_6_load_2_reg_2353,
        din5 => k3_buffer_V_7_load_2_reg_2358,
        din6 => k3_buffer_V_8_load_2_reg_2363,
        din7 => k3_buffer_V_0_load_2_reg_2368,
        din8 => k3_buffer_V_1_load_2_reg_2373,
        din9 => zext_ln134_fu_1219_p1,
        dout => tmp_47_fu_1252_p11);

    mux_964_64_1_1_U640 : component top_mux_964_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k3_buffer_V_3_load_3_reg_1653,
        din1 => k3_buffer_V_4_load_3_reg_1658,
        din2 => k3_buffer_V_5_load_3_reg_1663,
        din3 => k3_buffer_V_6_load_3_reg_1668,
        din4 => k3_buffer_V_7_load_3_reg_1673,
        din5 => k3_buffer_V_8_load_3_reg_1678,
        din6 => k3_buffer_V_0_load_3_reg_1683,
        din7 => k3_buffer_V_1_load_3_reg_1688,
        din8 => k3_buffer_V_2_load_3_reg_1693,
        din9 => zext_ln134_fu_1219_p1,
        dout => tmp_48_fu_1267_p11);

    mux_964_64_1_1_U641 : component top_mux_964_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k3_buffer_V_4_load_4_reg_1698,
        din1 => k3_buffer_V_5_load_4_reg_1703,
        din2 => k3_buffer_V_6_load_4_reg_1708,
        din3 => k3_buffer_V_7_load_4_reg_1713,
        din4 => k3_buffer_V_8_load_4_reg_1718,
        din5 => k3_buffer_V_0_load_4_reg_1723,
        din6 => k3_buffer_V_1_load_4_reg_1728,
        din7 => k3_buffer_V_2_load_4_reg_1733,
        din8 => k3_buffer_V_3_load_4_reg_1738,
        din9 => zext_ln134_fu_1219_p1,
        dout => tmp_49_fu_1282_p11);

    mux_964_64_1_1_U642 : component top_mux_964_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k3_buffer_V_5_load_5_reg_1833,
        din1 => k3_buffer_V_6_load_5_reg_1838,
        din2 => k3_buffer_V_7_load_5_reg_1843,
        din3 => k3_buffer_V_8_load_5_reg_1848,
        din4 => k3_buffer_V_0_load_5_reg_1853,
        din5 => k3_buffer_V_1_load_5_reg_1858,
        din6 => k3_buffer_V_2_load_5_reg_1863,
        din7 => k3_buffer_V_3_load_5_reg_1868,
        din8 => k3_buffer_V_4_load_5_reg_1873,
        din9 => zext_ln134_fu_1219_p1,
        dout => tmp_50_fu_1297_p11);

    mux_964_64_1_1_U643 : component top_mux_964_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k3_buffer_V_6_load_6_reg_1878,
        din1 => k3_buffer_V_7_load_6_reg_1883,
        din2 => k3_buffer_V_8_load_6_reg_1888,
        din3 => k3_buffer_V_0_load_6_reg_1893,
        din4 => k3_buffer_V_1_load_6_reg_1898,
        din5 => k3_buffer_V_2_load_6_reg_1903,
        din6 => k3_buffer_V_3_load_6_reg_1908,
        din7 => k3_buffer_V_4_load_6_reg_1913,
        din8 => k3_buffer_V_5_load_6_reg_1918,
        din9 => zext_ln134_fu_1219_p1,
        dout => tmp_51_fu_1312_p11);

    mux_964_64_1_1_U644 : component top_mux_964_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k3_buffer_V_7_load_7_reg_2058,
        din1 => k3_buffer_V_8_load_7_reg_2063,
        din2 => k3_buffer_V_0_load_7_reg_2068,
        din3 => k3_buffer_V_1_load_7_reg_2073,
        din4 => k3_buffer_V_2_load_7_reg_2078,
        din5 => k3_buffer_V_3_load_7_reg_2083,
        din6 => k3_buffer_V_4_load_7_reg_2088,
        din7 => k3_buffer_V_5_load_7_reg_2093,
        din8 => k3_buffer_V_6_load_7_reg_2098,
        din9 => zext_ln134_fu_1219_p1,
        dout => tmp_52_fu_1327_p11);

    mux_964_64_1_1_U645 : component top_mux_964_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => k3_buffer_V_8_load_8_reg_2103,
        din1 => k3_buffer_V_0_load_8_reg_2108,
        din2 => k3_buffer_V_1_load_8_reg_2113,
        din3 => k3_buffer_V_2_load_8_reg_2118,
        din4 => k3_buffer_V_3_load_8_reg_2123,
        din5 => k3_buffer_V_4_load_8_reg_2128,
        din6 => k3_buffer_V_5_load_8_reg_2133,
        din7 => k3_buffer_V_6_load_8_reg_2138,
        din8 => k3_buffer_V_7_load_8_reg_2143,
        din9 => zext_ln134_fu_1219_p1,
        dout => tmp_53_fu_1342_p11);

    mul_mul_16ns_18ns_33_4_1_U646 : component top_mul_mul_16ns_18ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1380_p0,
        din1 => grp_fu_1380_p1,
        ce => grp_fu_1380_ce,
        dout => grp_fu_1380_p2);

    mul_mul_16ns_18ns_33_4_1_U647 : component top_mul_mul_16ns_18ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1387_p0,
        din1 => grp_fu_1387_p1,
        ce => grp_fu_1387_ce,
        dout => grp_fu_1387_p2);

    mul_mul_16ns_18ns_33_4_1_U648 : component top_mul_mul_16ns_18ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1394_p0,
        din1 => grp_fu_1394_p1,
        ce => grp_fu_1394_ce,
        dout => grp_fu_1394_p2);

    mul_mul_16ns_18ns_33_4_1_U649 : component top_mul_mul_16ns_18ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1401_p0,
        din1 => grp_fu_1401_p1,
        ce => grp_fu_1401_ce,
        dout => grp_fu_1401_p2);

    mul_mul_16ns_18ns_33_4_1_U650 : component top_mul_mul_16ns_18ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1408_p0,
        din1 => grp_fu_1408_p1,
        ce => grp_fu_1408_ce,
        dout => grp_fu_1408_p2);

    mul_mul_16ns_18ns_33_4_1_U651 : component top_mul_mul_16ns_18ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1415_p0,
        din1 => grp_fu_1415_p1,
        ce => grp_fu_1415_ce,
        dout => grp_fu_1415_p2);

    mul_mul_16ns_18ns_33_4_1_U652 : component top_mul_mul_16ns_18ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1422_p0,
        din1 => grp_fu_1422_p1,
        ce => grp_fu_1422_ce,
        dout => grp_fu_1422_p2);

    mul_mul_16ns_18ns_33_4_1_U653 : component top_mul_mul_16ns_18ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1429_p0,
        din1 => grp_fu_1429_p1,
        ce => grp_fu_1429_ce,
        dout => grp_fu_1429_p2);

    mul_mul_16ns_18ns_33_4_1_U654 : component top_mul_mul_16ns_18ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1436_p0,
        din1 => grp_fu_1436_p1,
        ce => grp_fu_1436_ce,
        dout => grp_fu_1436_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_871_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln129_reg_1478 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_871 <= add_ln130_reg_1503;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_871 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_860_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln129_reg_1478 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_860 <= add_ln129_reg_1473;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_860 <= ap_const_lv44_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                OCIC_reg_1452 <= ret_V_cast_loc_dout;
                batchD_reg_1447 <= mul_ln93_1_loc_dout;
                skip3_4_reg_1443 <= skip3_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln129_reg_1473 <= add_ln129_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_reg_1478 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln130_reg_1503 <= add_ln130_fu_943_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln134_1_reg_1548 <= add_ln134_1_fu_1010_p2;
                add_ln134_reg_1543 <= add_ln134_fu_1005_p2;
                urem_ln134_reg_2283 <= grp_fu_938_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bound_reg_1468 <= grp_fu_888_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_reg_1478 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                empty_reg_1489 <= empty_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                empty_reg_1489_pp0_iter1_reg <= empty_reg_1489;
                empty_reg_1489_pp0_iter2_reg <= empty_reg_1489_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln129_reg_1478 <= icmp_ln129_fu_900_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                k3_buffer_V_0_load_1_reg_2328 <= k3_buffer_V_0_q1;
                k3_buffer_V_0_load_2_reg_2368 <= k3_buffer_V_0_q0;
                k3_buffer_V_1_load_1_reg_2288 <= k3_buffer_V_1_q1;
                k3_buffer_V_1_load_2_reg_2373 <= k3_buffer_V_1_q0;
                k3_buffer_V_2_load_1_reg_2293 <= k3_buffer_V_2_q1;
                k3_buffer_V_2_load_2_reg_2333 <= k3_buffer_V_2_q0;
                k3_buffer_V_3_load_1_reg_2298 <= k3_buffer_V_3_q1;
                k3_buffer_V_3_load_2_reg_2338 <= k3_buffer_V_3_q0;
                k3_buffer_V_4_load_1_reg_2303 <= k3_buffer_V_4_q1;
                k3_buffer_V_4_load_2_reg_2343 <= k3_buffer_V_4_q0;
                k3_buffer_V_5_load_1_reg_2308 <= k3_buffer_V_5_q1;
                k3_buffer_V_5_load_2_reg_2348 <= k3_buffer_V_5_q0;
                k3_buffer_V_6_load_1_reg_2313 <= k3_buffer_V_6_q1;
                k3_buffer_V_6_load_2_reg_2353 <= k3_buffer_V_6_q0;
                k3_buffer_V_7_load_1_reg_2318 <= k3_buffer_V_7_q1;
                k3_buffer_V_7_load_2_reg_2358 <= k3_buffer_V_7_q0;
                k3_buffer_V_8_load_1_reg_2323 <= k3_buffer_V_8_q1;
                k3_buffer_V_8_load_2_reg_2363 <= k3_buffer_V_8_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                k3_buffer_V_0_load_3_reg_1683 <= k3_buffer_V_0_q1;
                k3_buffer_V_0_load_4_reg_1723 <= k3_buffer_V_0_q0;
                k3_buffer_V_1_load_3_reg_1688 <= k3_buffer_V_1_q1;
                k3_buffer_V_1_load_4_reg_1728 <= k3_buffer_V_1_q0;
                k3_buffer_V_2_load_3_reg_1693 <= k3_buffer_V_2_q1;
                k3_buffer_V_2_load_4_reg_1733 <= k3_buffer_V_2_q0;
                k3_buffer_V_3_load_3_reg_1653 <= k3_buffer_V_3_q1;
                k3_buffer_V_3_load_4_reg_1738 <= k3_buffer_V_3_q0;
                k3_buffer_V_4_load_3_reg_1658 <= k3_buffer_V_4_q1;
                k3_buffer_V_4_load_4_reg_1698 <= k3_buffer_V_4_q0;
                k3_buffer_V_5_load_3_reg_1663 <= k3_buffer_V_5_q1;
                k3_buffer_V_5_load_4_reg_1703 <= k3_buffer_V_5_q0;
                k3_buffer_V_6_load_3_reg_1668 <= k3_buffer_V_6_q1;
                k3_buffer_V_6_load_4_reg_1708 <= k3_buffer_V_6_q0;
                k3_buffer_V_7_load_3_reg_1673 <= k3_buffer_V_7_q1;
                k3_buffer_V_7_load_4_reg_1713 <= k3_buffer_V_7_q0;
                k3_buffer_V_8_load_3_reg_1678 <= k3_buffer_V_8_q1;
                k3_buffer_V_8_load_4_reg_1718 <= k3_buffer_V_8_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                k3_buffer_V_0_load_5_reg_1853 <= k3_buffer_V_0_q1;
                k3_buffer_V_0_load_6_reg_1893 <= k3_buffer_V_0_q0;
                k3_buffer_V_1_load_5_reg_1858 <= k3_buffer_V_1_q1;
                k3_buffer_V_1_load_6_reg_1898 <= k3_buffer_V_1_q0;
                k3_buffer_V_2_load_5_reg_1863 <= k3_buffer_V_2_q1;
                k3_buffer_V_2_load_6_reg_1903 <= k3_buffer_V_2_q0;
                k3_buffer_V_3_load_5_reg_1868 <= k3_buffer_V_3_q1;
                k3_buffer_V_3_load_6_reg_1908 <= k3_buffer_V_3_q0;
                k3_buffer_V_4_load_5_reg_1873 <= k3_buffer_V_4_q1;
                k3_buffer_V_4_load_6_reg_1913 <= k3_buffer_V_4_q0;
                k3_buffer_V_5_load_5_reg_1833 <= k3_buffer_V_5_q1;
                k3_buffer_V_5_load_6_reg_1918 <= k3_buffer_V_5_q0;
                k3_buffer_V_6_load_5_reg_1838 <= k3_buffer_V_6_q1;
                k3_buffer_V_6_load_6_reg_1878 <= k3_buffer_V_6_q0;
                k3_buffer_V_7_load_5_reg_1843 <= k3_buffer_V_7_q1;
                k3_buffer_V_7_load_6_reg_1883 <= k3_buffer_V_7_q0;
                k3_buffer_V_8_load_5_reg_1848 <= k3_buffer_V_8_q1;
                k3_buffer_V_8_load_6_reg_1888 <= k3_buffer_V_8_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                k3_buffer_V_0_load_7_reg_2068 <= k3_buffer_V_0_q1;
                k3_buffer_V_0_load_8_reg_2108 <= k3_buffer_V_0_q0;
                k3_buffer_V_1_load_7_reg_2073 <= k3_buffer_V_1_q1;
                k3_buffer_V_1_load_8_reg_2113 <= k3_buffer_V_1_q0;
                k3_buffer_V_2_load_7_reg_2078 <= k3_buffer_V_2_q1;
                k3_buffer_V_2_load_8_reg_2118 <= k3_buffer_V_2_q0;
                k3_buffer_V_3_load_7_reg_2083 <= k3_buffer_V_3_q1;
                k3_buffer_V_3_load_8_reg_2123 <= k3_buffer_V_3_q0;
                k3_buffer_V_4_load_7_reg_2088 <= k3_buffer_V_4_q1;
                k3_buffer_V_4_load_8_reg_2128 <= k3_buffer_V_4_q0;
                k3_buffer_V_5_load_7_reg_2093 <= k3_buffer_V_5_q1;
                k3_buffer_V_5_load_8_reg_2133 <= k3_buffer_V_5_q0;
                k3_buffer_V_6_load_7_reg_2098 <= k3_buffer_V_6_q1;
                k3_buffer_V_6_load_8_reg_2138 <= k3_buffer_V_6_q0;
                k3_buffer_V_7_load_7_reg_2058 <= k3_buffer_V_7_q1;
                k3_buffer_V_7_load_8_reg_2143 <= k3_buffer_V_7_q0;
                k3_buffer_V_8_load_7_reg_2063 <= k3_buffer_V_8_q1;
                k3_buffer_V_8_load_8_reg_2103 <= k3_buffer_V_8_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                k3_buffer_V_0_load_reg_2148 <= k3_buffer_V_0_q0;
                k3_buffer_V_1_load_reg_2153 <= k3_buffer_V_1_q0;
                k3_buffer_V_2_load_reg_2158 <= k3_buffer_V_2_q0;
                k3_buffer_V_3_load_reg_2163 <= k3_buffer_V_3_q0;
                k3_buffer_V_4_load_reg_2168 <= k3_buffer_V_4_q0;
                k3_buffer_V_5_load_reg_2173 <= k3_buffer_V_5_q0;
                k3_buffer_V_6_load_reg_2178 <= k3_buffer_V_6_q0;
                k3_buffer_V_7_load_reg_2183 <= k3_buffer_V_7_q0;
                k3_buffer_V_8_load_reg_2188 <= k3_buffer_V_8_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_900_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln129_reg_1482 <= select_ln129_fu_910_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, mul_ln93_1_loc_empty_n, ret_V_cast_loc_empty_n, skip3_empty_n, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, icmp_ln129_fu_900_p2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ret_V_cast_loc_empty_n = ap_const_logic_0) or (mul_ln93_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln129_fu_900_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln129_fu_900_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln129_fu_894_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_864_p4) + unsigned(ap_const_lv44_1));
    add_ln130_fu_943_p2 <= std_logic_vector(unsigned(select_ln129_reg_1482) + unsigned(ap_const_lv12_1));
    add_ln134_1_fu_1010_p2 <= std_logic_vector(unsigned(empty_reg_1489_pp0_iter2_reg) + unsigned(ap_const_lv16_2));
    add_ln134_2_fu_948_p2 <= std_logic_vector(unsigned(empty_reg_1489_pp0_iter2_reg) + unsigned(ap_const_lv16_3));
    add_ln134_3_fu_957_p2 <= std_logic_vector(unsigned(empty_reg_1489_pp0_iter2_reg) + unsigned(ap_const_lv16_4));
    add_ln134_4_fu_966_p2 <= std_logic_vector(unsigned(empty_reg_1489_pp0_iter2_reg) + unsigned(ap_const_lv16_5));
    add_ln134_5_fu_975_p2 <= std_logic_vector(unsigned(empty_reg_1489_pp0_iter2_reg) + unsigned(ap_const_lv16_6));
    add_ln134_6_fu_984_p2 <= std_logic_vector(unsigned(empty_reg_1489_pp0_iter2_reg) + unsigned(ap_const_lv16_7));
    add_ln134_7_fu_993_p2 <= std_logic_vector(unsigned(empty_reg_1489_pp0_iter2_reg) + unsigned(ap_const_lv16_8));
    add_ln134_fu_1005_p2 <= std_logic_vector(unsigned(empty_reg_1489_pp0_iter2_reg) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state30 <= ap_CS_fsm(11);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(k3s_full_n, ap_enable_reg_pp0_iter4, skip3_4_reg_1443)
    begin
                ap_block_pp0_stage2_01001 <= ((k3s_full_n = ap_const_logic_0) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(k3s_full_n, ap_enable_reg_pp0_iter4, skip3_4_reg_1443)
    begin
                ap_block_pp0_stage2_11001 <= ((k3s_full_n = ap_const_logic_0) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(k3s_full_n, ap_enable_reg_pp0_iter4, skip3_4_reg_1443)
    begin
                ap_block_pp0_stage2_subdone <= ((k3s_full_n = ap_const_logic_0) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, mul_ln93_1_loc_empty_n, ret_V_cast_loc_empty_n, skip3_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ret_V_cast_loc_empty_n = ap_const_logic_0) or (mul_ln93_1_loc_empty_n = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_pp0_stage2_iter4_assign_proc : process(k3s_full_n, skip3_4_reg_1443)
    begin
                ap_block_state29_pp0_stage2_iter4 <= ((k3s_full_n = ap_const_logic_0) and (skip3_4_reg_1443 = ap_const_lv1_0));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln129_fu_900_p2)
    begin
        if ((icmp_ln129_fu_900_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_875_p4_assign_proc : process(i_reg_871, ap_CS_fsm_pp0_stage0, icmp_ln129_reg_1478, add_ln130_reg_1503, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln129_reg_1478 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_875_p4 <= add_ln130_reg_1503;
        else 
            ap_phi_mux_i_phi_fu_875_p4 <= i_reg_871;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_864_p4_assign_proc : process(indvar_flatten_reg_860, add_ln129_reg_1473, ap_CS_fsm_pp0_stage0, icmp_ln129_reg_1478, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln129_reg_1478 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_864_p4 <= add_ln129_reg_1473;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_864_p4 <= indvar_flatten_reg_860;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    empty_fu_932_p2 <= std_logic_vector(unsigned(p_shl_cast3_i_i_fu_928_p1) + unsigned(zext_ln130_fu_918_p1));

    grp_fu_1380_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_1380_ce <= ap_const_logic_1;
        else 
            grp_fu_1380_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1380_p0 <= grp_fu_1380_p00(16 - 1 downto 0);
    grp_fu_1380_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_2_fu_948_p2),33));
    grp_fu_1380_p1 <= ap_const_lv33_1C71D(18 - 1 downto 0);

    grp_fu_1387_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_1387_ce <= ap_const_logic_1;
        else 
            grp_fu_1387_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1387_p0 <= grp_fu_1387_p00(16 - 1 downto 0);
    grp_fu_1387_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_3_fu_957_p2),33));
    grp_fu_1387_p1 <= ap_const_lv33_1C71D(18 - 1 downto 0);

    grp_fu_1394_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            grp_fu_1394_ce <= ap_const_logic_1;
        else 
            grp_fu_1394_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1394_p0 <= grp_fu_1394_p00(16 - 1 downto 0);
    grp_fu_1394_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_4_fu_966_p2),33));
    grp_fu_1394_p1 <= ap_const_lv33_1C71D(18 - 1 downto 0);

    grp_fu_1401_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            grp_fu_1401_ce <= ap_const_logic_1;
        else 
            grp_fu_1401_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1401_p0 <= grp_fu_1401_p00(16 - 1 downto 0);
    grp_fu_1401_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_5_fu_975_p2),33));
    grp_fu_1401_p1 <= ap_const_lv33_1C71D(18 - 1 downto 0);

    grp_fu_1408_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            grp_fu_1408_ce <= ap_const_logic_1;
        else 
            grp_fu_1408_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1408_p0 <= grp_fu_1408_p00(16 - 1 downto 0);
    grp_fu_1408_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_6_fu_984_p2),33));
    grp_fu_1408_p1 <= ap_const_lv33_1C71D(18 - 1 downto 0);

    grp_fu_1415_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            grp_fu_1415_ce <= ap_const_logic_1;
        else 
            grp_fu_1415_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1415_p0 <= grp_fu_1415_p00(16 - 1 downto 0);
    grp_fu_1415_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_7_fu_993_p2),33));
    grp_fu_1415_p1 <= ap_const_lv33_1C71D(18 - 1 downto 0);

    grp_fu_1422_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            grp_fu_1422_ce <= ap_const_logic_1;
        else 
            grp_fu_1422_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1422_p0 <= grp_fu_1422_p00(16 - 1 downto 0);
    grp_fu_1422_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_1489_pp0_iter2_reg),33));
    grp_fu_1422_p1 <= ap_const_lv33_1C71D(18 - 1 downto 0);

    grp_fu_1429_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            grp_fu_1429_ce <= ap_const_logic_1;
        else 
            grp_fu_1429_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1429_p0 <= grp_fu_1429_p00(16 - 1 downto 0);
    grp_fu_1429_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_reg_1543),33));
    grp_fu_1429_p1 <= ap_const_lv33_1C71D(18 - 1 downto 0);

    grp_fu_1436_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            grp_fu_1436_ce <= ap_const_logic_1;
        else 
            grp_fu_1436_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1436_p0 <= grp_fu_1436_p00(16 - 1 downto 0);
    grp_fu_1436_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_1_reg_1548),33));
    grp_fu_1436_p1 <= ap_const_lv33_1C71D(18 - 1 downto 0);
    grp_fu_888_p0 <= grp_fu_888_p00(32 - 1 downto 0);
    grp_fu_888_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(batchD_reg_1447),44));
    grp_fu_888_p1 <= grp_fu_888_p10(12 - 1 downto 0);
    grp_fu_888_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(OCIC_reg_1452),44));

    grp_fu_938_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            grp_fu_938_ce <= ap_const_logic_1;
        else 
            grp_fu_938_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_938_p1 <= ap_const_lv16_9(5 - 1 downto 0);
    icmp_ln129_fu_900_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_864_p4 = bound_reg_1468) else "0";
    icmp_ln130_fu_905_p2 <= "1" when (ap_phi_mux_i_phi_fu_875_p4 = OCIC_reg_1452) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln134_5_fu_1046_p1, zext_ln134_7_fu_1096_p1, ap_block_pp0_stage3, zext_ln134_9_fu_1140_p1, zext_ln134_1_fu_1162_p1, ap_block_pp0_stage4, zext_ln134_3_fu_1206_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_0_address0 <= zext_ln134_3_fu_1206_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            k3_buffer_V_0_address0 <= zext_ln134_1_fu_1162_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_0_address0 <= zext_ln134_9_fu_1140_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_0_address0 <= zext_ln134_7_fu_1096_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_0_address0 <= zext_ln134_5_fu_1046_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_0_address0 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, zext_ln134_4_fu_1024_p1, ap_block_pp0_stage1, zext_ln134_6_fu_1074_p1, zext_ln134_8_fu_1118_p1, ap_block_pp0_stage3, zext_ln134_2_fu_1184_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_0_address1 <= zext_ln134_2_fu_1184_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_0_address1 <= zext_ln134_8_fu_1118_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_0_address1 <= zext_ln134_6_fu_1074_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_0_address1 <= zext_ln134_4_fu_1024_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_0_address1 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_0_ce0 <= ap_const_logic_1;
        else 
            k3_buffer_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_0_ce1 <= ap_const_logic_1;
        else 
            k3_buffer_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln134_5_fu_1046_p1, zext_ln134_7_fu_1096_p1, ap_block_pp0_stage3, zext_ln134_9_fu_1140_p1, zext_ln134_1_fu_1162_p1, ap_block_pp0_stage4, zext_ln134_3_fu_1206_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_1_address0 <= zext_ln134_3_fu_1206_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            k3_buffer_V_1_address0 <= zext_ln134_1_fu_1162_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_1_address0 <= zext_ln134_9_fu_1140_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_1_address0 <= zext_ln134_7_fu_1096_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_1_address0 <= zext_ln134_5_fu_1046_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_1_address0 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, zext_ln134_4_fu_1024_p1, ap_block_pp0_stage1, zext_ln134_6_fu_1074_p1, zext_ln134_8_fu_1118_p1, ap_block_pp0_stage3, zext_ln134_2_fu_1184_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_1_address1 <= zext_ln134_2_fu_1184_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_1_address1 <= zext_ln134_8_fu_1118_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_1_address1 <= zext_ln134_6_fu_1074_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_1_address1 <= zext_ln134_4_fu_1024_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_1_address1 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_1_ce0 <= ap_const_logic_1;
        else 
            k3_buffer_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_1_ce1 <= ap_const_logic_1;
        else 
            k3_buffer_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln134_5_fu_1046_p1, zext_ln134_7_fu_1096_p1, ap_block_pp0_stage3, zext_ln134_9_fu_1140_p1, zext_ln134_1_fu_1162_p1, ap_block_pp0_stage4, zext_ln134_3_fu_1206_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_2_address0 <= zext_ln134_3_fu_1206_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            k3_buffer_V_2_address0 <= zext_ln134_1_fu_1162_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_2_address0 <= zext_ln134_9_fu_1140_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_2_address0 <= zext_ln134_7_fu_1096_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_2_address0 <= zext_ln134_5_fu_1046_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_2_address0 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, zext_ln134_4_fu_1024_p1, ap_block_pp0_stage1, zext_ln134_6_fu_1074_p1, zext_ln134_8_fu_1118_p1, ap_block_pp0_stage3, zext_ln134_2_fu_1184_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_2_address1 <= zext_ln134_2_fu_1184_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_2_address1 <= zext_ln134_8_fu_1118_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_2_address1 <= zext_ln134_6_fu_1074_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_2_address1 <= zext_ln134_4_fu_1024_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_2_address1 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_2_ce0 <= ap_const_logic_1;
        else 
            k3_buffer_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_2_ce1 <= ap_const_logic_1;
        else 
            k3_buffer_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln134_5_fu_1046_p1, zext_ln134_7_fu_1096_p1, ap_block_pp0_stage3, zext_ln134_9_fu_1140_p1, zext_ln134_1_fu_1162_p1, ap_block_pp0_stage4, zext_ln134_3_fu_1206_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_3_address0 <= zext_ln134_3_fu_1206_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            k3_buffer_V_3_address0 <= zext_ln134_1_fu_1162_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_3_address0 <= zext_ln134_9_fu_1140_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_3_address0 <= zext_ln134_7_fu_1096_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_3_address0 <= zext_ln134_5_fu_1046_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_3_address0 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_3_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, zext_ln134_4_fu_1024_p1, ap_block_pp0_stage1, zext_ln134_6_fu_1074_p1, zext_ln134_8_fu_1118_p1, ap_block_pp0_stage3, zext_ln134_2_fu_1184_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_3_address1 <= zext_ln134_2_fu_1184_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_3_address1 <= zext_ln134_8_fu_1118_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_3_address1 <= zext_ln134_6_fu_1074_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_3_address1 <= zext_ln134_4_fu_1024_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_3_address1 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_3_ce0 <= ap_const_logic_1;
        else 
            k3_buffer_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_3_ce1 <= ap_const_logic_1;
        else 
            k3_buffer_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln134_5_fu_1046_p1, zext_ln134_7_fu_1096_p1, ap_block_pp0_stage3, zext_ln134_9_fu_1140_p1, zext_ln134_1_fu_1162_p1, ap_block_pp0_stage4, zext_ln134_3_fu_1206_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_4_address0 <= zext_ln134_3_fu_1206_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            k3_buffer_V_4_address0 <= zext_ln134_1_fu_1162_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_4_address0 <= zext_ln134_9_fu_1140_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_4_address0 <= zext_ln134_7_fu_1096_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_4_address0 <= zext_ln134_5_fu_1046_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_4_address0 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_4_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, zext_ln134_4_fu_1024_p1, ap_block_pp0_stage1, zext_ln134_6_fu_1074_p1, zext_ln134_8_fu_1118_p1, ap_block_pp0_stage3, zext_ln134_2_fu_1184_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_4_address1 <= zext_ln134_2_fu_1184_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_4_address1 <= zext_ln134_8_fu_1118_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_4_address1 <= zext_ln134_6_fu_1074_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_4_address1 <= zext_ln134_4_fu_1024_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_4_address1 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_4_ce0 <= ap_const_logic_1;
        else 
            k3_buffer_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_4_ce1 <= ap_const_logic_1;
        else 
            k3_buffer_V_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln134_5_fu_1046_p1, zext_ln134_7_fu_1096_p1, ap_block_pp0_stage3, zext_ln134_9_fu_1140_p1, zext_ln134_1_fu_1162_p1, ap_block_pp0_stage4, zext_ln134_3_fu_1206_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_5_address0 <= zext_ln134_3_fu_1206_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            k3_buffer_V_5_address0 <= zext_ln134_1_fu_1162_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_5_address0 <= zext_ln134_9_fu_1140_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_5_address0 <= zext_ln134_7_fu_1096_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_5_address0 <= zext_ln134_5_fu_1046_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_5_address0 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_5_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, zext_ln134_4_fu_1024_p1, ap_block_pp0_stage1, zext_ln134_6_fu_1074_p1, zext_ln134_8_fu_1118_p1, ap_block_pp0_stage3, zext_ln134_2_fu_1184_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_5_address1 <= zext_ln134_2_fu_1184_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_5_address1 <= zext_ln134_8_fu_1118_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_5_address1 <= zext_ln134_6_fu_1074_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_5_address1 <= zext_ln134_4_fu_1024_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_5_address1 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_5_ce0 <= ap_const_logic_1;
        else 
            k3_buffer_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_5_ce1 <= ap_const_logic_1;
        else 
            k3_buffer_V_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln134_5_fu_1046_p1, zext_ln134_7_fu_1096_p1, ap_block_pp0_stage3, zext_ln134_9_fu_1140_p1, zext_ln134_1_fu_1162_p1, ap_block_pp0_stage4, zext_ln134_3_fu_1206_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_6_address0 <= zext_ln134_3_fu_1206_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            k3_buffer_V_6_address0 <= zext_ln134_1_fu_1162_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_6_address0 <= zext_ln134_9_fu_1140_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_6_address0 <= zext_ln134_7_fu_1096_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_6_address0 <= zext_ln134_5_fu_1046_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_6_address0 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_6_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, zext_ln134_4_fu_1024_p1, ap_block_pp0_stage1, zext_ln134_6_fu_1074_p1, zext_ln134_8_fu_1118_p1, ap_block_pp0_stage3, zext_ln134_2_fu_1184_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_6_address1 <= zext_ln134_2_fu_1184_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_6_address1 <= zext_ln134_8_fu_1118_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_6_address1 <= zext_ln134_6_fu_1074_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_6_address1 <= zext_ln134_4_fu_1024_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_6_address1 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_6_ce0 <= ap_const_logic_1;
        else 
            k3_buffer_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_6_ce1 <= ap_const_logic_1;
        else 
            k3_buffer_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_7_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln134_5_fu_1046_p1, zext_ln134_7_fu_1096_p1, ap_block_pp0_stage3, zext_ln134_9_fu_1140_p1, zext_ln134_1_fu_1162_p1, ap_block_pp0_stage4, zext_ln134_3_fu_1206_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_7_address0 <= zext_ln134_3_fu_1206_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            k3_buffer_V_7_address0 <= zext_ln134_1_fu_1162_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_7_address0 <= zext_ln134_9_fu_1140_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_7_address0 <= zext_ln134_7_fu_1096_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_7_address0 <= zext_ln134_5_fu_1046_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_7_address0 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_7_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, zext_ln134_4_fu_1024_p1, ap_block_pp0_stage1, zext_ln134_6_fu_1074_p1, zext_ln134_8_fu_1118_p1, ap_block_pp0_stage3, zext_ln134_2_fu_1184_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_7_address1 <= zext_ln134_2_fu_1184_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_7_address1 <= zext_ln134_8_fu_1118_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_7_address1 <= zext_ln134_6_fu_1074_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_7_address1 <= zext_ln134_4_fu_1024_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_7_address1 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_7_ce0 <= ap_const_logic_1;
        else 
            k3_buffer_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_7_ce1 <= ap_const_logic_1;
        else 
            k3_buffer_V_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_8_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln134_5_fu_1046_p1, zext_ln134_7_fu_1096_p1, ap_block_pp0_stage3, zext_ln134_9_fu_1140_p1, zext_ln134_1_fu_1162_p1, ap_block_pp0_stage4, zext_ln134_3_fu_1206_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_8_address0 <= zext_ln134_3_fu_1206_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            k3_buffer_V_8_address0 <= zext_ln134_1_fu_1162_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_8_address0 <= zext_ln134_9_fu_1140_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_8_address0 <= zext_ln134_7_fu_1096_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_8_address0 <= zext_ln134_5_fu_1046_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_8_address0 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_8_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, zext_ln134_4_fu_1024_p1, ap_block_pp0_stage1, zext_ln134_6_fu_1074_p1, zext_ln134_8_fu_1118_p1, ap_block_pp0_stage3, zext_ln134_2_fu_1184_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3_buffer_V_8_address1 <= zext_ln134_2_fu_1184_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            k3_buffer_V_8_address1 <= zext_ln134_8_fu_1118_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            k3_buffer_V_8_address1 <= zext_ln134_6_fu_1074_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            k3_buffer_V_8_address1 <= zext_ln134_4_fu_1024_p1(6 - 1 downto 0);
        else 
            k3_buffer_V_8_address1 <= "XXXXXX";
        end if; 
    end process;


    k3_buffer_V_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_8_ce0 <= ap_const_logic_1;
        else 
            k3_buffer_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k3_buffer_V_8_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            k3_buffer_V_8_ce1 <= ap_const_logic_1;
        else 
            k3_buffer_V_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k3s_blk_n_assign_proc : process(k3s_full_n, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2, skip3_4_reg_1443)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3s_blk_n <= k3s_full_n;
        else 
            k3s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    k3s_din <= ((((((((tmp_53_fu_1342_p11 & tmp_52_fu_1327_p11) & tmp_51_fu_1312_p11) & tmp_50_fu_1297_p11) & tmp_49_fu_1282_p11) & tmp_48_fu_1267_p11) & tmp_47_fu_1252_p11) & tmp_s_fu_1237_p11) & tmp_fu_1222_p11);

    k3s_write_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4, skip3_4_reg_1443, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (skip3_4_reg_1443 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            k3s_write <= ap_const_logic_1;
        else 
            k3s_write <= ap_const_logic_0;
        end if; 
    end process;


    mul_ln93_1_loc_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mul_ln93_1_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln93_1_loc_blk_n <= mul_ln93_1_loc_empty_n;
        else 
            mul_ln93_1_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mul_ln93_1_loc_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mul_ln93_1_loc_empty_n, ret_V_cast_loc_empty_n, skip3_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ret_V_cast_loc_empty_n = ap_const_logic_0) or (mul_ln93_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln93_1_loc_read <= ap_const_logic_1;
        else 
            mul_ln93_1_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast3_i_i_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_i_fu_921_p3),16));
    p_shl_i_i_fu_921_p3 <= (select_ln129_reg_1482 & ap_const_lv3_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    ret_V_cast_loc_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ret_V_cast_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ret_V_cast_loc_blk_n <= ret_V_cast_loc_empty_n;
        else 
            ret_V_cast_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ret_V_cast_loc_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mul_ln93_1_loc_empty_n, ret_V_cast_loc_empty_n, skip3_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ret_V_cast_loc_empty_n = ap_const_logic_0) or (mul_ln93_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ret_V_cast_loc_read <= ap_const_logic_1;
        else 
            ret_V_cast_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln129_fu_910_p3 <= 
        ap_const_lv12_0 when (icmp_ln130_fu_905_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_875_p4;

    skip3_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, skip3_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip3_blk_n <= skip3_empty_n;
        else 
            skip3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    skip3_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mul_ln93_1_loc_empty_n, ret_V_cast_loc_empty_n, skip3_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ret_V_cast_loc_empty_n = ap_const_logic_0) or (mul_ln93_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip3_read <= ap_const_logic_1;
        else 
            skip3_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_89_fu_1153_p4 <= grp_fu_1422_p2(32 downto 20);
    tmp_90_fu_1175_p4 <= grp_fu_1429_p2(32 downto 20);
    tmp_91_fu_1197_p4 <= grp_fu_1436_p2(32 downto 20);
    tmp_92_fu_1015_p4 <= grp_fu_1380_p2(32 downto 20);
    tmp_93_fu_1037_p4 <= grp_fu_1387_p2(32 downto 20);
    tmp_94_fu_1065_p4 <= grp_fu_1394_p2(32 downto 20);
    tmp_95_fu_1087_p4 <= grp_fu_1401_p2(32 downto 20);
    tmp_96_fu_1109_p4 <= grp_fu_1408_p2(32 downto 20);
    tmp_97_fu_1131_p4 <= grp_fu_1415_p2(32 downto 20);
    zext_ln130_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln129_reg_1482),16));
    zext_ln134_1_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_1153_p4),64));
    zext_ln134_2_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_1175_p4),64));
    zext_ln134_3_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_1197_p4),64));
    zext_ln134_4_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_1015_p4),64));
    zext_ln134_5_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_1037_p4),64));
    zext_ln134_6_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_fu_1065_p4),64));
    zext_ln134_7_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_1087_p4),64));
    zext_ln134_8_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_1109_p4),64));
    zext_ln134_9_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_fu_1131_p4),64));
    zext_ln134_fu_1219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(urem_ln134_reg_2283),64));
end behav;
