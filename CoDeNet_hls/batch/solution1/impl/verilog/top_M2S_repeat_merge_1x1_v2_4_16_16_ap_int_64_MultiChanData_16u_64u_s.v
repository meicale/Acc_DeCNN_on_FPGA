// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_M2S_repeat_merge_1x1_v2_4_16_16_ap_int_64_MultiChanData_16u_64u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        k1_din,
        k1_full_n,
        k1_write,
        k1_buffer_V_0_address0,
        k1_buffer_V_0_ce0,
        k1_buffer_V_0_q0,
        k1_buffer_V_1_address0,
        k1_buffer_V_1_ce0,
        k1_buffer_V_1_q0,
        k1_buffer_V_2_address0,
        k1_buffer_V_2_ce0,
        k1_buffer_V_2_q0,
        k1_buffer_V_3_address0,
        k1_buffer_V_3_ce0,
        k1_buffer_V_3_q0,
        k1_buffer_V_4_address0,
        k1_buffer_V_4_ce0,
        k1_buffer_V_4_q0,
        k1_buffer_V_5_address0,
        k1_buffer_V_5_ce0,
        k1_buffer_V_5_q0,
        k1_buffer_V_6_address0,
        k1_buffer_V_6_ce0,
        k1_buffer_V_6_q0,
        k1_buffer_V_7_address0,
        k1_buffer_V_7_ce0,
        k1_buffer_V_7_q0,
        k1_buffer_V_8_address0,
        k1_buffer_V_8_ce0,
        k1_buffer_V_8_q0,
        k1_buffer_V_9_address0,
        k1_buffer_V_9_ce0,
        k1_buffer_V_9_q0,
        k1_buffer_V_10_address0,
        k1_buffer_V_10_ce0,
        k1_buffer_V_10_q0,
        k1_buffer_V_11_address0,
        k1_buffer_V_11_ce0,
        k1_buffer_V_11_q0,
        k1_buffer_V_12_address0,
        k1_buffer_V_12_ce0,
        k1_buffer_V_12_q0,
        k1_buffer_V_13_address0,
        k1_buffer_V_13_ce0,
        k1_buffer_V_13_q0,
        k1_buffer_V_14_address0,
        k1_buffer_V_14_ce0,
        k1_buffer_V_14_q0,
        k1_buffer_V_15_address0,
        k1_buffer_V_15_ce0,
        k1_buffer_V_15_q0,
        mul_ln31_1_loc_dout,
        mul_ln31_1_loc_empty_n,
        mul_ln31_1_loc_read,
        p_read,
        skip1_dout,
        skip1_empty_n,
        skip1_read,
        mul_ln31_1_loc_out_din,
        mul_ln31_1_loc_out_full_n,
        mul_ln31_1_loc_out_write,
        skip1_out_din,
        skip1_out_full_n,
        skip1_out_write
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_pp0_stage0 = 9'd64;
parameter    ap_ST_fsm_pp0_stage1 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [1023:0] k1_din;
input   k1_full_n;
output   k1_write;
output  [10:0] k1_buffer_V_0_address0;
output   k1_buffer_V_0_ce0;
input  [63:0] k1_buffer_V_0_q0;
output  [10:0] k1_buffer_V_1_address0;
output   k1_buffer_V_1_ce0;
input  [63:0] k1_buffer_V_1_q0;
output  [10:0] k1_buffer_V_2_address0;
output   k1_buffer_V_2_ce0;
input  [63:0] k1_buffer_V_2_q0;
output  [10:0] k1_buffer_V_3_address0;
output   k1_buffer_V_3_ce0;
input  [63:0] k1_buffer_V_3_q0;
output  [10:0] k1_buffer_V_4_address0;
output   k1_buffer_V_4_ce0;
input  [63:0] k1_buffer_V_4_q0;
output  [10:0] k1_buffer_V_5_address0;
output   k1_buffer_V_5_ce0;
input  [63:0] k1_buffer_V_5_q0;
output  [10:0] k1_buffer_V_6_address0;
output   k1_buffer_V_6_ce0;
input  [63:0] k1_buffer_V_6_q0;
output  [10:0] k1_buffer_V_7_address0;
output   k1_buffer_V_7_ce0;
input  [63:0] k1_buffer_V_7_q0;
output  [10:0] k1_buffer_V_8_address0;
output   k1_buffer_V_8_ce0;
input  [63:0] k1_buffer_V_8_q0;
output  [10:0] k1_buffer_V_9_address0;
output   k1_buffer_V_9_ce0;
input  [63:0] k1_buffer_V_9_q0;
output  [10:0] k1_buffer_V_10_address0;
output   k1_buffer_V_10_ce0;
input  [63:0] k1_buffer_V_10_q0;
output  [10:0] k1_buffer_V_11_address0;
output   k1_buffer_V_11_ce0;
input  [63:0] k1_buffer_V_11_q0;
output  [10:0] k1_buffer_V_12_address0;
output   k1_buffer_V_12_ce0;
input  [63:0] k1_buffer_V_12_q0;
output  [10:0] k1_buffer_V_13_address0;
output   k1_buffer_V_13_ce0;
input  [63:0] k1_buffer_V_13_q0;
output  [10:0] k1_buffer_V_14_address0;
output   k1_buffer_V_14_ce0;
input  [63:0] k1_buffer_V_14_q0;
output  [10:0] k1_buffer_V_15_address0;
output   k1_buffer_V_15_ce0;
input  [63:0] k1_buffer_V_15_q0;
input  [31:0] mul_ln31_1_loc_dout;
input   mul_ln31_1_loc_empty_n;
output   mul_ln31_1_loc_read;
input  [23:0] p_read;
input  [0:0] skip1_dout;
input   skip1_empty_n;
output   skip1_read;
output  [31:0] mul_ln31_1_loc_out_din;
input   mul_ln31_1_loc_out_full_n;
output   mul_ln31_1_loc_out_write;
output  [0:0] skip1_out_din;
input   skip1_out_full_n;
output   skip1_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg k1_write;
reg k1_buffer_V_0_ce0;
reg k1_buffer_V_1_ce0;
reg k1_buffer_V_2_ce0;
reg k1_buffer_V_3_ce0;
reg k1_buffer_V_4_ce0;
reg k1_buffer_V_5_ce0;
reg k1_buffer_V_6_ce0;
reg k1_buffer_V_7_ce0;
reg k1_buffer_V_8_ce0;
reg k1_buffer_V_9_ce0;
reg k1_buffer_V_10_ce0;
reg k1_buffer_V_11_ce0;
reg k1_buffer_V_12_ce0;
reg k1_buffer_V_13_ce0;
reg k1_buffer_V_14_ce0;
reg k1_buffer_V_15_ce0;
reg mul_ln31_1_loc_read;
reg skip1_read;
reg mul_ln31_1_loc_out_write;
reg skip1_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    k1_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln110_reg_1099;
reg   [0:0] icmp_ln110_reg_1099_pp0_iter1_reg;
reg    mul_ln31_1_loc_blk_n;
reg    skip1_blk_n;
reg    mul_ln31_1_loc_out_blk_n;
reg    skip1_out_blk_n;
reg   [55:0] indvar_flatten_reg_349;
reg   [23:0] i_reg_360;
wire   [31:0] REP_fu_371_p3;
reg   [31:0] REP_reg_1069;
wire    ap_CS_fsm_state2;
wire   [55:0] grp_fu_386_p2;
reg   [55:0] bound_reg_1089;
wire    ap_CS_fsm_state6;
wire   [55:0] add_ln110_fu_392_p2;
reg   [55:0] add_ln110_reg_1094;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln110_fu_398_p2;
wire   [23:0] select_ln110_fu_408_p3;
reg   [23:0] select_ln110_reg_1103;
wire    ap_block_state8_pp0_stage1_iter0;
reg    ap_block_state10_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [23:0] add_ln111_fu_435_p2;
reg   [23:0] add_ln111_reg_1189;
reg   [63:0] k1_buffer_V_0_load_reg_1194;
reg   [63:0] k1_buffer_V_1_load_reg_1199;
reg   [63:0] k1_buffer_V_2_load_reg_1204;
reg   [63:0] k1_buffer_V_3_load_reg_1209;
reg   [63:0] k1_buffer_V_4_load_reg_1214;
reg   [63:0] k1_buffer_V_5_load_reg_1219;
reg   [63:0] k1_buffer_V_6_load_reg_1224;
reg   [63:0] k1_buffer_V_7_load_reg_1229;
reg   [63:0] k1_buffer_V_8_load_reg_1234;
reg   [63:0] k1_buffer_V_9_load_reg_1239;
reg   [63:0] k1_buffer_V_10_load_reg_1244;
reg   [63:0] k1_buffer_V_11_load_reg_1249;
reg   [63:0] k1_buffer_V_12_load_reg_1254;
reg   [63:0] k1_buffer_V_13_load_reg_1259;
reg   [63:0] k1_buffer_V_14_load_reg_1264;
reg   [63:0] k1_buffer_V_15_load_reg_1269;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_block_pp0_stage1_subdone;
reg   [55:0] ap_phi_mux_indvar_flatten_phi_fu_353_p4;
wire    ap_block_pp0_stage0;
reg   [23:0] ap_phi_mux_i_phi_fu_364_p4;
wire   [63:0] zext_ln114_fu_416_p1;
reg    ap_block_state1;
reg    ap_block_pp0_stage1_01001;
wire   [31:0] grp_fu_386_p0;
wire   [23:0] grp_fu_386_p1;
wire   [0:0] icmp_ln111_fu_403_p2;
wire   [63:0] tmp_67_fu_995_p18;
wire   [63:0] tmp_66_fu_958_p18;
wire   [63:0] tmp_65_fu_921_p18;
wire   [63:0] tmp_64_fu_884_p18;
wire   [63:0] tmp_63_fu_847_p18;
wire   [63:0] tmp_62_fu_810_p18;
wire   [63:0] tmp_61_fu_773_p18;
wire   [63:0] tmp_60_fu_736_p18;
wire   [63:0] tmp_59_fu_699_p18;
wire   [63:0] tmp_58_fu_662_p18;
wire   [63:0] tmp_57_fu_625_p18;
wire   [63:0] tmp_56_fu_588_p18;
wire   [63:0] tmp_55_fu_551_p18;
wire   [63:0] tmp_54_fu_514_p18;
wire   [63:0] tmp_s_fu_477_p18;
wire   [63:0] tmp_fu_440_p18;
wire    ap_CS_fsm_state11;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [55:0] grp_fu_386_p00;
wire   [55:0] grp_fu_386_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

top_mul_32ns_24ns_56_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 56 ))
mul_32ns_24ns_56_5_1_U219(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_386_p0),
    .din1(grp_fu_386_p1),
    .ce(1'b1),
    .dout(grp_fu_386_p2)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U220(
    .din0(k1_buffer_V_0_load_reg_1194),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_fu_440_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U221(
    .din0(k1_buffer_V_1_load_reg_1199),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_s_fu_477_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U222(
    .din0(k1_buffer_V_2_load_reg_1204),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_54_fu_514_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U223(
    .din0(k1_buffer_V_3_load_reg_1209),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_55_fu_551_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U224(
    .din0(k1_buffer_V_4_load_reg_1214),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_56_fu_588_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U225(
    .din0(k1_buffer_V_5_load_reg_1219),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_57_fu_625_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U226(
    .din0(k1_buffer_V_6_load_reg_1224),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_58_fu_662_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U227(
    .din0(k1_buffer_V_7_load_reg_1229),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_59_fu_699_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U228(
    .din0(k1_buffer_V_8_load_reg_1234),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_60_fu_736_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U229(
    .din0(k1_buffer_V_9_load_reg_1239),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_61_fu_773_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U230(
    .din0(k1_buffer_V_10_load_reg_1244),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_62_fu_810_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U231(
    .din0(k1_buffer_V_11_load_reg_1249),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_63_fu_847_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U232(
    .din0(k1_buffer_V_12_load_reg_1254),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_64_fu_884_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U233(
    .din0(k1_buffer_V_13_load_reg_1259),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_65_fu_921_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U234(
    .din0(k1_buffer_V_14_load_reg_1264),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_66_fu_958_p18)
);

top_mux_1664_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mux_1664_64_1_1_U235(
    .din0(k1_buffer_V_15_load_reg_1269),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(64'd0),
    .din6(64'd0),
    .din7(64'd0),
    .din8(64'd0),
    .din9(64'd0),
    .din10(64'd0),
    .din11(64'd0),
    .din12(64'd0),
    .din13(64'd0),
    .din14(64'd0),
    .din15(64'd0),
    .din16(64'd0),
    .dout(tmp_67_fu_995_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln110_reg_1099 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_360 <= add_ln111_reg_1189;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_360 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln110_reg_1099 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_349 <= add_ln110_reg_1094;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_349 <= 56'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        REP_reg_1069 <= REP_fu_371_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln110_reg_1094 <= add_ln110_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln110_reg_1099 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln111_reg_1189 <= add_ln111_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bound_reg_1089 <= grp_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln110_reg_1099 <= icmp_ln110_fu_398_p2;
        icmp_ln110_reg_1099_pp0_iter1_reg <= icmp_ln110_reg_1099;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln110_reg_1099 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_0_load_reg_1194 <= k1_buffer_V_0_q0;
        k1_buffer_V_10_load_reg_1244 <= k1_buffer_V_10_q0;
        k1_buffer_V_11_load_reg_1249 <= k1_buffer_V_11_q0;
        k1_buffer_V_12_load_reg_1254 <= k1_buffer_V_12_q0;
        k1_buffer_V_13_load_reg_1259 <= k1_buffer_V_13_q0;
        k1_buffer_V_14_load_reg_1264 <= k1_buffer_V_14_q0;
        k1_buffer_V_15_load_reg_1269 <= k1_buffer_V_15_q0;
        k1_buffer_V_1_load_reg_1199 <= k1_buffer_V_1_q0;
        k1_buffer_V_2_load_reg_1204 <= k1_buffer_V_2_q0;
        k1_buffer_V_3_load_reg_1209 <= k1_buffer_V_3_q0;
        k1_buffer_V_4_load_reg_1214 <= k1_buffer_V_4_q0;
        k1_buffer_V_5_load_reg_1219 <= k1_buffer_V_5_q0;
        k1_buffer_V_6_load_reg_1224 <= k1_buffer_V_6_q0;
        k1_buffer_V_7_load_reg_1229 <= k1_buffer_V_7_q0;
        k1_buffer_V_8_load_reg_1234 <= k1_buffer_V_8_q0;
        k1_buffer_V_9_load_reg_1239 <= k1_buffer_V_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_398_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln110_reg_1103 <= select_ln110_fu_408_p3;
    end
end

always @ (*) begin
    if ((icmp_ln110_fu_398_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln110_reg_1099 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_364_p4 = add_ln111_reg_1189;
    end else begin
        ap_phi_mux_i_phi_fu_364_p4 = i_reg_360;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln110_reg_1099 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_353_p4 = add_ln110_reg_1094;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_353_p4 = indvar_flatten_reg_349;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln110_reg_1099_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        k1_blk_n = k1_full_n;
    end else begin
        k1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_0_ce0 = 1'b1;
    end else begin
        k1_buffer_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_10_ce0 = 1'b1;
    end else begin
        k1_buffer_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_11_ce0 = 1'b1;
    end else begin
        k1_buffer_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_12_ce0 = 1'b1;
    end else begin
        k1_buffer_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_13_ce0 = 1'b1;
    end else begin
        k1_buffer_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_14_ce0 = 1'b1;
    end else begin
        k1_buffer_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_15_ce0 = 1'b1;
    end else begin
        k1_buffer_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_1_ce0 = 1'b1;
    end else begin
        k1_buffer_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_2_ce0 = 1'b1;
    end else begin
        k1_buffer_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_3_ce0 = 1'b1;
    end else begin
        k1_buffer_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_4_ce0 = 1'b1;
    end else begin
        k1_buffer_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_5_ce0 = 1'b1;
    end else begin
        k1_buffer_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_6_ce0 = 1'b1;
    end else begin
        k1_buffer_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_7_ce0 = 1'b1;
    end else begin
        k1_buffer_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_8_ce0 = 1'b1;
    end else begin
        k1_buffer_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        k1_buffer_V_9_ce0 = 1'b1;
    end else begin
        k1_buffer_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln110_reg_1099_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        k1_write = 1'b1;
    end else begin
        k1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln31_1_loc_blk_n = mul_ln31_1_loc_empty_n;
    end else begin
        mul_ln31_1_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln31_1_loc_out_blk_n = mul_ln31_1_loc_out_full_n;
    end else begin
        mul_ln31_1_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out_full_n == 1'b0) | (mul_ln31_1_loc_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (mul_ln31_1_loc_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln31_1_loc_out_write = 1'b1;
    end else begin
        mul_ln31_1_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out_full_n == 1'b0) | (mul_ln31_1_loc_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (mul_ln31_1_loc_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln31_1_loc_read = 1'b1;
    end else begin
        mul_ln31_1_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_blk_n = skip1_empty_n;
    end else begin
        skip1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_out_blk_n = skip1_out_full_n;
    end else begin
        skip1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out_full_n == 1'b0) | (mul_ln31_1_loc_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (mul_ln31_1_loc_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_out_write = 1'b1;
    end else begin
        skip1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out_full_n == 1'b0) | (mul_ln31_1_loc_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (mul_ln31_1_loc_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_read = 1'b1;
    end else begin
        skip1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out_full_n == 1'b0) | (mul_ln31_1_loc_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (mul_ln31_1_loc_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln110_fu_398_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln110_fu_398_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign REP_fu_371_p3 = ((skip1_dout[0:0] == 1'b1) ? 32'd0 : mul_ln31_1_loc_dout);

assign add_ln110_fu_392_p2 = (ap_phi_mux_indvar_flatten_phi_fu_353_p4 + 56'd1);

assign add_ln111_fu_435_p2 = (select_ln110_reg_1103 + 24'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((k1_full_n == 1'b0) & (icmp_ln110_reg_1099_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((k1_full_n == 1'b0) & (icmp_ln110_reg_1099_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((k1_full_n == 1'b0) & (icmp_ln110_reg_1099_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out_full_n == 1'b0) | (mul_ln31_1_loc_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (mul_ln31_1_loc_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter1 = ((k1_full_n == 1'b0) & (icmp_ln110_reg_1099_pp0_iter1_reg == 1'd0));
end

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_386_p0 = grp_fu_386_p00;

assign grp_fu_386_p00 = REP_reg_1069;

assign grp_fu_386_p1 = grp_fu_386_p10;

assign grp_fu_386_p10 = p_read;

assign icmp_ln110_fu_398_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_353_p4 == bound_reg_1089) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_403_p2 = ((ap_phi_mux_i_phi_fu_364_p4 == p_read) ? 1'b1 : 1'b0);

assign k1_buffer_V_0_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_10_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_11_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_12_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_13_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_14_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_15_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_1_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_2_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_3_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_4_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_5_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_6_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_7_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_8_address0 = zext_ln114_fu_416_p1;

assign k1_buffer_V_9_address0 = zext_ln114_fu_416_p1;

assign k1_din = {{{{{{{{{{{{{{{{tmp_67_fu_995_p18}, {tmp_66_fu_958_p18}}, {tmp_65_fu_921_p18}}, {tmp_64_fu_884_p18}}, {tmp_63_fu_847_p18}}, {tmp_62_fu_810_p18}}, {tmp_61_fu_773_p18}}, {tmp_60_fu_736_p18}}, {tmp_59_fu_699_p18}}, {tmp_58_fu_662_p18}}, {tmp_57_fu_625_p18}}, {tmp_56_fu_588_p18}}, {tmp_55_fu_551_p18}}, {tmp_54_fu_514_p18}}, {tmp_s_fu_477_p18}}, {tmp_fu_440_p18}};

assign mul_ln31_1_loc_out_din = mul_ln31_1_loc_dout;

assign select_ln110_fu_408_p3 = ((icmp_ln111_fu_403_p2[0:0] == 1'b1) ? 24'd0 : ap_phi_mux_i_phi_fu_364_p4);

assign skip1_out_din = skip1_dout;

assign zext_ln114_fu_416_p1 = select_ln110_reg_1103;

endmodule //top_M2S_repeat_merge_1x1_v2_4_16_16_ap_int_64_MultiChanData_16u_64u_s
