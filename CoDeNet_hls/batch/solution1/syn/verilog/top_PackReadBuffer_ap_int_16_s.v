// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_PackReadBuffer_ap_int_16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem4_AWVALID,
        m_axi_gmem4_AWREADY,
        m_axi_gmem4_AWADDR,
        m_axi_gmem4_AWID,
        m_axi_gmem4_AWLEN,
        m_axi_gmem4_AWSIZE,
        m_axi_gmem4_AWBURST,
        m_axi_gmem4_AWLOCK,
        m_axi_gmem4_AWCACHE,
        m_axi_gmem4_AWPROT,
        m_axi_gmem4_AWQOS,
        m_axi_gmem4_AWREGION,
        m_axi_gmem4_AWUSER,
        m_axi_gmem4_WVALID,
        m_axi_gmem4_WREADY,
        m_axi_gmem4_WDATA,
        m_axi_gmem4_WSTRB,
        m_axi_gmem4_WLAST,
        m_axi_gmem4_WID,
        m_axi_gmem4_WUSER,
        m_axi_gmem4_ARVALID,
        m_axi_gmem4_ARREADY,
        m_axi_gmem4_ARADDR,
        m_axi_gmem4_ARID,
        m_axi_gmem4_ARLEN,
        m_axi_gmem4_ARSIZE,
        m_axi_gmem4_ARBURST,
        m_axi_gmem4_ARLOCK,
        m_axi_gmem4_ARCACHE,
        m_axi_gmem4_ARPROT,
        m_axi_gmem4_ARQOS,
        m_axi_gmem4_ARREGION,
        m_axi_gmem4_ARUSER,
        m_axi_gmem4_RVALID,
        m_axi_gmem4_RREADY,
        m_axi_gmem4_RDATA,
        m_axi_gmem4_RLAST,
        m_axi_gmem4_RID,
        m_axi_gmem4_RUSER,
        m_axi_gmem4_RRESP,
        m_axi_gmem4_BVALID,
        m_axi_gmem4_BREADY,
        m_axi_gmem4_BRESP,
        m_axi_gmem4_BID,
        m_axi_gmem4_BUSER,
        mem_dout,
        mem_empty_n,
        mem_read,
        scale1_address0,
        scale1_ce0,
        scale1_we0,
        scale1_d0,
        scale11_address0,
        scale11_ce0,
        scale11_we0,
        scale11_d0,
        scale12_address0,
        scale12_ce0,
        scale12_we0,
        scale12_d0,
        scale13_address0,
        scale13_ce0,
        scale13_we0,
        scale13_d0,
        scale14_address0,
        scale14_ce0,
        scale14_we0,
        scale14_d0,
        scale15_address0,
        scale15_ce0,
        scale15_we0,
        scale15_d0,
        scale16_address0,
        scale16_ce0,
        scale16_we0,
        scale16_d0,
        scale17_address0,
        scale17_ce0,
        scale17_we0,
        scale17_d0,
        bias1_address0,
        bias1_ce0,
        bias1_we0,
        bias1_d0,
        bias18_address0,
        bias18_ce0,
        bias18_we0,
        bias18_d0,
        bias19_address0,
        bias19_ce0,
        bias19_we0,
        bias19_d0,
        bias110_address0,
        bias110_ce0,
        bias110_we0,
        bias110_d0,
        bias111_address0,
        bias111_ce0,
        bias111_we0,
        bias111_d0,
        bias112_address0,
        bias112_ce0,
        bias112_we0,
        bias112_d0,
        bias113_address0,
        bias113_ce0,
        bias113_we0,
        bias113_d0,
        bias114_address0,
        bias114_ce0,
        bias114_we0,
        bias114_d0,
        scale3_address0,
        scale3_ce0,
        scale3_we0,
        scale3_d0,
        scale315_address0,
        scale315_ce0,
        scale315_we0,
        scale315_d0,
        scale316_address0,
        scale316_ce0,
        scale316_we0,
        scale316_d0,
        scale317_address0,
        scale317_ce0,
        scale317_we0,
        scale317_d0,
        scale318_address0,
        scale318_ce0,
        scale318_we0,
        scale318_d0,
        scale319_address0,
        scale319_ce0,
        scale319_we0,
        scale319_d0,
        scale320_address0,
        scale320_ce0,
        scale320_we0,
        scale320_d0,
        scale321_address0,
        scale321_ce0,
        scale321_we0,
        scale321_d0,
        bias3_address0,
        bias3_ce0,
        bias3_we0,
        bias3_d0,
        bias322_address0,
        bias322_ce0,
        bias322_we0,
        bias322_d0,
        bias323_address0,
        bias323_ce0,
        bias323_we0,
        bias323_d0,
        bias324_address0,
        bias324_ce0,
        bias324_we0,
        bias324_d0,
        bias325_address0,
        bias325_ce0,
        bias325_we0,
        bias325_d0,
        bias326_address0,
        bias326_ce0,
        bias326_we0,
        bias326_d0,
        bias327_address0,
        bias327_ce0,
        bias327_we0,
        bias327_d0,
        bias328_address0,
        bias328_ce0,
        bias328_we0,
        bias328_d0,
        OC_dout,
        OC_empty_n,
        OC_read,
        skip3_dout,
        skip3_empty_n,
        skip3_read,
        skip1_dout,
        skip1_empty_n,
        skip1_read,
        skip1_out_din,
        skip1_out_full_n,
        skip1_out_write,
        skip1_out1_din,
        skip1_out1_full_n,
        skip1_out1_write
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_pp0_stage0 = 39'd512;
parameter    ap_ST_fsm_state13 = 39'd1024;
parameter    ap_ST_fsm_state14 = 39'd2048;
parameter    ap_ST_fsm_state15 = 39'd4096;
parameter    ap_ST_fsm_state16 = 39'd8192;
parameter    ap_ST_fsm_state17 = 39'd16384;
parameter    ap_ST_fsm_state18 = 39'd32768;
parameter    ap_ST_fsm_state19 = 39'd65536;
parameter    ap_ST_fsm_state20 = 39'd131072;
parameter    ap_ST_fsm_pp1_stage0 = 39'd262144;
parameter    ap_ST_fsm_state24 = 39'd524288;
parameter    ap_ST_fsm_state25 = 39'd1048576;
parameter    ap_ST_fsm_state26 = 39'd2097152;
parameter    ap_ST_fsm_state27 = 39'd4194304;
parameter    ap_ST_fsm_state28 = 39'd8388608;
parameter    ap_ST_fsm_state29 = 39'd16777216;
parameter    ap_ST_fsm_state30 = 39'd33554432;
parameter    ap_ST_fsm_state31 = 39'd67108864;
parameter    ap_ST_fsm_pp2_stage0 = 39'd134217728;
parameter    ap_ST_fsm_state35 = 39'd268435456;
parameter    ap_ST_fsm_state36 = 39'd536870912;
parameter    ap_ST_fsm_state37 = 39'd1073741824;
parameter    ap_ST_fsm_state38 = 39'd2147483648;
parameter    ap_ST_fsm_state39 = 39'd4294967296;
parameter    ap_ST_fsm_state40 = 39'd8589934592;
parameter    ap_ST_fsm_state41 = 39'd17179869184;
parameter    ap_ST_fsm_state42 = 39'd34359738368;
parameter    ap_ST_fsm_state43 = 39'd68719476736;
parameter    ap_ST_fsm_pp3_stage0 = 39'd137438953472;
parameter    ap_ST_fsm_state47 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem4_AWVALID;
input   m_axi_gmem4_AWREADY;
output  [63:0] m_axi_gmem4_AWADDR;
output  [0:0] m_axi_gmem4_AWID;
output  [31:0] m_axi_gmem4_AWLEN;
output  [2:0] m_axi_gmem4_AWSIZE;
output  [1:0] m_axi_gmem4_AWBURST;
output  [1:0] m_axi_gmem4_AWLOCK;
output  [3:0] m_axi_gmem4_AWCACHE;
output  [2:0] m_axi_gmem4_AWPROT;
output  [3:0] m_axi_gmem4_AWQOS;
output  [3:0] m_axi_gmem4_AWREGION;
output  [0:0] m_axi_gmem4_AWUSER;
output   m_axi_gmem4_WVALID;
input   m_axi_gmem4_WREADY;
output  [15:0] m_axi_gmem4_WDATA;
output  [1:0] m_axi_gmem4_WSTRB;
output   m_axi_gmem4_WLAST;
output  [0:0] m_axi_gmem4_WID;
output  [0:0] m_axi_gmem4_WUSER;
output   m_axi_gmem4_ARVALID;
input   m_axi_gmem4_ARREADY;
output  [63:0] m_axi_gmem4_ARADDR;
output  [0:0] m_axi_gmem4_ARID;
output  [31:0] m_axi_gmem4_ARLEN;
output  [2:0] m_axi_gmem4_ARSIZE;
output  [1:0] m_axi_gmem4_ARBURST;
output  [1:0] m_axi_gmem4_ARLOCK;
output  [3:0] m_axi_gmem4_ARCACHE;
output  [2:0] m_axi_gmem4_ARPROT;
output  [3:0] m_axi_gmem4_ARQOS;
output  [3:0] m_axi_gmem4_ARREGION;
output  [0:0] m_axi_gmem4_ARUSER;
input   m_axi_gmem4_RVALID;
output   m_axi_gmem4_RREADY;
input  [15:0] m_axi_gmem4_RDATA;
input   m_axi_gmem4_RLAST;
input  [0:0] m_axi_gmem4_RID;
input  [0:0] m_axi_gmem4_RUSER;
input  [1:0] m_axi_gmem4_RRESP;
input   m_axi_gmem4_BVALID;
output   m_axi_gmem4_BREADY;
input  [1:0] m_axi_gmem4_BRESP;
input  [0:0] m_axi_gmem4_BID;
input  [0:0] m_axi_gmem4_BUSER;
input  [63:0] mem_dout;
input   mem_empty_n;
output   mem_read;
output  [6:0] scale1_address0;
output   scale1_ce0;
output   scale1_we0;
output  [15:0] scale1_d0;
output  [6:0] scale11_address0;
output   scale11_ce0;
output   scale11_we0;
output  [15:0] scale11_d0;
output  [6:0] scale12_address0;
output   scale12_ce0;
output   scale12_we0;
output  [15:0] scale12_d0;
output  [6:0] scale13_address0;
output   scale13_ce0;
output   scale13_we0;
output  [15:0] scale13_d0;
output  [6:0] scale14_address0;
output   scale14_ce0;
output   scale14_we0;
output  [15:0] scale14_d0;
output  [6:0] scale15_address0;
output   scale15_ce0;
output   scale15_we0;
output  [15:0] scale15_d0;
output  [6:0] scale16_address0;
output   scale16_ce0;
output   scale16_we0;
output  [15:0] scale16_d0;
output  [6:0] scale17_address0;
output   scale17_ce0;
output   scale17_we0;
output  [15:0] scale17_d0;
output  [6:0] bias1_address0;
output   bias1_ce0;
output   bias1_we0;
output  [15:0] bias1_d0;
output  [6:0] bias18_address0;
output   bias18_ce0;
output   bias18_we0;
output  [15:0] bias18_d0;
output  [6:0] bias19_address0;
output   bias19_ce0;
output   bias19_we0;
output  [15:0] bias19_d0;
output  [6:0] bias110_address0;
output   bias110_ce0;
output   bias110_we0;
output  [15:0] bias110_d0;
output  [6:0] bias111_address0;
output   bias111_ce0;
output   bias111_we0;
output  [15:0] bias111_d0;
output  [6:0] bias112_address0;
output   bias112_ce0;
output   bias112_we0;
output  [15:0] bias112_d0;
output  [6:0] bias113_address0;
output   bias113_ce0;
output   bias113_we0;
output  [15:0] bias113_d0;
output  [6:0] bias114_address0;
output   bias114_ce0;
output   bias114_we0;
output  [15:0] bias114_d0;
output  [6:0] scale3_address0;
output   scale3_ce0;
output   scale3_we0;
output  [15:0] scale3_d0;
output  [6:0] scale315_address0;
output   scale315_ce0;
output   scale315_we0;
output  [15:0] scale315_d0;
output  [6:0] scale316_address0;
output   scale316_ce0;
output   scale316_we0;
output  [15:0] scale316_d0;
output  [6:0] scale317_address0;
output   scale317_ce0;
output   scale317_we0;
output  [15:0] scale317_d0;
output  [6:0] scale318_address0;
output   scale318_ce0;
output   scale318_we0;
output  [15:0] scale318_d0;
output  [6:0] scale319_address0;
output   scale319_ce0;
output   scale319_we0;
output  [15:0] scale319_d0;
output  [6:0] scale320_address0;
output   scale320_ce0;
output   scale320_we0;
output  [15:0] scale320_d0;
output  [6:0] scale321_address0;
output   scale321_ce0;
output   scale321_we0;
output  [15:0] scale321_d0;
output  [6:0] bias3_address0;
output   bias3_ce0;
output   bias3_we0;
output  [15:0] bias3_d0;
output  [6:0] bias322_address0;
output   bias322_ce0;
output   bias322_we0;
output  [15:0] bias322_d0;
output  [6:0] bias323_address0;
output   bias323_ce0;
output   bias323_we0;
output  [15:0] bias323_d0;
output  [6:0] bias324_address0;
output   bias324_ce0;
output   bias324_we0;
output  [15:0] bias324_d0;
output  [6:0] bias325_address0;
output   bias325_ce0;
output   bias325_we0;
output  [15:0] bias325_d0;
output  [6:0] bias326_address0;
output   bias326_ce0;
output   bias326_we0;
output  [15:0] bias326_d0;
output  [6:0] bias327_address0;
output   bias327_ce0;
output   bias327_we0;
output  [15:0] bias327_d0;
output  [6:0] bias328_address0;
output   bias328_ce0;
output   bias328_we0;
output  [15:0] bias328_d0;
input  [31:0] OC_dout;
input   OC_empty_n;
output   OC_read;
input  [0:0] skip3_dout;
input   skip3_empty_n;
output   skip3_read;
input  [0:0] skip1_dout;
input   skip1_empty_n;
output   skip1_read;
output  [0:0] skip1_out_din;
input   skip1_out_full_n;
output   skip1_out_write;
output  [0:0] skip1_out1_din;
input   skip1_out1_full_n;
output   skip1_out1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem4_ARVALID;
reg[63:0] m_axi_gmem4_ARADDR;
reg[31:0] m_axi_gmem4_ARLEN;
reg m_axi_gmem4_RREADY;
reg mem_read;
reg scale1_ce0;
reg scale1_we0;
reg scale11_ce0;
reg scale11_we0;
reg scale12_ce0;
reg scale12_we0;
reg scale13_ce0;
reg scale13_we0;
reg scale14_ce0;
reg scale14_we0;
reg scale15_ce0;
reg scale15_we0;
reg scale16_ce0;
reg scale16_we0;
reg scale17_ce0;
reg scale17_we0;
reg bias1_ce0;
reg bias1_we0;
reg bias18_ce0;
reg bias18_we0;
reg bias19_ce0;
reg bias19_we0;
reg bias110_ce0;
reg bias110_we0;
reg bias111_ce0;
reg bias111_we0;
reg bias112_ce0;
reg bias112_we0;
reg bias113_ce0;
reg bias113_we0;
reg bias114_ce0;
reg bias114_we0;
reg scale3_ce0;
reg scale3_we0;
reg scale315_ce0;
reg scale315_we0;
reg scale316_ce0;
reg scale316_we0;
reg scale317_ce0;
reg scale317_we0;
reg scale318_ce0;
reg scale318_we0;
reg scale319_ce0;
reg scale319_we0;
reg scale320_ce0;
reg scale320_we0;
reg scale321_ce0;
reg scale321_we0;
reg bias3_ce0;
reg bias3_we0;
reg bias322_ce0;
reg bias322_we0;
reg bias323_ce0;
reg bias323_we0;
reg bias324_ce0;
reg bias324_we0;
reg bias325_ce0;
reg bias325_we0;
reg bias326_ce0;
reg bias326_we0;
reg bias327_ce0;
reg bias327_we0;
reg bias328_ce0;
reg bias328_we0;
reg OC_read;
reg skip3_read;
reg skip1_read;
reg skip1_out_write;
reg skip1_out1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem4_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem4_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg    mem_blk_n;
reg    OC_blk_n;
reg    skip3_blk_n;
reg    skip1_blk_n;
reg    skip1_out_blk_n;
reg    skip1_out1_blk_n;
reg   [30:0] count_4_reg_668;
reg   [30:0] i_1_reg_679;
reg   [30:0] i_2_reg_702;
reg   [30:0] i_3_reg_713;
reg   [63:0] mem_1_reg_1029;
reg   [31:0] OC_1_reg_1037;
reg   [0:0] skip3_3_reg_1043;
reg   [0:0] skip1_2_reg_1048;
wire   [31:0] rep3_fu_724_p3;
reg   [31:0] rep3_reg_1053;
wire    ap_CS_fsm_state2;
wire   [31:0] rep1_fu_730_p3;
reg   [31:0] rep1_reg_1062;
wire   [0:0] icmp_ln10_fu_736_p2;
reg   [0:0] icmp_ln10_reg_1070;
wire   [30:0] trunc_ln10_2_fu_762_p1;
reg   [30:0] trunc_ln10_2_reg_1080;
wire    ap_CS_fsm_state9;
wire   [30:0] add_ln12_fu_765_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln10_1_fu_771_p2;
wire   [2:0] trunc_ln12_fu_776_p1;
reg   [2:0] trunc_ln12_reg_1095;
reg   [2:0] trunc_ln12_reg_1095_pp0_iter1_reg;
reg   [6:0] lshr_ln_reg_1099;
reg   [6:0] lshr_ln_reg_1099_pp0_iter1_reg;
reg   [15:0] gmem4_addr_read_reg_1104;
wire   [31:0] empty_947_fu_801_p2;
reg   [31:0] empty_947_reg_1116;
wire    ap_CS_fsm_state13;
reg   [63:0] gmem4_addr_1_reg_1121;
wire   [30:0] add_ln14_fu_835_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state21_pp1_stage0_iter0;
reg    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln14_fu_841_p2;
wire   [2:0] trunc_ln16_fu_846_p1;
reg   [2:0] trunc_ln16_reg_1136;
reg   [2:0] trunc_ln16_reg_1136_pp1_iter1_reg;
reg   [6:0] lshr_ln1_reg_1140;
reg   [6:0] lshr_ln1_reg_1140_pp1_iter1_reg;
reg   [15:0] gmem4_addr_1_read_reg_1145;
wire   [0:0] icmp_ln18_fu_871_p2;
wire    ap_CS_fsm_state24;
reg   [63:0] gmem4_addr_2_reg_1161;
wire   [30:0] empty_951_fu_913_p1;
reg   [30:0] empty_951_reg_1167;
wire    ap_CS_fsm_state31;
wire   [30:0] add_ln18_fu_916_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state32_pp2_stage0_iter0;
reg    ap_block_state33_pp2_stage0_iter1;
wire    ap_block_state34_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln18_1_fu_922_p2;
wire   [2:0] trunc_ln20_fu_927_p1;
reg   [2:0] trunc_ln20_reg_1182;
reg   [2:0] trunc_ln20_reg_1182_pp2_iter1_reg;
reg   [6:0] lshr_ln2_reg_1186;
reg   [6:0] lshr_ln2_reg_1186_pp2_iter1_reg;
reg   [15:0] gmem4_addr_2_read_reg_1191;
wire   [31:0] count_3_fu_952_p2;
reg   [31:0] count_3_reg_1203;
wire    ap_CS_fsm_state35;
reg   [63:0] gmem4_addr_3_reg_1208;
wire    ap_CS_fsm_state36;
wire   [30:0] add_ln23_fu_993_p2;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state44_pp3_stage0_iter0;
reg    ap_block_state45_pp3_stage0_iter1;
wire    ap_block_state46_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln23_fu_999_p2;
wire   [2:0] trunc_ln25_fu_1004_p1;
reg   [2:0] trunc_ln25_reg_1223;
reg   [2:0] trunc_ln25_reg_1223_pp3_iter1_reg;
reg   [6:0] lshr_ln3_reg_1227;
reg   [6:0] lshr_ln3_reg_1227_pp3_iter1_reg;
reg   [15:0] gmem4_addr_3_read_reg_1232;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state32;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state43;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state44;
reg    ap_enable_reg_pp3_iter2;
reg   [31:0] ap_phi_mux_count_phi_fu_694_p4;
reg   [31:0] count_reg_690;
wire   [63:0] zext_ln12_fu_790_p1;
wire   [63:0] zext_ln16_fu_860_p1;
wire   [63:0] zext_ln20_fu_941_p1;
wire   [63:0] zext_ln25_fu_1018_p1;
wire  signed [63:0] sext_ln10_fu_751_p1;
wire  signed [63:0] sext_ln14_fu_825_p1;
wire  signed [63:0] sext_ln18_fu_903_p1;
wire  signed [63:0] sext_ln23_fu_983_p1;
reg    ap_block_state1;
wire   [62:0] trunc_ln10_1_fu_742_p4;
wire   [63:0] p_cast73_i_fu_806_p1;
wire   [63:0] empty_948_fu_810_p2;
wire   [62:0] trunc_ln7_fu_815_p4;
wire   [32:0] tmp_11_fu_876_p3;
wire  signed [63:0] p_cast_i_fu_884_p1;
wire   [63:0] empty_952_fu_888_p2;
wire   [62:0] trunc_ln_fu_893_p4;
wire   [32:0] tmp_12_fu_957_p3;
wire  signed [63:0] p_cast74_i_fu_964_p1;
wire   [63:0] empty_955_fu_968_p2;
wire   [62:0] trunc_ln1_fu_973_p4;
wire    ap_CS_fsm_state47;
reg   [38:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 39'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state32) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state32)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state32);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state44) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state44)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state44);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        count_4_reg_668 <= 31'd0;
    end else if (((icmp_ln10_1_fu_771_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_4_reg_668 <= add_ln12_fu_765_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1070 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                count_reg_690[31 : 1] <= empty_947_reg_1116[31 : 1];
    end else if (((icmp_ln10_fu_736_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                count_reg_690[1] <= 1'b0;
        count_reg_690[2] <= 1'b0;
        count_reg_690[3] <= 1'b0;
        count_reg_690[4] <= 1'b0;
        count_reg_690[5] <= 1'b0;
        count_reg_690[6] <= 1'b0;
        count_reg_690[7] <= 1'b0;
        count_reg_690[8] <= 1'b0;
        count_reg_690[9] <= 1'b0;
        count_reg_690[10] <= 1'b0;
        count_reg_690[11] <= 1'b0;
        count_reg_690[12] <= 1'b0;
        count_reg_690[13] <= 1'b0;
        count_reg_690[14] <= 1'b0;
        count_reg_690[15] <= 1'b0;
        count_reg_690[16] <= 1'b0;
        count_reg_690[17] <= 1'b0;
        count_reg_690[18] <= 1'b0;
        count_reg_690[19] <= 1'b0;
        count_reg_690[20] <= 1'b0;
        count_reg_690[21] <= 1'b0;
        count_reg_690[22] <= 1'b0;
        count_reg_690[23] <= 1'b0;
        count_reg_690[24] <= 1'b0;
        count_reg_690[25] <= 1'b0;
        count_reg_690[26] <= 1'b0;
        count_reg_690[27] <= 1'b0;
        count_reg_690[28] <= 1'b0;
        count_reg_690[29] <= 1'b0;
        count_reg_690[30] <= 1'b0;
        count_reg_690[31] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_1_reg_679 <= 31'd0;
    end else if (((icmp_ln14_fu_841_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_679 <= add_ln14_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        i_2_reg_702 <= 31'd0;
    end else if (((icmp_ln18_1_fu_922_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_2_reg_702 <= add_ln18_fu_916_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_3_reg_713 <= 31'd0;
    end else if (((icmp_ln23_fu_999_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_3_reg_713 <= add_ln23_fu_993_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        OC_1_reg_1037 <= OC_dout;
        mem_1_reg_1029 <= mem_dout;
        skip1_2_reg_1048 <= skip1_dout;
        skip3_3_reg_1043 <= skip3_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        count_3_reg_1203 <= count_3_fu_952_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        empty_947_reg_1116[31 : 1] <= empty_947_fu_801_p2[31 : 1];
        gmem4_addr_1_reg_1121 <= sext_ln14_fu_825_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        empty_951_reg_1167 <= empty_951_fu_913_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        gmem4_addr_1_read_reg_1145 <= m_axi_gmem4_RDATA;
        lshr_ln1_reg_1140_pp1_iter1_reg <= lshr_ln1_reg_1140;
        trunc_ln16_reg_1136_pp1_iter1_reg <= trunc_ln16_reg_1136;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        gmem4_addr_2_read_reg_1191 <= m_axi_gmem4_RDATA;
        lshr_ln2_reg_1186_pp2_iter1_reg <= lshr_ln2_reg_1186;
        trunc_ln20_reg_1182_pp2_iter1_reg <= trunc_ln20_reg_1182;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_871_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        gmem4_addr_2_reg_1161 <= sext_ln18_fu_903_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        gmem4_addr_3_read_reg_1232 <= m_axi_gmem4_RDATA;
        lshr_ln3_reg_1227_pp3_iter1_reg <= lshr_ln3_reg_1227;
        trunc_ln25_reg_1223_pp3_iter1_reg <= trunc_ln25_reg_1223;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        gmem4_addr_3_reg_1208 <= sext_ln23_fu_983_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem4_addr_read_reg_1104 <= m_axi_gmem4_RDATA;
        lshr_ln_reg_1099_pp0_iter1_reg <= lshr_ln_reg_1099;
        trunc_ln12_reg_1095_pp0_iter1_reg <= trunc_ln12_reg_1095;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln10_reg_1070 <= icmp_ln10_fu_736_p2;
        rep1_reg_1062 <= rep1_fu_730_p3;
        rep3_reg_1053 <= rep3_fu_724_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_841_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        lshr_ln1_reg_1140 <= {{i_1_reg_679[9:3]}};
        trunc_ln16_reg_1136 <= trunc_ln16_fu_846_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_1_fu_922_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        lshr_ln2_reg_1186 <= {{i_2_reg_702[9:3]}};
        trunc_ln20_reg_1182 <= trunc_ln20_fu_927_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_999_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        lshr_ln3_reg_1227 <= {{i_3_reg_713[9:3]}};
        trunc_ln25_reg_1223 <= trunc_ln25_fu_1004_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_1_fu_771_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln_reg_1099 <= {{count_4_reg_668[9:3]}};
        trunc_ln12_reg_1095 <= trunc_ln12_fu_776_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln10_2_reg_1080 <= trunc_ln10_2_fu_762_p1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_blk_n = OC_empty_n;
    end else begin
        OC_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out1_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (skip3_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (mem_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_read = 1'b1;
    end else begin
        OC_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln10_1_fu_771_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln14_fu_841_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln18_1_fu_922_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln23_fu_999_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state44 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state44 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1070 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        ap_phi_mux_count_phi_fu_694_p4 = empty_947_reg_1116;
    end else begin
        ap_phi_mux_count_phi_fu_694_p4 = count_reg_690;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias110_ce0 = 1'b1;
    end else begin
        bias110_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (trunc_ln16_reg_1136_pp1_iter1_reg == 3'd3) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias110_we0 = 1'b1;
    end else begin
        bias110_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias111_ce0 = 1'b1;
    end else begin
        bias111_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (trunc_ln16_reg_1136_pp1_iter1_reg == 3'd4) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias111_we0 = 1'b1;
    end else begin
        bias111_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias112_ce0 = 1'b1;
    end else begin
        bias112_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (trunc_ln16_reg_1136_pp1_iter1_reg == 3'd5) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias112_we0 = 1'b1;
    end else begin
        bias112_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias113_ce0 = 1'b1;
    end else begin
        bias113_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (trunc_ln16_reg_1136_pp1_iter1_reg == 3'd6) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias113_we0 = 1'b1;
    end else begin
        bias113_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias114_ce0 = 1'b1;
    end else begin
        bias114_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (trunc_ln16_reg_1136_pp1_iter1_reg == 3'd7) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias114_we0 = 1'b1;
    end else begin
        bias114_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias18_ce0 = 1'b1;
    end else begin
        bias18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (trunc_ln16_reg_1136_pp1_iter1_reg == 3'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias18_we0 = 1'b1;
    end else begin
        bias18_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias19_ce0 = 1'b1;
    end else begin
        bias19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (trunc_ln16_reg_1136_pp1_iter1_reg == 3'd2) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias19_we0 = 1'b1;
    end else begin
        bias19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias1_ce0 = 1'b1;
    end else begin
        bias1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (trunc_ln16_reg_1136_pp1_iter1_reg == 3'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bias1_we0 = 1'b1;
    end else begin
        bias1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias322_ce0 = 1'b1;
    end else begin
        bias322_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (trunc_ln25_reg_1223_pp3_iter1_reg == 3'd1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias322_we0 = 1'b1;
    end else begin
        bias322_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias323_ce0 = 1'b1;
    end else begin
        bias323_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (trunc_ln25_reg_1223_pp3_iter1_reg == 3'd2) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias323_we0 = 1'b1;
    end else begin
        bias323_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias324_ce0 = 1'b1;
    end else begin
        bias324_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (trunc_ln25_reg_1223_pp3_iter1_reg == 3'd3) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias324_we0 = 1'b1;
    end else begin
        bias324_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias325_ce0 = 1'b1;
    end else begin
        bias325_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (trunc_ln25_reg_1223_pp3_iter1_reg == 3'd4) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias325_we0 = 1'b1;
    end else begin
        bias325_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias326_ce0 = 1'b1;
    end else begin
        bias326_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (trunc_ln25_reg_1223_pp3_iter1_reg == 3'd5) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias326_we0 = 1'b1;
    end else begin
        bias326_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias327_ce0 = 1'b1;
    end else begin
        bias327_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (trunc_ln25_reg_1223_pp3_iter1_reg == 3'd6) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias327_we0 = 1'b1;
    end else begin
        bias327_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias328_ce0 = 1'b1;
    end else begin
        bias328_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (trunc_ln25_reg_1223_pp3_iter1_reg == 3'd7) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias328_we0 = 1'b1;
    end else begin
        bias328_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias3_ce0 = 1'b1;
    end else begin
        bias3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (trunc_ln25_reg_1223_pp3_iter1_reg == 3'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bias3_we0 = 1'b1;
    end else begin
        bias3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem4_blk_n_AR = m_axi_gmem4_ARREADY;
    end else begin
        gmem4_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem4_blk_n_R = m_axi_gmem4_RVALID;
    end else begin
        gmem4_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((m_axi_gmem4_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state37)) begin
            m_axi_gmem4_ARADDR = gmem4_addr_3_reg_1208;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            m_axi_gmem4_ARADDR = gmem4_addr_2_reg_1161;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            m_axi_gmem4_ARADDR = gmem4_addr_1_reg_1121;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_gmem4_ARADDR = sext_ln10_fu_751_p1;
        end else begin
            m_axi_gmem4_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem4_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)))) begin
        m_axi_gmem4_ARLEN = rep3_reg_1053;
    end else if ((((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_gmem4_ARLEN = rep1_reg_1062;
    end else begin
        m_axi_gmem4_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_gmem4_ARVALID = 1'b1;
    end else begin
        m_axi_gmem4_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        m_axi_gmem4_RREADY = 1'b1;
    end else begin
        m_axi_gmem4_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_blk_n = mem_empty_n;
    end else begin
        mem_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out1_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (skip3_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (mem_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_read = 1'b1;
    end else begin
        mem_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale11_ce0 = 1'b1;
    end else begin
        scale11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln12_reg_1095_pp0_iter1_reg == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale11_we0 = 1'b1;
    end else begin
        scale11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale12_ce0 = 1'b1;
    end else begin
        scale12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln12_reg_1095_pp0_iter1_reg == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale12_we0 = 1'b1;
    end else begin
        scale12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale13_ce0 = 1'b1;
    end else begin
        scale13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln12_reg_1095_pp0_iter1_reg == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale13_we0 = 1'b1;
    end else begin
        scale13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale14_ce0 = 1'b1;
    end else begin
        scale14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln12_reg_1095_pp0_iter1_reg == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale14_we0 = 1'b1;
    end else begin
        scale14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale15_ce0 = 1'b1;
    end else begin
        scale15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln12_reg_1095_pp0_iter1_reg == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale15_we0 = 1'b1;
    end else begin
        scale15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale16_ce0 = 1'b1;
    end else begin
        scale16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln12_reg_1095_pp0_iter1_reg == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale16_we0 = 1'b1;
    end else begin
        scale16_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale17_ce0 = 1'b1;
    end else begin
        scale17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln12_reg_1095_pp0_iter1_reg == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale17_we0 = 1'b1;
    end else begin
        scale17_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale1_ce0 = 1'b1;
    end else begin
        scale1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln12_reg_1095_pp0_iter1_reg == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scale1_we0 = 1'b1;
    end else begin
        scale1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale315_ce0 = 1'b1;
    end else begin
        scale315_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (trunc_ln20_reg_1182_pp2_iter1_reg == 3'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale315_we0 = 1'b1;
    end else begin
        scale315_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale316_ce0 = 1'b1;
    end else begin
        scale316_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (trunc_ln20_reg_1182_pp2_iter1_reg == 3'd2) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale316_we0 = 1'b1;
    end else begin
        scale316_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale317_ce0 = 1'b1;
    end else begin
        scale317_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (trunc_ln20_reg_1182_pp2_iter1_reg == 3'd3) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale317_we0 = 1'b1;
    end else begin
        scale317_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale318_ce0 = 1'b1;
    end else begin
        scale318_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (trunc_ln20_reg_1182_pp2_iter1_reg == 3'd4) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale318_we0 = 1'b1;
    end else begin
        scale318_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale319_ce0 = 1'b1;
    end else begin
        scale319_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (trunc_ln20_reg_1182_pp2_iter1_reg == 3'd5) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale319_we0 = 1'b1;
    end else begin
        scale319_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale320_ce0 = 1'b1;
    end else begin
        scale320_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (trunc_ln20_reg_1182_pp2_iter1_reg == 3'd6) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale320_we0 = 1'b1;
    end else begin
        scale320_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale321_ce0 = 1'b1;
    end else begin
        scale321_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (trunc_ln20_reg_1182_pp2_iter1_reg == 3'd7) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale321_we0 = 1'b1;
    end else begin
        scale321_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale3_ce0 = 1'b1;
    end else begin
        scale3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (trunc_ln20_reg_1182_pp2_iter1_reg == 3'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        scale3_we0 = 1'b1;
    end else begin
        scale3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_blk_n = skip1_empty_n;
    end else begin
        skip1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_out1_blk_n = skip1_out1_full_n;
    end else begin
        skip1_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out1_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (skip3_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (mem_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_out1_write = 1'b1;
    end else begin
        skip1_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_out_blk_n = skip1_out_full_n;
    end else begin
        skip1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out1_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (skip3_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (mem_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_out_write = 1'b1;
    end else begin
        skip1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out1_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (skip3_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (mem_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_read = 1'b1;
    end else begin
        skip1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_blk_n = skip3_empty_n;
    end else begin
        skip3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out1_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (skip3_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (mem_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_read = 1'b1;
    end else begin
        skip3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out1_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (skip3_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (mem_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_736_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_1_fu_771_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln10_1_fu_771_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln14_fu_841_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln14_fu_841_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln18_fu_871_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln18_1_fu_922_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((icmp_ln18_1_fu_922_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((m_axi_gmem4_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln23_fu_999_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((icmp_ln23_fu_999_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_765_p2 = (count_4_reg_668 + 31'd1);

assign add_ln14_fu_835_p2 = (i_1_reg_679 + 31'd1);

assign add_ln18_fu_916_p2 = (i_2_reg_702 + 31'd1);

assign add_ln23_fu_993_p2 = (i_3_reg_713 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem4_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem4_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_gmem4_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_gmem4_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((m_axi_gmem4_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((m_axi_gmem4_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((m_axi_gmem4_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((m_axi_gmem4_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_out1_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip1_empty_n == 1'b0) | (skip3_empty_n == 1'b0) | (1'b0 == OC_empty_n) | (mem_empty_n == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = (m_axi_gmem4_RVALID == 1'b0);
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp1_stage0_iter1 = (m_axi_gmem4_RVALID == 1'b0);
end

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_pp2_stage0_iter1 = (m_axi_gmem4_RVALID == 1'b0);
end

assign ap_block_state34_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state45_pp3_stage0_iter1 = (m_axi_gmem4_RVALID == 1'b0);
end

assign ap_block_state46_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign bias110_address0 = zext_ln16_fu_860_p1;

assign bias110_d0 = gmem4_addr_1_read_reg_1145;

assign bias111_address0 = zext_ln16_fu_860_p1;

assign bias111_d0 = gmem4_addr_1_read_reg_1145;

assign bias112_address0 = zext_ln16_fu_860_p1;

assign bias112_d0 = gmem4_addr_1_read_reg_1145;

assign bias113_address0 = zext_ln16_fu_860_p1;

assign bias113_d0 = gmem4_addr_1_read_reg_1145;

assign bias114_address0 = zext_ln16_fu_860_p1;

assign bias114_d0 = gmem4_addr_1_read_reg_1145;

assign bias18_address0 = zext_ln16_fu_860_p1;

assign bias18_d0 = gmem4_addr_1_read_reg_1145;

assign bias19_address0 = zext_ln16_fu_860_p1;

assign bias19_d0 = gmem4_addr_1_read_reg_1145;

assign bias1_address0 = zext_ln16_fu_860_p1;

assign bias1_d0 = gmem4_addr_1_read_reg_1145;

assign bias322_address0 = zext_ln25_fu_1018_p1;

assign bias322_d0 = gmem4_addr_3_read_reg_1232;

assign bias323_address0 = zext_ln25_fu_1018_p1;

assign bias323_d0 = gmem4_addr_3_read_reg_1232;

assign bias324_address0 = zext_ln25_fu_1018_p1;

assign bias324_d0 = gmem4_addr_3_read_reg_1232;

assign bias325_address0 = zext_ln25_fu_1018_p1;

assign bias325_d0 = gmem4_addr_3_read_reg_1232;

assign bias326_address0 = zext_ln25_fu_1018_p1;

assign bias326_d0 = gmem4_addr_3_read_reg_1232;

assign bias327_address0 = zext_ln25_fu_1018_p1;

assign bias327_d0 = gmem4_addr_3_read_reg_1232;

assign bias328_address0 = zext_ln25_fu_1018_p1;

assign bias328_d0 = gmem4_addr_3_read_reg_1232;

assign bias3_address0 = zext_ln25_fu_1018_p1;

assign bias3_d0 = gmem4_addr_3_read_reg_1232;

assign count_3_fu_952_p2 = (count_reg_690 + rep3_reg_1053);

assign empty_947_fu_801_p2 = rep1_reg_1062 << 32'd1;

assign empty_948_fu_810_p2 = (mem_1_reg_1029 + p_cast73_i_fu_806_p1);

assign empty_951_fu_913_p1 = rep3_reg_1053[30:0];

assign empty_952_fu_888_p2 = ($signed(mem_1_reg_1029) + $signed(p_cast_i_fu_884_p1));

assign empty_955_fu_968_p2 = ($signed(mem_1_reg_1029) + $signed(p_cast74_i_fu_964_p1));

assign icmp_ln10_1_fu_771_p2 = ((count_4_reg_668 == trunc_ln10_2_reg_1080) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_736_p2 = (($signed(rep1_fu_730_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_841_p2 = ((i_1_reg_679 == trunc_ln10_2_reg_1080) ? 1'b1 : 1'b0);

assign icmp_ln18_1_fu_922_p2 = ((i_2_reg_702 == empty_951_reg_1167) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_871_p2 = (($signed(rep3_reg_1053) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_999_p2 = ((i_3_reg_713 == empty_951_reg_1167) ? 1'b1 : 1'b0);

assign m_axi_gmem4_ARBURST = 2'd0;

assign m_axi_gmem4_ARCACHE = 4'd0;

assign m_axi_gmem4_ARID = 1'd0;

assign m_axi_gmem4_ARLOCK = 2'd0;

assign m_axi_gmem4_ARPROT = 3'd0;

assign m_axi_gmem4_ARQOS = 4'd0;

assign m_axi_gmem4_ARREGION = 4'd0;

assign m_axi_gmem4_ARSIZE = 3'd0;

assign m_axi_gmem4_ARUSER = 1'd0;

assign m_axi_gmem4_AWADDR = 64'd0;

assign m_axi_gmem4_AWBURST = 2'd0;

assign m_axi_gmem4_AWCACHE = 4'd0;

assign m_axi_gmem4_AWID = 1'd0;

assign m_axi_gmem4_AWLEN = 32'd0;

assign m_axi_gmem4_AWLOCK = 2'd0;

assign m_axi_gmem4_AWPROT = 3'd0;

assign m_axi_gmem4_AWQOS = 4'd0;

assign m_axi_gmem4_AWREGION = 4'd0;

assign m_axi_gmem4_AWSIZE = 3'd0;

assign m_axi_gmem4_AWUSER = 1'd0;

assign m_axi_gmem4_AWVALID = 1'b0;

assign m_axi_gmem4_BREADY = 1'b0;

assign m_axi_gmem4_WDATA = 16'd0;

assign m_axi_gmem4_WID = 1'd0;

assign m_axi_gmem4_WLAST = 1'b0;

assign m_axi_gmem4_WSTRB = 2'd0;

assign m_axi_gmem4_WUSER = 1'd0;

assign m_axi_gmem4_WVALID = 1'b0;

assign p_cast73_i_fu_806_p1 = empty_947_fu_801_p2;

assign p_cast74_i_fu_964_p1 = $signed(tmp_12_fu_957_p3);

assign p_cast_i_fu_884_p1 = $signed(tmp_11_fu_876_p3);

assign rep1_fu_730_p3 = ((skip1_2_reg_1048[0:0] == 1'b1) ? 32'd0 : OC_1_reg_1037);

assign rep3_fu_724_p3 = ((skip3_3_reg_1043[0:0] == 1'b1) ? 32'd0 : OC_1_reg_1037);

assign scale11_address0 = zext_ln12_fu_790_p1;

assign scale11_d0 = gmem4_addr_read_reg_1104;

assign scale12_address0 = zext_ln12_fu_790_p1;

assign scale12_d0 = gmem4_addr_read_reg_1104;

assign scale13_address0 = zext_ln12_fu_790_p1;

assign scale13_d0 = gmem4_addr_read_reg_1104;

assign scale14_address0 = zext_ln12_fu_790_p1;

assign scale14_d0 = gmem4_addr_read_reg_1104;

assign scale15_address0 = zext_ln12_fu_790_p1;

assign scale15_d0 = gmem4_addr_read_reg_1104;

assign scale16_address0 = zext_ln12_fu_790_p1;

assign scale16_d0 = gmem4_addr_read_reg_1104;

assign scale17_address0 = zext_ln12_fu_790_p1;

assign scale17_d0 = gmem4_addr_read_reg_1104;

assign scale1_address0 = zext_ln12_fu_790_p1;

assign scale1_d0 = gmem4_addr_read_reg_1104;

assign scale315_address0 = zext_ln20_fu_941_p1;

assign scale315_d0 = gmem4_addr_2_read_reg_1191;

assign scale316_address0 = zext_ln20_fu_941_p1;

assign scale316_d0 = gmem4_addr_2_read_reg_1191;

assign scale317_address0 = zext_ln20_fu_941_p1;

assign scale317_d0 = gmem4_addr_2_read_reg_1191;

assign scale318_address0 = zext_ln20_fu_941_p1;

assign scale318_d0 = gmem4_addr_2_read_reg_1191;

assign scale319_address0 = zext_ln20_fu_941_p1;

assign scale319_d0 = gmem4_addr_2_read_reg_1191;

assign scale320_address0 = zext_ln20_fu_941_p1;

assign scale320_d0 = gmem4_addr_2_read_reg_1191;

assign scale321_address0 = zext_ln20_fu_941_p1;

assign scale321_d0 = gmem4_addr_2_read_reg_1191;

assign scale3_address0 = zext_ln20_fu_941_p1;

assign scale3_d0 = gmem4_addr_2_read_reg_1191;

assign sext_ln10_fu_751_p1 = $signed(trunc_ln10_1_fu_742_p4);

assign sext_ln14_fu_825_p1 = $signed(trunc_ln7_fu_815_p4);

assign sext_ln18_fu_903_p1 = $signed(trunc_ln_fu_893_p4);

assign sext_ln23_fu_983_p1 = $signed(trunc_ln1_fu_973_p4);

assign skip1_out1_din = skip1_dout;

assign skip1_out_din = skip1_dout;

assign tmp_11_fu_876_p3 = {{ap_phi_mux_count_phi_fu_694_p4}, {1'd0}};

assign tmp_12_fu_957_p3 = {{count_3_reg_1203}, {1'd0}};

assign trunc_ln10_1_fu_742_p4 = {{mem_1_reg_1029[63:1]}};

assign trunc_ln10_2_fu_762_p1 = rep1_reg_1062[30:0];

assign trunc_ln12_fu_776_p1 = count_4_reg_668[2:0];

assign trunc_ln16_fu_846_p1 = i_1_reg_679[2:0];

assign trunc_ln1_fu_973_p4 = {{empty_955_fu_968_p2[63:1]}};

assign trunc_ln20_fu_927_p1 = i_2_reg_702[2:0];

assign trunc_ln25_fu_1004_p1 = i_3_reg_713[2:0];

assign trunc_ln7_fu_815_p4 = {{empty_948_fu_810_p2[63:1]}};

assign trunc_ln_fu_893_p4 = {{empty_952_fu_888_p2[63:1]}};

assign zext_ln12_fu_790_p1 = lshr_ln_reg_1099_pp0_iter1_reg;

assign zext_ln16_fu_860_p1 = lshr_ln1_reg_1140_pp1_iter1_reg;

assign zext_ln20_fu_941_p1 = lshr_ln2_reg_1186_pp2_iter1_reg;

assign zext_ln25_fu_1018_p1 = lshr_ln3_reg_1227_pp3_iter1_reg;

always @ (posedge ap_clk) begin
    empty_947_reg_1116[0] <= 1'b0;
    count_reg_690[0] <= 1'b0;
end

endmodule //top_PackReadBuffer_ap_int_16_s
