-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_Loop_VITIS_LOOP_38_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ret_V_1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ret_V_1_loc_empty_n : IN STD_LOGIC;
    ret_V_1_loc_read : OUT STD_LOGIC;
    k1_buffer_V_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_0_ce0 : OUT STD_LOGIC;
    k1_buffer_V_0_we0 : OUT STD_LOGIC;
    k1_buffer_V_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_1_ce0 : OUT STD_LOGIC;
    k1_buffer_V_1_we0 : OUT STD_LOGIC;
    k1_buffer_V_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_2_ce0 : OUT STD_LOGIC;
    k1_buffer_V_2_we0 : OUT STD_LOGIC;
    k1_buffer_V_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_3_ce0 : OUT STD_LOGIC;
    k1_buffer_V_3_we0 : OUT STD_LOGIC;
    k1_buffer_V_3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_4_ce0 : OUT STD_LOGIC;
    k1_buffer_V_4_we0 : OUT STD_LOGIC;
    k1_buffer_V_4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_5_ce0 : OUT STD_LOGIC;
    k1_buffer_V_5_we0 : OUT STD_LOGIC;
    k1_buffer_V_5_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_6_ce0 : OUT STD_LOGIC;
    k1_buffer_V_6_we0 : OUT STD_LOGIC;
    k1_buffer_V_6_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_7_ce0 : OUT STD_LOGIC;
    k1_buffer_V_7_we0 : OUT STD_LOGIC;
    k1_buffer_V_7_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_8_ce0 : OUT STD_LOGIC;
    k1_buffer_V_8_we0 : OUT STD_LOGIC;
    k1_buffer_V_8_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_9_ce0 : OUT STD_LOGIC;
    k1_buffer_V_9_we0 : OUT STD_LOGIC;
    k1_buffer_V_9_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_10_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_10_ce0 : OUT STD_LOGIC;
    k1_buffer_V_10_we0 : OUT STD_LOGIC;
    k1_buffer_V_10_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_11_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_11_ce0 : OUT STD_LOGIC;
    k1_buffer_V_11_we0 : OUT STD_LOGIC;
    k1_buffer_V_11_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_12_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_12_ce0 : OUT STD_LOGIC;
    k1_buffer_V_12_we0 : OUT STD_LOGIC;
    k1_buffer_V_12_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_13_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_13_ce0 : OUT STD_LOGIC;
    k1_buffer_V_13_we0 : OUT STD_LOGIC;
    k1_buffer_V_13_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_14_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_14_ce0 : OUT STD_LOGIC;
    k1_buffer_V_14_we0 : OUT STD_LOGIC;
    k1_buffer_V_14_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k1_buffer_V_15_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k1_buffer_V_15_ce0 : OUT STD_LOGIC;
    k1_buffer_V_15_we0 : OUT STD_LOGIC;
    k1_buffer_V_15_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    k0_1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    k0_1_empty_n : IN STD_LOGIC;
    k0_1_read : OUT STD_LOGIC;
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of top_Loop_VITIS_LOOP_38_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ret_V_1_loc_blk_n : STD_LOGIC;
    signal k0_1_blk_n : STD_LOGIC;
    signal gmem2_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem2_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_reg_359 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln_reg_448 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln40_2_reg_454 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln38_fu_404_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln878_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_reg_479 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln_reg_479_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln40_fu_425_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln40_reg_484 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln40_reg_484_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem2_addr_read_reg_488 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal zext_ln40_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln40_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_359 <= ap_const_lv28_0;
            elsif (((icmp_ln878_fu_410_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_359 <= add_ln38_fu_404_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem2_addr_read_reg_488 <= m_axi_gmem2_RDATA;
                lshr_ln_reg_479_pp0_iter1_reg <= lshr_ln_reg_479;
                trunc_ln40_reg_484_pp0_iter1_reg <= trunc_ln40_reg_484;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_fu_410_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln_reg_479 <= i_reg_359(14 downto 4);
                trunc_ln40_reg_484 <= trunc_ln40_fu_425_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln40_2_reg_454 <= k0_1_dout(63 downto 3);
                trunc_ln_reg_448 <= ret_V_1_loc_dout(31 downto 4);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ret_V_1_loc_empty_n, k0_1_empty_n, m_axi_gmem2_ARREADY, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, icmp_ln878_fu_410_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ret_V_1_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (k0_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (m_axi_gmem2_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln878_fu_410_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln878_fu_410_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln38_fu_404_p2 <= std_logic_vector(unsigned(i_reg_359) + unsigned(ap_const_lv28_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_gmem2_RVALID, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem2_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_gmem2_RVALID, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem2_RVALID = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, ret_V_1_loc_empty_n, k0_1_empty_n)
    begin
                ap_block_state1 <= ((ret_V_1_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (k0_1_empty_n = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(m_axi_gmem2_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= (m_axi_gmem2_RVALID = ap_const_logic_0);
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln878_fu_410_p2)
    begin
        if ((icmp_ln878_fu_410_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_blk_n_AR_assign_proc : process(m_axi_gmem2_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem2_blk_n_AR <= m_axi_gmem2_ARREADY;
        else 
            gmem2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_R_assign_proc : process(m_axi_gmem2_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem2_blk_n_R <= m_axi_gmem2_RVALID;
        else 
            gmem2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln878_fu_410_p2 <= "1" when (i_reg_359 = trunc_ln_reg_448) else "0";

    k0_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, k0_1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            k0_1_blk_n <= k0_1_empty_n;
        else 
            k0_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    k0_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ret_V_1_loc_empty_n, k0_1_empty_n)
    begin
        if ((not(((ret_V_1_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (k0_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            k0_1_read <= ap_const_logic_1;
        else 
            k0_1_read <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_0_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_0_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_0_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_0_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_10_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_10_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_10_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_10_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_10_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_10_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_11_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_11_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_11_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_11_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_11_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_11_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_12_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_12_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_12_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_12_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_12_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_12_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_13_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_13_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_13_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_13_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_13_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_13_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_14_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_14_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_14_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_14_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_14_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_14_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_15_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_15_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_15_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_15_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_15_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_15_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_1_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_1_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_1_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_1_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_2_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_2_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_2_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_2_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_3_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_3_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_3_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_3_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_4_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_4_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_4_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_4_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_5_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_5_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_5_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_5_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_6_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_6_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_6_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_6_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_7_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_7_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_7_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_7_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_8_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_8_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_8_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_8_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_8_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_8_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_9_address0 <= zext_ln40_fu_429_p1(11 - 1 downto 0);

    k1_buffer_V_9_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_9_ce0 <= ap_const_logic_1;
        else 
            k1_buffer_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k1_buffer_V_9_d0 <= gmem2_addr_read_reg_488;

    k1_buffer_V_9_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln40_reg_484_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln40_reg_484_pp0_iter1_reg = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k1_buffer_V_9_we0 <= ap_const_logic_1;
        else 
            k1_buffer_V_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem2_ARADDR <= sext_ln40_fu_390_p1;
    m_axi_gmem2_ARBURST <= ap_const_lv2_0;
    m_axi_gmem2_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem2_ARID <= ap_const_lv1_0;
    m_axi_gmem2_ARLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_448),32));
    m_axi_gmem2_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem2_ARPROT <= ap_const_lv3_0;
    m_axi_gmem2_ARQOS <= ap_const_lv4_0;
    m_axi_gmem2_ARREGION <= ap_const_lv4_0;
    m_axi_gmem2_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem2_ARUSER <= ap_const_lv1_0;

    m_axi_gmem2_ARVALID_assign_proc : process(m_axi_gmem2_ARREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (m_axi_gmem2_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem2_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem2_AWADDR <= ap_const_lv64_0;
    m_axi_gmem2_AWBURST <= ap_const_lv2_0;
    m_axi_gmem2_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem2_AWID <= ap_const_lv1_0;
    m_axi_gmem2_AWLEN <= ap_const_lv32_0;
    m_axi_gmem2_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem2_AWPROT <= ap_const_lv3_0;
    m_axi_gmem2_AWQOS <= ap_const_lv4_0;
    m_axi_gmem2_AWREGION <= ap_const_lv4_0;
    m_axi_gmem2_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem2_AWUSER <= ap_const_lv1_0;
    m_axi_gmem2_AWVALID <= ap_const_logic_0;
    m_axi_gmem2_BREADY <= ap_const_logic_0;

    m_axi_gmem2_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_gmem2_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem2_WDATA <= ap_const_lv64_0;
    m_axi_gmem2_WID <= ap_const_lv1_0;
    m_axi_gmem2_WLAST <= ap_const_logic_0;
    m_axi_gmem2_WSTRB <= ap_const_lv8_0;
    m_axi_gmem2_WUSER <= ap_const_lv1_0;
    m_axi_gmem2_WVALID <= ap_const_logic_0;

    ret_V_1_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ret_V_1_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ret_V_1_loc_blk_n <= ret_V_1_loc_empty_n;
        else 
            ret_V_1_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ret_V_1_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ret_V_1_loc_empty_n, k0_1_empty_n)
    begin
        if ((not(((ret_V_1_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (k0_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ret_V_1_loc_read <= ap_const_logic_1;
        else 
            ret_V_1_loc_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln40_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln40_2_reg_454),64));

    trunc_ln40_fu_425_p1 <= i_reg_359(4 - 1 downto 0);
    zext_ln40_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_479_pp0_iter1_reg),64));
end behav;
