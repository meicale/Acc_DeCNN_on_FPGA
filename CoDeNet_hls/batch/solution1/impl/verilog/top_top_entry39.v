// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_top_entry39 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        fmap,
        out_r,
        k0_1,
        k0_3,
        quant,
        offsets,
        D,
        IC,
        OC,
        batch,
        STRIDE_2,
        skip3,
        skip1,
        deform,
        relu1,
        relu3,
        fmap_out_din,
        fmap_out_full_n,
        fmap_out_write,
        out_out_din,
        out_out_full_n,
        out_out_write,
        k0_1_out_din,
        k0_1_out_full_n,
        k0_1_out_write,
        k0_3_out_din,
        k0_3_out_full_n,
        k0_3_out_write,
        quant_out_din,
        quant_out_full_n,
        quant_out_write,
        offsets_out_din,
        offsets_out_full_n,
        offsets_out_write,
        D_out_din,
        D_out_full_n,
        D_out_write,
        D_out1_din,
        D_out1_full_n,
        D_out1_write,
        D_out2_din,
        D_out2_full_n,
        D_out2_write,
        IC_out_din,
        IC_out_full_n,
        IC_out_write,
        IC_out3_din,
        IC_out3_full_n,
        IC_out3_write,
        OC_out_din,
        OC_out_full_n,
        OC_out_write,
        OC_out4_din,
        OC_out4_full_n,
        OC_out4_write,
        OC_out5_din,
        OC_out5_full_n,
        OC_out5_write,
        batch_out_din,
        batch_out_full_n,
        batch_out_write,
        batch_out6_din,
        batch_out6_full_n,
        batch_out6_write,
        batch_out7_din,
        batch_out7_full_n,
        batch_out7_write,
        batch_out8_din,
        batch_out8_full_n,
        batch_out8_write,
        STRIDE_2_out_din,
        STRIDE_2_out_full_n,
        STRIDE_2_out_write,
        STRIDE_2_out9_din,
        STRIDE_2_out9_full_n,
        STRIDE_2_out9_write,
        STRIDE_2_out10_din,
        STRIDE_2_out10_full_n,
        STRIDE_2_out10_write,
        skip3_out_din,
        skip3_out_full_n,
        skip3_out_write,
        skip3_out11_din,
        skip3_out11_full_n,
        skip3_out11_write,
        skip3_out12_din,
        skip3_out12_full_n,
        skip3_out12_write,
        skip3_out13_din,
        skip3_out13_full_n,
        skip3_out13_write,
        skip3_out14_din,
        skip3_out14_full_n,
        skip3_out14_write,
        skip3_out15_din,
        skip3_out15_full_n,
        skip3_out15_write,
        skip1_out_din,
        skip1_out_full_n,
        skip1_out_write,
        skip1_out16_din,
        skip1_out16_full_n,
        skip1_out16_write,
        deform_out_din,
        deform_out_full_n,
        deform_out_write,
        deform_out17_din,
        deform_out17_full_n,
        deform_out17_write,
        relu1_out_din,
        relu1_out_full_n,
        relu1_out_write,
        relu3_out_din,
        relu3_out_full_n,
        relu3_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] fmap;
input  [63:0] out_r;
input  [63:0] k0_1;
input  [63:0] k0_3;
input  [63:0] quant;
input  [63:0] offsets;
input  [31:0] D;
input  [31:0] IC;
input  [31:0] OC;
input  [31:0] batch;
input  [0:0] STRIDE_2;
input  [0:0] skip3;
input  [0:0] skip1;
input  [0:0] deform;
input  [0:0] relu1;
input  [0:0] relu3;
output  [63:0] fmap_out_din;
input   fmap_out_full_n;
output   fmap_out_write;
output  [63:0] out_out_din;
input   out_out_full_n;
output   out_out_write;
output  [63:0] k0_1_out_din;
input   k0_1_out_full_n;
output   k0_1_out_write;
output  [63:0] k0_3_out_din;
input   k0_3_out_full_n;
output   k0_3_out_write;
output  [63:0] quant_out_din;
input   quant_out_full_n;
output   quant_out_write;
output  [63:0] offsets_out_din;
input   offsets_out_full_n;
output   offsets_out_write;
output  [31:0] D_out_din;
input   D_out_full_n;
output   D_out_write;
output  [31:0] D_out1_din;
input   D_out1_full_n;
output   D_out1_write;
output  [31:0] D_out2_din;
input   D_out2_full_n;
output   D_out2_write;
output  [31:0] IC_out_din;
input   IC_out_full_n;
output   IC_out_write;
output  [31:0] IC_out3_din;
input   IC_out3_full_n;
output   IC_out3_write;
output  [31:0] OC_out_din;
input   OC_out_full_n;
output   OC_out_write;
output  [31:0] OC_out4_din;
input   OC_out4_full_n;
output   OC_out4_write;
output  [31:0] OC_out5_din;
input   OC_out5_full_n;
output   OC_out5_write;
output  [31:0] batch_out_din;
input   batch_out_full_n;
output   batch_out_write;
output  [31:0] batch_out6_din;
input   batch_out6_full_n;
output   batch_out6_write;
output  [31:0] batch_out7_din;
input   batch_out7_full_n;
output   batch_out7_write;
output  [31:0] batch_out8_din;
input   batch_out8_full_n;
output   batch_out8_write;
output  [0:0] STRIDE_2_out_din;
input   STRIDE_2_out_full_n;
output   STRIDE_2_out_write;
output  [0:0] STRIDE_2_out9_din;
input   STRIDE_2_out9_full_n;
output   STRIDE_2_out9_write;
output  [0:0] STRIDE_2_out10_din;
input   STRIDE_2_out10_full_n;
output   STRIDE_2_out10_write;
output  [0:0] skip3_out_din;
input   skip3_out_full_n;
output   skip3_out_write;
output  [0:0] skip3_out11_din;
input   skip3_out11_full_n;
output   skip3_out11_write;
output  [0:0] skip3_out12_din;
input   skip3_out12_full_n;
output   skip3_out12_write;
output  [0:0] skip3_out13_din;
input   skip3_out13_full_n;
output   skip3_out13_write;
output  [0:0] skip3_out14_din;
input   skip3_out14_full_n;
output   skip3_out14_write;
output  [0:0] skip3_out15_din;
input   skip3_out15_full_n;
output   skip3_out15_write;
output  [0:0] skip1_out_din;
input   skip1_out_full_n;
output   skip1_out_write;
output  [0:0] skip1_out16_din;
input   skip1_out16_full_n;
output   skip1_out16_write;
output  [0:0] deform_out_din;
input   deform_out_full_n;
output   deform_out_write;
output  [0:0] deform_out17_din;
input   deform_out17_full_n;
output   deform_out17_write;
output  [0:0] relu1_out_din;
input   relu1_out_full_n;
output   relu1_out_write;
output  [0:0] relu3_out_din;
input   relu3_out_full_n;
output   relu3_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg fmap_out_write;
reg out_out_write;
reg k0_1_out_write;
reg k0_3_out_write;
reg quant_out_write;
reg offsets_out_write;
reg D_out_write;
reg D_out1_write;
reg D_out2_write;
reg IC_out_write;
reg IC_out3_write;
reg OC_out_write;
reg OC_out4_write;
reg OC_out5_write;
reg batch_out_write;
reg batch_out6_write;
reg batch_out7_write;
reg batch_out8_write;
reg STRIDE_2_out_write;
reg STRIDE_2_out9_write;
reg STRIDE_2_out10_write;
reg skip3_out_write;
reg skip3_out11_write;
reg skip3_out12_write;
reg skip3_out13_write;
reg skip3_out14_write;
reg skip3_out15_write;
reg skip1_out_write;
reg skip1_out16_write;
reg deform_out_write;
reg deform_out17_write;
reg relu1_out_write;
reg relu3_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    fmap_out_blk_n;
reg    out_out_blk_n;
reg    k0_1_out_blk_n;
reg    k0_3_out_blk_n;
reg    quant_out_blk_n;
reg    offsets_out_blk_n;
reg    D_out_blk_n;
reg    D_out1_blk_n;
reg    D_out2_blk_n;
reg    IC_out_blk_n;
reg    IC_out3_blk_n;
reg    OC_out_blk_n;
reg    OC_out4_blk_n;
reg    OC_out5_blk_n;
reg    batch_out_blk_n;
reg    batch_out6_blk_n;
reg    batch_out7_blk_n;
reg    batch_out8_blk_n;
reg    STRIDE_2_out_blk_n;
reg    STRIDE_2_out9_blk_n;
reg    STRIDE_2_out10_blk_n;
reg    skip3_out_blk_n;
reg    skip3_out11_blk_n;
reg    skip3_out12_blk_n;
reg    skip3_out13_blk_n;
reg    skip3_out14_blk_n;
reg    skip3_out15_blk_n;
reg    skip1_out_blk_n;
reg    skip1_out16_blk_n;
reg    deform_out_blk_n;
reg    deform_out17_blk_n;
reg    relu1_out_blk_n;
reg    relu3_out_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_out1_blk_n = D_out1_full_n;
    end else begin
        D_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_out1_write = 1'b1;
    end else begin
        D_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_out2_blk_n = D_out2_full_n;
    end else begin
        D_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_out2_write = 1'b1;
    end else begin
        D_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_out_blk_n = D_out_full_n;
    end else begin
        D_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_out_write = 1'b1;
    end else begin
        D_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        IC_out3_blk_n = IC_out3_full_n;
    end else begin
        IC_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        IC_out3_write = 1'b1;
    end else begin
        IC_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        IC_out_blk_n = IC_out_full_n;
    end else begin
        IC_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        IC_out_write = 1'b1;
    end else begin
        IC_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_out4_blk_n = OC_out4_full_n;
    end else begin
        OC_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_out4_write = 1'b1;
    end else begin
        OC_out4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_out5_blk_n = OC_out5_full_n;
    end else begin
        OC_out5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_out5_write = 1'b1;
    end else begin
        OC_out5_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_out_blk_n = OC_out_full_n;
    end else begin
        OC_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        OC_out_write = 1'b1;
    end else begin
        OC_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        STRIDE_2_out10_blk_n = STRIDE_2_out10_full_n;
    end else begin
        STRIDE_2_out10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        STRIDE_2_out10_write = 1'b1;
    end else begin
        STRIDE_2_out10_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        STRIDE_2_out9_blk_n = STRIDE_2_out9_full_n;
    end else begin
        STRIDE_2_out9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        STRIDE_2_out9_write = 1'b1;
    end else begin
        STRIDE_2_out9_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        STRIDE_2_out_blk_n = STRIDE_2_out_full_n;
    end else begin
        STRIDE_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        STRIDE_2_out_write = 1'b1;
    end else begin
        STRIDE_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_out6_blk_n = batch_out6_full_n;
    end else begin
        batch_out6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_out6_write = 1'b1;
    end else begin
        batch_out6_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_out7_blk_n = batch_out7_full_n;
    end else begin
        batch_out7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_out7_write = 1'b1;
    end else begin
        batch_out7_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_out8_blk_n = batch_out8_full_n;
    end else begin
        batch_out8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_out8_write = 1'b1;
    end else begin
        batch_out8_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_out_blk_n = batch_out_full_n;
    end else begin
        batch_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_out_write = 1'b1;
    end else begin
        batch_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        deform_out17_blk_n = deform_out17_full_n;
    end else begin
        deform_out17_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        deform_out17_write = 1'b1;
    end else begin
        deform_out17_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        deform_out_blk_n = deform_out_full_n;
    end else begin
        deform_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        deform_out_write = 1'b1;
    end else begin
        deform_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fmap_out_blk_n = fmap_out_full_n;
    end else begin
        fmap_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        fmap_out_write = 1'b1;
    end else begin
        fmap_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        k0_1_out_blk_n = k0_1_out_full_n;
    end else begin
        k0_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k0_1_out_write = 1'b1;
    end else begin
        k0_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        k0_3_out_blk_n = k0_3_out_full_n;
    end else begin
        k0_3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k0_3_out_write = 1'b1;
    end else begin
        k0_3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        offsets_out_blk_n = offsets_out_full_n;
    end else begin
        offsets_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        offsets_out_write = 1'b1;
    end else begin
        offsets_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_out_blk_n = out_out_full_n;
    end else begin
        out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_out_write = 1'b1;
    end else begin
        out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        quant_out_blk_n = quant_out_full_n;
    end else begin
        quant_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        quant_out_write = 1'b1;
    end else begin
        quant_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        relu1_out_blk_n = relu1_out_full_n;
    end else begin
        relu1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        relu1_out_write = 1'b1;
    end else begin
        relu1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        relu3_out_blk_n = relu3_out_full_n;
    end else begin
        relu3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        relu3_out_write = 1'b1;
    end else begin
        relu3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_out16_blk_n = skip1_out16_full_n;
    end else begin
        skip1_out16_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_out16_write = 1'b1;
    end else begin
        skip1_out16_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_out_blk_n = skip1_out_full_n;
    end else begin
        skip1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_out_write = 1'b1;
    end else begin
        skip1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out11_blk_n = skip3_out11_full_n;
    end else begin
        skip3_out11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out11_write = 1'b1;
    end else begin
        skip3_out11_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out12_blk_n = skip3_out12_full_n;
    end else begin
        skip3_out12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out12_write = 1'b1;
    end else begin
        skip3_out12_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out13_blk_n = skip3_out13_full_n;
    end else begin
        skip3_out13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out13_write = 1'b1;
    end else begin
        skip3_out13_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out14_blk_n = skip3_out14_full_n;
    end else begin
        skip3_out14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out14_write = 1'b1;
    end else begin
        skip3_out14_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out15_blk_n = skip3_out15_full_n;
    end else begin
        skip3_out15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out15_write = 1'b1;
    end else begin
        skip3_out15_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out_blk_n = skip3_out_full_n;
    end else begin
        skip3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip3_out_write = 1'b1;
    end else begin
        skip3_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign D_out1_din = D;

assign D_out2_din = D;

assign D_out_din = D;

assign IC_out3_din = IC;

assign IC_out_din = IC;

assign OC_out4_din = OC;

assign OC_out5_din = OC;

assign OC_out_din = OC;

assign STRIDE_2_out10_din = STRIDE_2;

assign STRIDE_2_out9_din = STRIDE_2;

assign STRIDE_2_out_din = STRIDE_2;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (offsets_out_full_n == 1'b0) | (quant_out_full_n == 1'b0) | (k0_3_out_full_n == 1'b0) | (k0_1_out_full_n == 1'b0) | (out_out_full_n == 1'b0) | (fmap_out_full_n == 1'b0) | (1'b0 == OC_out_full_n) | (1'b0 == IC_out3_full_n) | (1'b0 == IC_out_full_n) | (1'b0 == D_out2_full_n) | (1'b0 == D_out1_full_n) | (1'b0 == D_out_full_n) | (1'b0 == STRIDE_2_out10_full_n) | (1'b0 == STRIDE_2_out9_full_n) | (1'b0 == STRIDE_2_out_full_n) | (1'b0 == OC_out5_full_n) | (1'b0 == OC_out4_full_n) | (ap_done_reg == 1'b1) | (relu3_out_full_n == 1'b0) | (relu1_out_full_n == 1'b0) | (deform_out17_full_n == 1'b0) | (deform_out_full_n == 1'b0) | (skip1_out16_full_n == 1'b0) | (skip1_out_full_n == 1'b0) | (skip3_out15_full_n == 1'b0) | (skip3_out14_full_n == 1'b0) | (skip3_out13_full_n == 1'b0) | (skip3_out12_full_n == 1'b0) | (skip3_out11_full_n == 1'b0) | (skip3_out_full_n == 1'b0) | (batch_out8_full_n == 1'b0) | (batch_out7_full_n == 1'b0) | (batch_out6_full_n == 1'b0) | (batch_out_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign batch_out6_din = batch;

assign batch_out7_din = batch;

assign batch_out8_din = batch;

assign batch_out_din = batch;

assign deform_out17_din = deform;

assign deform_out_din = deform;

assign fmap_out_din = fmap;

assign k0_1_out_din = k0_1;

assign k0_3_out_din = k0_3;

assign offsets_out_din = offsets;

assign out_out_din = out_r;

assign quant_out_din = quant;

assign relu1_out_din = relu1;

assign relu3_out_din = relu3;

assign skip1_out16_din = skip1;

assign skip1_out_din = skip1;

assign skip3_out11_din = skip3;

assign skip3_out12_din = skip3;

assign skip3_out13_din = skip3;

assign skip3_out14_din = skip3;

assign skip3_out15_din = skip3;

assign skip3_out_din = skip3;

assign start_out = real_start;

endmodule //top_top_entry39
