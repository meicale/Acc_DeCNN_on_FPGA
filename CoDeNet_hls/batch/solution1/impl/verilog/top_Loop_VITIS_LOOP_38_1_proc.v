// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_Loop_VITIS_LOOP_38_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ret_V_1_loc_dout,
        ret_V_1_loc_empty_n,
        ret_V_1_loc_read,
        k1_buffer_V_0_address0,
        k1_buffer_V_0_ce0,
        k1_buffer_V_0_we0,
        k1_buffer_V_0_d0,
        k1_buffer_V_1_address0,
        k1_buffer_V_1_ce0,
        k1_buffer_V_1_we0,
        k1_buffer_V_1_d0,
        k1_buffer_V_2_address0,
        k1_buffer_V_2_ce0,
        k1_buffer_V_2_we0,
        k1_buffer_V_2_d0,
        k1_buffer_V_3_address0,
        k1_buffer_V_3_ce0,
        k1_buffer_V_3_we0,
        k1_buffer_V_3_d0,
        k1_buffer_V_4_address0,
        k1_buffer_V_4_ce0,
        k1_buffer_V_4_we0,
        k1_buffer_V_4_d0,
        k1_buffer_V_5_address0,
        k1_buffer_V_5_ce0,
        k1_buffer_V_5_we0,
        k1_buffer_V_5_d0,
        k1_buffer_V_6_address0,
        k1_buffer_V_6_ce0,
        k1_buffer_V_6_we0,
        k1_buffer_V_6_d0,
        k1_buffer_V_7_address0,
        k1_buffer_V_7_ce0,
        k1_buffer_V_7_we0,
        k1_buffer_V_7_d0,
        k1_buffer_V_8_address0,
        k1_buffer_V_8_ce0,
        k1_buffer_V_8_we0,
        k1_buffer_V_8_d0,
        k1_buffer_V_9_address0,
        k1_buffer_V_9_ce0,
        k1_buffer_V_9_we0,
        k1_buffer_V_9_d0,
        k1_buffer_V_10_address0,
        k1_buffer_V_10_ce0,
        k1_buffer_V_10_we0,
        k1_buffer_V_10_d0,
        k1_buffer_V_11_address0,
        k1_buffer_V_11_ce0,
        k1_buffer_V_11_we0,
        k1_buffer_V_11_d0,
        k1_buffer_V_12_address0,
        k1_buffer_V_12_ce0,
        k1_buffer_V_12_we0,
        k1_buffer_V_12_d0,
        k1_buffer_V_13_address0,
        k1_buffer_V_13_ce0,
        k1_buffer_V_13_we0,
        k1_buffer_V_13_d0,
        k1_buffer_V_14_address0,
        k1_buffer_V_14_ce0,
        k1_buffer_V_14_we0,
        k1_buffer_V_14_d0,
        k1_buffer_V_15_address0,
        k1_buffer_V_15_ce0,
        k1_buffer_V_15_we0,
        k1_buffer_V_15_d0,
        k0_1_dout,
        k0_1_empty_n,
        k0_1_read,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_pp0_stage0 = 10'd256;
parameter    ap_ST_fsm_state12 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] ret_V_1_loc_dout;
input   ret_V_1_loc_empty_n;
output   ret_V_1_loc_read;
output  [10:0] k1_buffer_V_0_address0;
output   k1_buffer_V_0_ce0;
output   k1_buffer_V_0_we0;
output  [63:0] k1_buffer_V_0_d0;
output  [10:0] k1_buffer_V_1_address0;
output   k1_buffer_V_1_ce0;
output   k1_buffer_V_1_we0;
output  [63:0] k1_buffer_V_1_d0;
output  [10:0] k1_buffer_V_2_address0;
output   k1_buffer_V_2_ce0;
output   k1_buffer_V_2_we0;
output  [63:0] k1_buffer_V_2_d0;
output  [10:0] k1_buffer_V_3_address0;
output   k1_buffer_V_3_ce0;
output   k1_buffer_V_3_we0;
output  [63:0] k1_buffer_V_3_d0;
output  [10:0] k1_buffer_V_4_address0;
output   k1_buffer_V_4_ce0;
output   k1_buffer_V_4_we0;
output  [63:0] k1_buffer_V_4_d0;
output  [10:0] k1_buffer_V_5_address0;
output   k1_buffer_V_5_ce0;
output   k1_buffer_V_5_we0;
output  [63:0] k1_buffer_V_5_d0;
output  [10:0] k1_buffer_V_6_address0;
output   k1_buffer_V_6_ce0;
output   k1_buffer_V_6_we0;
output  [63:0] k1_buffer_V_6_d0;
output  [10:0] k1_buffer_V_7_address0;
output   k1_buffer_V_7_ce0;
output   k1_buffer_V_7_we0;
output  [63:0] k1_buffer_V_7_d0;
output  [10:0] k1_buffer_V_8_address0;
output   k1_buffer_V_8_ce0;
output   k1_buffer_V_8_we0;
output  [63:0] k1_buffer_V_8_d0;
output  [10:0] k1_buffer_V_9_address0;
output   k1_buffer_V_9_ce0;
output   k1_buffer_V_9_we0;
output  [63:0] k1_buffer_V_9_d0;
output  [10:0] k1_buffer_V_10_address0;
output   k1_buffer_V_10_ce0;
output   k1_buffer_V_10_we0;
output  [63:0] k1_buffer_V_10_d0;
output  [10:0] k1_buffer_V_11_address0;
output   k1_buffer_V_11_ce0;
output   k1_buffer_V_11_we0;
output  [63:0] k1_buffer_V_11_d0;
output  [10:0] k1_buffer_V_12_address0;
output   k1_buffer_V_12_ce0;
output   k1_buffer_V_12_we0;
output  [63:0] k1_buffer_V_12_d0;
output  [10:0] k1_buffer_V_13_address0;
output   k1_buffer_V_13_ce0;
output   k1_buffer_V_13_we0;
output  [63:0] k1_buffer_V_13_d0;
output  [10:0] k1_buffer_V_14_address0;
output   k1_buffer_V_14_ce0;
output   k1_buffer_V_14_we0;
output  [63:0] k1_buffer_V_14_d0;
output  [10:0] k1_buffer_V_15_address0;
output   k1_buffer_V_15_ce0;
output   k1_buffer_V_15_we0;
output  [63:0] k1_buffer_V_15_d0;
input  [63:0] k0_1_dout;
input   k0_1_empty_n;
output   k0_1_read;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [63:0] m_axi_gmem2_AWADDR;
output  [0:0] m_axi_gmem2_AWID;
output  [31:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [0:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [63:0] m_axi_gmem2_WDATA;
output  [7:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [0:0] m_axi_gmem2_WID;
output  [0:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [63:0] m_axi_gmem2_ARADDR;
output  [0:0] m_axi_gmem2_ARID;
output  [31:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [0:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [63:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [0:0] m_axi_gmem2_RID;
input  [0:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [0:0] m_axi_gmem2_BID;
input  [0:0] m_axi_gmem2_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ret_V_1_loc_read;
reg k1_buffer_V_0_ce0;
reg k1_buffer_V_0_we0;
reg k1_buffer_V_1_ce0;
reg k1_buffer_V_1_we0;
reg k1_buffer_V_2_ce0;
reg k1_buffer_V_2_we0;
reg k1_buffer_V_3_ce0;
reg k1_buffer_V_3_we0;
reg k1_buffer_V_4_ce0;
reg k1_buffer_V_4_we0;
reg k1_buffer_V_5_ce0;
reg k1_buffer_V_5_we0;
reg k1_buffer_V_6_ce0;
reg k1_buffer_V_6_we0;
reg k1_buffer_V_7_ce0;
reg k1_buffer_V_7_we0;
reg k1_buffer_V_8_ce0;
reg k1_buffer_V_8_we0;
reg k1_buffer_V_9_ce0;
reg k1_buffer_V_9_we0;
reg k1_buffer_V_10_ce0;
reg k1_buffer_V_10_we0;
reg k1_buffer_V_11_ce0;
reg k1_buffer_V_11_we0;
reg k1_buffer_V_12_ce0;
reg k1_buffer_V_12_we0;
reg k1_buffer_V_13_ce0;
reg k1_buffer_V_13_we0;
reg k1_buffer_V_14_ce0;
reg k1_buffer_V_14_we0;
reg k1_buffer_V_15_ce0;
reg k1_buffer_V_15_we0;
reg k0_1_read;
reg m_axi_gmem2_ARVALID;
reg m_axi_gmem2_RREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ret_V_1_loc_blk_n;
reg    k0_1_blk_n;
reg    gmem2_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem2_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [27:0] i_reg_359;
reg   [27:0] trunc_ln_reg_448;
reg   [60:0] trunc_ln40_2_reg_454;
wire   [27:0] add_ln38_fu_404_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln878_fu_410_p2;
reg   [10:0] lshr_ln_reg_479;
reg   [10:0] lshr_ln_reg_479_pp0_iter1_reg;
wire   [3:0] trunc_ln40_fu_425_p1;
reg   [3:0] trunc_ln40_reg_484;
reg   [3:0] trunc_ln40_reg_484_pp0_iter1_reg;
reg   [63:0] gmem2_addr_read_reg_488;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln40_fu_429_p1;
wire  signed [63:0] sext_ln40_fu_390_p1;
reg    ap_block_state1;
wire    ap_CS_fsm_state12;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_359 <= 28'd0;
    end else if (((icmp_ln878_fu_410_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_359 <= add_ln38_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem2_addr_read_reg_488 <= m_axi_gmem2_RDATA;
        lshr_ln_reg_479_pp0_iter1_reg <= lshr_ln_reg_479;
        trunc_ln40_reg_484_pp0_iter1_reg <= trunc_ln40_reg_484;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_fu_410_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln_reg_479 <= {{i_reg_359[14:4]}};
        trunc_ln40_reg_484 <= trunc_ln40_fu_425_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln40_2_reg_454 <= {{k0_1_dout[63:3]}};
        trunc_ln_reg_448 <= {{ret_V_1_loc_dout[31:4]}};
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_410_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem2_blk_n_AR = m_axi_gmem2_ARREADY;
    end else begin
        gmem2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem2_blk_n_R = m_axi_gmem2_RVALID;
    end else begin
        gmem2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k0_1_blk_n = k0_1_empty_n;
    end else begin
        k0_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (k0_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k0_1_read = 1'b1;
    end else begin
        k0_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_0_ce0 = 1'b1;
    end else begin
        k1_buffer_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_0_we0 = 1'b1;
    end else begin
        k1_buffer_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_10_ce0 = 1'b1;
    end else begin
        k1_buffer_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_10_we0 = 1'b1;
    end else begin
        k1_buffer_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_11_ce0 = 1'b1;
    end else begin
        k1_buffer_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_11_we0 = 1'b1;
    end else begin
        k1_buffer_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_12_ce0 = 1'b1;
    end else begin
        k1_buffer_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_12_we0 = 1'b1;
    end else begin
        k1_buffer_V_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_13_ce0 = 1'b1;
    end else begin
        k1_buffer_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_13_we0 = 1'b1;
    end else begin
        k1_buffer_V_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_14_ce0 = 1'b1;
    end else begin
        k1_buffer_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_14_we0 = 1'b1;
    end else begin
        k1_buffer_V_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_15_ce0 = 1'b1;
    end else begin
        k1_buffer_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_15_we0 = 1'b1;
    end else begin
        k1_buffer_V_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_1_ce0 = 1'b1;
    end else begin
        k1_buffer_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_1_we0 = 1'b1;
    end else begin
        k1_buffer_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_2_ce0 = 1'b1;
    end else begin
        k1_buffer_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_2_we0 = 1'b1;
    end else begin
        k1_buffer_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_3_ce0 = 1'b1;
    end else begin
        k1_buffer_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_3_we0 = 1'b1;
    end else begin
        k1_buffer_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_4_ce0 = 1'b1;
    end else begin
        k1_buffer_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_4_we0 = 1'b1;
    end else begin
        k1_buffer_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_5_ce0 = 1'b1;
    end else begin
        k1_buffer_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_5_we0 = 1'b1;
    end else begin
        k1_buffer_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_6_ce0 = 1'b1;
    end else begin
        k1_buffer_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_6_we0 = 1'b1;
    end else begin
        k1_buffer_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_7_ce0 = 1'b1;
    end else begin
        k1_buffer_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_7_we0 = 1'b1;
    end else begin
        k1_buffer_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_8_ce0 = 1'b1;
    end else begin
        k1_buffer_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_8_we0 = 1'b1;
    end else begin
        k1_buffer_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_9_ce0 = 1'b1;
    end else begin
        k1_buffer_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln40_reg_484_pp0_iter1_reg == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_buffer_V_9_we0 = 1'b1;
    end else begin
        k1_buffer_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem2_ARREADY == 1'b1))) begin
        m_axi_gmem2_ARVALID = 1'b1;
    end else begin
        m_axi_gmem2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem2_RREADY = 1'b1;
    end else begin
        m_axi_gmem2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_V_1_loc_blk_n = ret_V_1_loc_empty_n;
    end else begin
        ret_V_1_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ret_V_1_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (k0_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_V_1_loc_read = 1'b1;
    end else begin
        ret_V_1_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ret_V_1_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (k0_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem2_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln878_fu_410_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln878_fu_410_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln38_fu_404_p2 = (i_reg_359 + 28'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem2_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem2_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ret_V_1_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (k0_1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (m_axi_gmem2_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln878_fu_410_p2 = ((i_reg_359 == trunc_ln_reg_448) ? 1'b1 : 1'b0);

assign k1_buffer_V_0_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_0_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_10_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_10_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_11_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_11_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_12_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_12_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_13_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_13_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_14_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_14_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_15_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_15_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_1_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_1_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_2_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_2_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_3_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_3_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_4_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_4_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_5_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_5_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_6_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_6_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_7_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_7_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_8_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_8_d0 = gmem2_addr_read_reg_488;

assign k1_buffer_V_9_address0 = zext_ln40_fu_429_p1;

assign k1_buffer_V_9_d0 = gmem2_addr_read_reg_488;

assign m_axi_gmem2_ARADDR = sext_ln40_fu_390_p1;

assign m_axi_gmem2_ARBURST = 2'd0;

assign m_axi_gmem2_ARCACHE = 4'd0;

assign m_axi_gmem2_ARID = 1'd0;

assign m_axi_gmem2_ARLEN = trunc_ln_reg_448;

assign m_axi_gmem2_ARLOCK = 2'd0;

assign m_axi_gmem2_ARPROT = 3'd0;

assign m_axi_gmem2_ARQOS = 4'd0;

assign m_axi_gmem2_ARREGION = 4'd0;

assign m_axi_gmem2_ARSIZE = 3'd0;

assign m_axi_gmem2_ARUSER = 1'd0;

assign m_axi_gmem2_AWADDR = 64'd0;

assign m_axi_gmem2_AWBURST = 2'd0;

assign m_axi_gmem2_AWCACHE = 4'd0;

assign m_axi_gmem2_AWID = 1'd0;

assign m_axi_gmem2_AWLEN = 32'd0;

assign m_axi_gmem2_AWLOCK = 2'd0;

assign m_axi_gmem2_AWPROT = 3'd0;

assign m_axi_gmem2_AWQOS = 4'd0;

assign m_axi_gmem2_AWREGION = 4'd0;

assign m_axi_gmem2_AWSIZE = 3'd0;

assign m_axi_gmem2_AWUSER = 1'd0;

assign m_axi_gmem2_AWVALID = 1'b0;

assign m_axi_gmem2_BREADY = 1'b0;

assign m_axi_gmem2_WDATA = 64'd0;

assign m_axi_gmem2_WID = 1'd0;

assign m_axi_gmem2_WLAST = 1'b0;

assign m_axi_gmem2_WSTRB = 8'd0;

assign m_axi_gmem2_WUSER = 1'd0;

assign m_axi_gmem2_WVALID = 1'b0;

assign sext_ln40_fu_390_p1 = $signed(trunc_ln40_2_reg_454);

assign trunc_ln40_fu_425_p1 = i_reg_359[3:0];

assign zext_ln40_fu_429_p1 = lshr_ln_reg_479_pp0_iter1_reg;

endmodule //top_Loop_VITIS_LOOP_38_1_proc
