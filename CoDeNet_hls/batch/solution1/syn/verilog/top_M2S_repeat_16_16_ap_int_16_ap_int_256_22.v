// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_M2S_repeat_16_16_ap_int_16_ap_int_256_22 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_bias_din,
        s_bias_full_n,
        s_bias_write,
        bias_buffer1_V_0_address0,
        bias_buffer1_V_0_ce0,
        bias_buffer1_V_0_q0,
        bias_buffer1_V_0_address1,
        bias_buffer1_V_0_ce1,
        bias_buffer1_V_0_q1,
        bias_buffer1_V_1_address0,
        bias_buffer1_V_1_ce0,
        bias_buffer1_V_1_q0,
        bias_buffer1_V_1_address1,
        bias_buffer1_V_1_ce1,
        bias_buffer1_V_1_q1,
        bias_buffer1_V_2_address0,
        bias_buffer1_V_2_ce0,
        bias_buffer1_V_2_q0,
        bias_buffer1_V_2_address1,
        bias_buffer1_V_2_ce1,
        bias_buffer1_V_2_q1,
        bias_buffer1_V_3_address0,
        bias_buffer1_V_3_ce0,
        bias_buffer1_V_3_q0,
        bias_buffer1_V_3_address1,
        bias_buffer1_V_3_ce1,
        bias_buffer1_V_3_q1,
        bias_buffer1_V_4_address0,
        bias_buffer1_V_4_ce0,
        bias_buffer1_V_4_q0,
        bias_buffer1_V_4_address1,
        bias_buffer1_V_4_ce1,
        bias_buffer1_V_4_q1,
        bias_buffer1_V_5_address0,
        bias_buffer1_V_5_ce0,
        bias_buffer1_V_5_q0,
        bias_buffer1_V_5_address1,
        bias_buffer1_V_5_ce1,
        bias_buffer1_V_5_q1,
        bias_buffer1_V_6_address0,
        bias_buffer1_V_6_ce0,
        bias_buffer1_V_6_q0,
        bias_buffer1_V_6_address1,
        bias_buffer1_V_6_ce1,
        bias_buffer1_V_6_q1,
        bias_buffer1_V_7_address0,
        bias_buffer1_V_7_ce0,
        bias_buffer1_V_7_q0,
        bias_buffer1_V_7_address1,
        bias_buffer1_V_7_ce1,
        bias_buffer1_V_7_q1,
        mul_ln31_1_loc_dout,
        mul_ln31_1_loc_empty_n,
        mul_ln31_1_loc_read,
        ret_V_cast_loc_dout,
        ret_V_cast_loc_empty_n,
        ret_V_cast_loc_read,
        skip1_dout,
        skip1_empty_n,
        skip1_read
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_pp0_stage0 = 9'd64;
parameter    ap_ST_fsm_pp0_stage1 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [255:0] s_bias_din;
input   s_bias_full_n;
output   s_bias_write;
output  [6:0] bias_buffer1_V_0_address0;
output   bias_buffer1_V_0_ce0;
input  [15:0] bias_buffer1_V_0_q0;
output  [6:0] bias_buffer1_V_0_address1;
output   bias_buffer1_V_0_ce1;
input  [15:0] bias_buffer1_V_0_q1;
output  [6:0] bias_buffer1_V_1_address0;
output   bias_buffer1_V_1_ce0;
input  [15:0] bias_buffer1_V_1_q0;
output  [6:0] bias_buffer1_V_1_address1;
output   bias_buffer1_V_1_ce1;
input  [15:0] bias_buffer1_V_1_q1;
output  [6:0] bias_buffer1_V_2_address0;
output   bias_buffer1_V_2_ce0;
input  [15:0] bias_buffer1_V_2_q0;
output  [6:0] bias_buffer1_V_2_address1;
output   bias_buffer1_V_2_ce1;
input  [15:0] bias_buffer1_V_2_q1;
output  [6:0] bias_buffer1_V_3_address0;
output   bias_buffer1_V_3_ce0;
input  [15:0] bias_buffer1_V_3_q0;
output  [6:0] bias_buffer1_V_3_address1;
output   bias_buffer1_V_3_ce1;
input  [15:0] bias_buffer1_V_3_q1;
output  [6:0] bias_buffer1_V_4_address0;
output   bias_buffer1_V_4_ce0;
input  [15:0] bias_buffer1_V_4_q0;
output  [6:0] bias_buffer1_V_4_address1;
output   bias_buffer1_V_4_ce1;
input  [15:0] bias_buffer1_V_4_q1;
output  [6:0] bias_buffer1_V_5_address0;
output   bias_buffer1_V_5_ce0;
input  [15:0] bias_buffer1_V_5_q0;
output  [6:0] bias_buffer1_V_5_address1;
output   bias_buffer1_V_5_ce1;
input  [15:0] bias_buffer1_V_5_q1;
output  [6:0] bias_buffer1_V_6_address0;
output   bias_buffer1_V_6_ce0;
input  [15:0] bias_buffer1_V_6_q0;
output  [6:0] bias_buffer1_V_6_address1;
output   bias_buffer1_V_6_ce1;
input  [15:0] bias_buffer1_V_6_q1;
output  [6:0] bias_buffer1_V_7_address0;
output   bias_buffer1_V_7_ce0;
input  [15:0] bias_buffer1_V_7_q0;
output  [6:0] bias_buffer1_V_7_address1;
output   bias_buffer1_V_7_ce1;
input  [15:0] bias_buffer1_V_7_q1;
input  [31:0] mul_ln31_1_loc_dout;
input   mul_ln31_1_loc_empty_n;
output   mul_ln31_1_loc_read;
input  [11:0] ret_V_cast_loc_dout;
input   ret_V_cast_loc_empty_n;
output   ret_V_cast_loc_read;
input  [0:0] skip1_dout;
input   skip1_empty_n;
output   skip1_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_bias_write;
reg bias_buffer1_V_0_ce0;
reg bias_buffer1_V_0_ce1;
reg bias_buffer1_V_1_ce0;
reg bias_buffer1_V_1_ce1;
reg bias_buffer1_V_2_ce0;
reg bias_buffer1_V_2_ce1;
reg bias_buffer1_V_3_ce0;
reg bias_buffer1_V_3_ce1;
reg bias_buffer1_V_4_ce0;
reg bias_buffer1_V_4_ce1;
reg bias_buffer1_V_5_ce0;
reg bias_buffer1_V_5_ce1;
reg bias_buffer1_V_6_ce0;
reg bias_buffer1_V_6_ce1;
reg bias_buffer1_V_7_ce0;
reg bias_buffer1_V_7_ce1;
reg mul_ln31_1_loc_read;
reg ret_V_cast_loc_read;
reg skip1_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    s_bias_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln35_reg_825;
reg   [0:0] icmp_ln35_reg_825_pp0_iter1_reg;
reg    mul_ln31_1_loc_blk_n;
reg    ret_V_cast_loc_blk_n;
reg    skip1_blk_n;
reg   [43:0] indvar_flatten_reg_309;
reg   [11:0] i_reg_320;
reg   [11:0] OCIC_reg_794;
wire   [31:0] REP_fu_331_p3;
reg   [31:0] REP_reg_800;
wire    ap_CS_fsm_state2;
wire   [43:0] grp_fu_345_p2;
reg   [43:0] mul_ln32_reg_815;
wire    ap_CS_fsm_state6;
wire   [43:0] add_ln35_fu_351_p2;
reg   [43:0] add_ln35_reg_820;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln35_fu_357_p2;
wire   [11:0] select_ln35_fu_367_p3;
reg   [11:0] select_ln35_reg_829;
wire   [5:0] trunc_ln215_fu_375_p1;
reg   [5:0] trunc_ln215_reg_834;
wire    ap_block_state8_pp0_stage1_iter0;
reg    ap_block_state10_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [11:0] add_ln36_fu_416_p2;
reg   [11:0] add_ln36_reg_919;
reg   [15:0] bias_buffer1_V_0_load_reg_924;
reg   [15:0] bias_buffer1_V_1_load_reg_929;
reg   [15:0] bias_buffer1_V_2_load_reg_934;
reg   [15:0] bias_buffer1_V_3_load_reg_939;
reg   [15:0] bias_buffer1_V_4_load_reg_944;
reg   [15:0] bias_buffer1_V_5_load_reg_949;
reg   [15:0] bias_buffer1_V_6_load_reg_954;
reg   [15:0] bias_buffer1_V_7_load_reg_959;
reg   [15:0] bias_buffer1_V_0_load_1_reg_964;
reg   [15:0] bias_buffer1_V_1_load_1_reg_969;
reg   [15:0] bias_buffer1_V_2_load_1_reg_974;
reg   [15:0] bias_buffer1_V_3_load_1_reg_979;
reg   [15:0] bias_buffer1_V_4_load_1_reg_984;
reg   [15:0] bias_buffer1_V_5_load_1_reg_989;
reg   [15:0] bias_buffer1_V_6_load_1_reg_994;
reg   [15:0] bias_buffer1_V_7_load_1_reg_999;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_block_pp0_stage1_subdone;
reg   [43:0] ap_phi_mux_indvar_flatten_phi_fu_313_p4;
wire    ap_block_pp0_stage0;
reg   [11:0] ap_phi_mux_i_phi_fu_324_p4;
wire   [63:0] zext_ln215_fu_386_p1;
wire   [63:0] zext_ln215_2_fu_404_p1;
reg    ap_block_state1;
reg    ap_block_pp0_stage1_01001;
wire   [31:0] grp_fu_345_p0;
wire   [11:0] grp_fu_345_p1;
wire   [0:0] icmp_ln36_fu_362_p2;
wire   [6:0] shl_ln_fu_379_p3;
wire   [6:0] or_ln215_fu_398_p2;
wire   [15:0] tmp_95_fu_736_p10;
wire   [15:0] tmp_94_fu_715_p10;
wire   [15:0] tmp_93_fu_694_p10;
wire   [15:0] tmp_92_fu_673_p10;
wire   [15:0] tmp_91_fu_652_p10;
wire   [15:0] tmp_90_fu_631_p10;
wire   [15:0] tmp_89_fu_610_p10;
wire   [15:0] tmp_88_fu_589_p10;
wire   [15:0] tmp_87_fu_568_p10;
wire   [15:0] tmp_86_fu_547_p10;
wire   [15:0] tmp_85_fu_526_p10;
wire   [15:0] tmp_84_fu_505_p10;
wire   [15:0] tmp_83_fu_484_p10;
wire   [15:0] tmp_82_fu_463_p10;
wire   [15:0] tmp_s_fu_442_p10;
wire   [15:0] tmp_fu_421_p10;
wire    ap_CS_fsm_state11;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [43:0] grp_fu_345_p00;
wire   [43:0] grp_fu_345_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

top_mul_32ns_12ns_44_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 44 ))
mul_32ns_12ns_44_5_1_U170(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_345_p0),
    .din1(grp_fu_345_p1),
    .ce(1'b1),
    .dout(grp_fu_345_p2)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U171(
    .din0(bias_buffer1_V_0_load_reg_924),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_fu_421_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U172(
    .din0(bias_buffer1_V_1_load_reg_929),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_s_fu_442_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U173(
    .din0(bias_buffer1_V_2_load_reg_934),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_82_fu_463_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U174(
    .din0(bias_buffer1_V_3_load_reg_939),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_83_fu_484_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U175(
    .din0(bias_buffer1_V_4_load_reg_944),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_84_fu_505_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U176(
    .din0(bias_buffer1_V_5_load_reg_949),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_85_fu_526_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U177(
    .din0(bias_buffer1_V_6_load_reg_954),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_86_fu_547_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U178(
    .din0(bias_buffer1_V_7_load_reg_959),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_87_fu_568_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U179(
    .din0(bias_buffer1_V_0_load_1_reg_964),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_88_fu_589_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U180(
    .din0(bias_buffer1_V_1_load_1_reg_969),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_89_fu_610_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U181(
    .din0(bias_buffer1_V_2_load_1_reg_974),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_90_fu_631_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U182(
    .din0(bias_buffer1_V_3_load_1_reg_979),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_91_fu_652_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U183(
    .din0(bias_buffer1_V_4_load_1_reg_984),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_92_fu_673_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U184(
    .din0(bias_buffer1_V_5_load_1_reg_989),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_93_fu_694_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U185(
    .din0(bias_buffer1_V_6_load_1_reg_994),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_94_fu_715_p10)
);

top_mux_864_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_864_16_1_1_U186(
    .din0(bias_buffer1_V_7_load_1_reg_999),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(64'd0),
    .dout(tmp_95_fu_736_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_320 <= add_ln36_reg_919;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_320 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_309 <= add_ln35_reg_820;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_309 <= 44'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        OCIC_reg_794 <= ret_V_cast_loc_dout;
        REP_reg_800 <= REP_fu_331_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln35_reg_820 <= add_ln35_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln35_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln36_reg_919 <= add_ln36_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        bias_buffer1_V_0_load_1_reg_964 <= bias_buffer1_V_0_q0;
        bias_buffer1_V_0_load_reg_924 <= bias_buffer1_V_0_q1;
        bias_buffer1_V_1_load_1_reg_969 <= bias_buffer1_V_1_q0;
        bias_buffer1_V_1_load_reg_929 <= bias_buffer1_V_1_q1;
        bias_buffer1_V_2_load_1_reg_974 <= bias_buffer1_V_2_q0;
        bias_buffer1_V_2_load_reg_934 <= bias_buffer1_V_2_q1;
        bias_buffer1_V_3_load_1_reg_979 <= bias_buffer1_V_3_q0;
        bias_buffer1_V_3_load_reg_939 <= bias_buffer1_V_3_q1;
        bias_buffer1_V_4_load_1_reg_984 <= bias_buffer1_V_4_q0;
        bias_buffer1_V_4_load_reg_944 <= bias_buffer1_V_4_q1;
        bias_buffer1_V_5_load_1_reg_989 <= bias_buffer1_V_5_q0;
        bias_buffer1_V_5_load_reg_949 <= bias_buffer1_V_5_q1;
        bias_buffer1_V_6_load_1_reg_994 <= bias_buffer1_V_6_q0;
        bias_buffer1_V_6_load_reg_954 <= bias_buffer1_V_6_q1;
        bias_buffer1_V_7_load_1_reg_999 <= bias_buffer1_V_7_q0;
        bias_buffer1_V_7_load_reg_959 <= bias_buffer1_V_7_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln35_reg_825 <= icmp_ln35_fu_357_p2;
        icmp_ln35_reg_825_pp0_iter1_reg <= icmp_ln35_reg_825;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln32_reg_815 <= grp_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_357_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln35_reg_829 <= select_ln35_fu_367_p3;
        trunc_ln215_reg_834 <= trunc_ln215_fu_375_p1;
    end
end

always @ (*) begin
    if ((icmp_ln35_fu_357_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_324_p4 = add_ln36_reg_919;
    end else begin
        ap_phi_mux_i_phi_fu_324_p4 = i_reg_320;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_313_p4 = add_ln35_reg_820;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_313_p4 = indvar_flatten_reg_309;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_0_ce0 = 1'b1;
    end else begin
        bias_buffer1_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_0_ce1 = 1'b1;
    end else begin
        bias_buffer1_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_1_ce0 = 1'b1;
    end else begin
        bias_buffer1_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_1_ce1 = 1'b1;
    end else begin
        bias_buffer1_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_2_ce0 = 1'b1;
    end else begin
        bias_buffer1_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_2_ce1 = 1'b1;
    end else begin
        bias_buffer1_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_3_ce0 = 1'b1;
    end else begin
        bias_buffer1_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_3_ce1 = 1'b1;
    end else begin
        bias_buffer1_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_4_ce0 = 1'b1;
    end else begin
        bias_buffer1_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_4_ce1 = 1'b1;
    end else begin
        bias_buffer1_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_5_ce0 = 1'b1;
    end else begin
        bias_buffer1_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_5_ce1 = 1'b1;
    end else begin
        bias_buffer1_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_6_ce0 = 1'b1;
    end else begin
        bias_buffer1_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_6_ce1 = 1'b1;
    end else begin
        bias_buffer1_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_7_ce0 = 1'b1;
    end else begin
        bias_buffer1_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_buffer1_V_7_ce1 = 1'b1;
    end else begin
        bias_buffer1_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln31_1_loc_blk_n = mul_ln31_1_loc_empty_n;
    end else begin
        mul_ln31_1_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_empty_n == 1'b0) | (ret_V_cast_loc_empty_n == 1'b0) | (mul_ln31_1_loc_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln31_1_loc_read = 1'b1;
    end else begin
        mul_ln31_1_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_V_cast_loc_blk_n = ret_V_cast_loc_empty_n;
    end else begin
        ret_V_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_empty_n == 1'b0) | (ret_V_cast_loc_empty_n == 1'b0) | (mul_ln31_1_loc_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_V_cast_loc_read = 1'b1;
    end else begin
        ret_V_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln35_reg_825_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        s_bias_blk_n = s_bias_full_n;
    end else begin
        s_bias_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln35_reg_825_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        s_bias_write = 1'b1;
    end else begin
        s_bias_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_blk_n = skip1_empty_n;
    end else begin
        skip1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_empty_n == 1'b0) | (ret_V_cast_loc_empty_n == 1'b0) | (mul_ln31_1_loc_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        skip1_read = 1'b1;
    end else begin
        skip1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_empty_n == 1'b0) | (ret_V_cast_loc_empty_n == 1'b0) | (mul_ln31_1_loc_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln35_fu_357_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln35_fu_357_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign REP_fu_331_p3 = ((skip1_dout[0:0] == 1'b1) ? 32'd0 : mul_ln31_1_loc_dout);

assign add_ln35_fu_351_p2 = (ap_phi_mux_indvar_flatten_phi_fu_313_p4 + 44'd1);

assign add_ln36_fu_416_p2 = (select_ln35_reg_829 + 12'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((s_bias_full_n == 1'b0) & (icmp_ln35_reg_825_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((s_bias_full_n == 1'b0) & (icmp_ln35_reg_825_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((s_bias_full_n == 1'b0) & (icmp_ln35_reg_825_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (skip1_empty_n == 1'b0) | (ret_V_cast_loc_empty_n == 1'b0) | (mul_ln31_1_loc_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter1 = ((s_bias_full_n == 1'b0) & (icmp_ln35_reg_825_pp0_iter1_reg == 1'd0));
end

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bias_buffer1_V_0_address0 = zext_ln215_2_fu_404_p1;

assign bias_buffer1_V_0_address1 = zext_ln215_fu_386_p1;

assign bias_buffer1_V_1_address0 = zext_ln215_2_fu_404_p1;

assign bias_buffer1_V_1_address1 = zext_ln215_fu_386_p1;

assign bias_buffer1_V_2_address0 = zext_ln215_2_fu_404_p1;

assign bias_buffer1_V_2_address1 = zext_ln215_fu_386_p1;

assign bias_buffer1_V_3_address0 = zext_ln215_2_fu_404_p1;

assign bias_buffer1_V_3_address1 = zext_ln215_fu_386_p1;

assign bias_buffer1_V_4_address0 = zext_ln215_2_fu_404_p1;

assign bias_buffer1_V_4_address1 = zext_ln215_fu_386_p1;

assign bias_buffer1_V_5_address0 = zext_ln215_2_fu_404_p1;

assign bias_buffer1_V_5_address1 = zext_ln215_fu_386_p1;

assign bias_buffer1_V_6_address0 = zext_ln215_2_fu_404_p1;

assign bias_buffer1_V_6_address1 = zext_ln215_fu_386_p1;

assign bias_buffer1_V_7_address0 = zext_ln215_2_fu_404_p1;

assign bias_buffer1_V_7_address1 = zext_ln215_fu_386_p1;

assign grp_fu_345_p0 = grp_fu_345_p00;

assign grp_fu_345_p00 = REP_reg_800;

assign grp_fu_345_p1 = grp_fu_345_p10;

assign grp_fu_345_p10 = OCIC_reg_794;

assign icmp_ln35_fu_357_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_313_p4 == mul_ln32_reg_815) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_362_p2 = ((ap_phi_mux_i_phi_fu_324_p4 == OCIC_reg_794) ? 1'b1 : 1'b0);

assign or_ln215_fu_398_p2 = (shl_ln_fu_379_p3 | 7'd1);

assign s_bias_din = {{{{{{{{{{{{{{{{tmp_95_fu_736_p10}, {tmp_94_fu_715_p10}}, {tmp_93_fu_694_p10}}, {tmp_92_fu_673_p10}}, {tmp_91_fu_652_p10}}, {tmp_90_fu_631_p10}}, {tmp_89_fu_610_p10}}, {tmp_88_fu_589_p10}}, {tmp_87_fu_568_p10}}, {tmp_86_fu_547_p10}}, {tmp_85_fu_526_p10}}, {tmp_84_fu_505_p10}}, {tmp_83_fu_484_p10}}, {tmp_82_fu_463_p10}}, {tmp_s_fu_442_p10}}, {tmp_fu_421_p10}};

assign select_ln35_fu_367_p3 = ((icmp_ln36_fu_362_p2[0:0] == 1'b1) ? 12'd0 : ap_phi_mux_i_phi_fu_324_p4);

assign shl_ln_fu_379_p3 = {{trunc_ln215_reg_834}, {1'd0}};

assign trunc_ln215_fu_375_p1 = select_ln35_fu_367_p3[5:0];

assign zext_ln215_2_fu_404_p1 = or_ln215_fu_398_p2;

assign zext_ln215_fu_386_p1 = shl_ln_fu_379_p3;

endmodule //top_M2S_repeat_16_16_ap_int_16_ap_int_256_22
