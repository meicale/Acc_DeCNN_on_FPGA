-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_PackReadBuffer_ap_int_16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem4_AWVALID : OUT STD_LOGIC;
    m_axi_gmem4_AWREADY : IN STD_LOGIC;
    m_axi_gmem4_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_WVALID : OUT STD_LOGIC;
    m_axi_gmem4_WREADY : IN STD_LOGIC;
    m_axi_gmem4_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem4_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_WLAST : OUT STD_LOGIC;
    m_axi_gmem4_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_ARVALID : OUT STD_LOGIC;
    m_axi_gmem4_ARREADY : IN STD_LOGIC;
    m_axi_gmem4_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_RVALID : IN STD_LOGIC;
    m_axi_gmem4_RREADY : OUT STD_LOGIC;
    m_axi_gmem4_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem4_RLAST : IN STD_LOGIC;
    m_axi_gmem4_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BVALID : IN STD_LOGIC;
    m_axi_gmem4_BREADY : OUT STD_LOGIC;
    m_axi_gmem4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mem_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    mem_empty_n : IN STD_LOGIC;
    mem_read : OUT STD_LOGIC;
    scale1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale1_ce0 : OUT STD_LOGIC;
    scale1_we0 : OUT STD_LOGIC;
    scale1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale11_ce0 : OUT STD_LOGIC;
    scale11_we0 : OUT STD_LOGIC;
    scale11_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale12_ce0 : OUT STD_LOGIC;
    scale12_we0 : OUT STD_LOGIC;
    scale12_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale13_ce0 : OUT STD_LOGIC;
    scale13_we0 : OUT STD_LOGIC;
    scale13_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale14_ce0 : OUT STD_LOGIC;
    scale14_we0 : OUT STD_LOGIC;
    scale14_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale15_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale15_ce0 : OUT STD_LOGIC;
    scale15_we0 : OUT STD_LOGIC;
    scale15_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale16_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale16_ce0 : OUT STD_LOGIC;
    scale16_we0 : OUT STD_LOGIC;
    scale16_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale17_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale17_ce0 : OUT STD_LOGIC;
    scale17_we0 : OUT STD_LOGIC;
    scale17_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias1_ce0 : OUT STD_LOGIC;
    bias1_we0 : OUT STD_LOGIC;
    bias1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias18_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias18_ce0 : OUT STD_LOGIC;
    bias18_we0 : OUT STD_LOGIC;
    bias18_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias19_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias19_ce0 : OUT STD_LOGIC;
    bias19_we0 : OUT STD_LOGIC;
    bias19_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias110_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias110_ce0 : OUT STD_LOGIC;
    bias110_we0 : OUT STD_LOGIC;
    bias110_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias111_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias111_ce0 : OUT STD_LOGIC;
    bias111_we0 : OUT STD_LOGIC;
    bias111_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias112_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias112_ce0 : OUT STD_LOGIC;
    bias112_we0 : OUT STD_LOGIC;
    bias112_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias113_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias113_ce0 : OUT STD_LOGIC;
    bias113_we0 : OUT STD_LOGIC;
    bias113_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias114_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias114_ce0 : OUT STD_LOGIC;
    bias114_we0 : OUT STD_LOGIC;
    bias114_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale3_ce0 : OUT STD_LOGIC;
    scale3_we0 : OUT STD_LOGIC;
    scale3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale315_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale315_ce0 : OUT STD_LOGIC;
    scale315_we0 : OUT STD_LOGIC;
    scale315_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale316_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale316_ce0 : OUT STD_LOGIC;
    scale316_we0 : OUT STD_LOGIC;
    scale316_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale317_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale317_ce0 : OUT STD_LOGIC;
    scale317_we0 : OUT STD_LOGIC;
    scale317_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale318_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale318_ce0 : OUT STD_LOGIC;
    scale318_we0 : OUT STD_LOGIC;
    scale318_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale319_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale319_ce0 : OUT STD_LOGIC;
    scale319_we0 : OUT STD_LOGIC;
    scale319_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale320_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale320_ce0 : OUT STD_LOGIC;
    scale320_we0 : OUT STD_LOGIC;
    scale320_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    scale321_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    scale321_ce0 : OUT STD_LOGIC;
    scale321_we0 : OUT STD_LOGIC;
    scale321_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias3_ce0 : OUT STD_LOGIC;
    bias3_we0 : OUT STD_LOGIC;
    bias3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias322_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias322_ce0 : OUT STD_LOGIC;
    bias322_we0 : OUT STD_LOGIC;
    bias322_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias323_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias323_ce0 : OUT STD_LOGIC;
    bias323_we0 : OUT STD_LOGIC;
    bias323_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias324_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias324_ce0 : OUT STD_LOGIC;
    bias324_we0 : OUT STD_LOGIC;
    bias324_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias325_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias325_ce0 : OUT STD_LOGIC;
    bias325_we0 : OUT STD_LOGIC;
    bias325_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias326_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias326_ce0 : OUT STD_LOGIC;
    bias326_we0 : OUT STD_LOGIC;
    bias326_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias327_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias327_ce0 : OUT STD_LOGIC;
    bias327_we0 : OUT STD_LOGIC;
    bias327_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias328_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias328_ce0 : OUT STD_LOGIC;
    bias328_we0 : OUT STD_LOGIC;
    bias328_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OC_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    OC_empty_n : IN STD_LOGIC;
    OC_read : OUT STD_LOGIC;
    skip3_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    skip3_empty_n : IN STD_LOGIC;
    skip3_read : OUT STD_LOGIC;
    skip1_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    skip1_empty_n : IN STD_LOGIC;
    skip1_read : OUT STD_LOGIC;
    skip1_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    skip1_out_full_n : IN STD_LOGIC;
    skip1_out_write : OUT STD_LOGIC;
    skip1_out1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    skip1_out1_full_n : IN STD_LOGIC;
    skip1_out1_write : OUT STD_LOGIC );
end;


architecture behav of top_PackReadBuffer_ap_int_16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem4_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem4_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal mem_blk_n : STD_LOGIC;
    signal OC_blk_n : STD_LOGIC;
    signal skip3_blk_n : STD_LOGIC;
    signal skip1_blk_n : STD_LOGIC;
    signal skip1_out_blk_n : STD_LOGIC;
    signal skip1_out1_blk_n : STD_LOGIC;
    signal count_4_reg_668 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_679 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_702 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_713 : STD_LOGIC_VECTOR (30 downto 0);
    signal mem_1_reg_1029 : STD_LOGIC_VECTOR (63 downto 0);
    signal OC_1_reg_1037 : STD_LOGIC_VECTOR (31 downto 0);
    signal skip3_3_reg_1043 : STD_LOGIC_VECTOR (0 downto 0);
    signal skip1_2_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal rep3_fu_724_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rep3_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal rep1_fu_730_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rep1_reg_1062 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln10_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln10_2_fu_762_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln10_2_reg_1080 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln12_fu_765_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_1_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln12_fu_776_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln12_reg_1095 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln12_reg_1095_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_1099 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln_reg_1099_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem4_addr_read_reg_1104 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_947_fu_801_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_947_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal gmem4_addr_1_reg_1121 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln14_fu_835_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln14_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln16_fu_846_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_reg_1136 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln16_reg_1136_pp1_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln1_reg_1140 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln1_reg_1140_pp1_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem4_addr_1_read_reg_1145 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln18_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal gmem4_addr_2_reg_1161 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_951_fu_913_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_951_reg_1167 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal add_ln18_fu_916_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state32_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln18_1_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln20_fu_927_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln20_reg_1182 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln20_reg_1182_pp2_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln2_reg_1186 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln2_reg_1186_pp2_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem4_addr_2_read_reg_1191 : STD_LOGIC_VECTOR (15 downto 0);
    signal count_3_fu_952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_3_reg_1203 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal gmem4_addr_3_reg_1208 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln23_fu_993_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state44_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state45_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state46_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln23_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln25_fu_1004_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln25_reg_1223 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln25_reg_1223_pp3_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln3_reg_1227 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln3_reg_1227_pp3_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem4_addr_3_read_reg_1232 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state32 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state44 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_count_phi_fu_694_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln12_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_fu_860_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_1018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln10_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_fu_983_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln10_1_fu_742_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_cast73_i_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_948_fu_810_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_815_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_11_fu_876_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast_i_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_952_fu_888_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_893_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_12_fu_957_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast74_i_fu_964_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_955_fu_968_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_973_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state32);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state44) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state44)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state44);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count_4_reg_668_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                count_4_reg_668 <= ap_const_lv31_0;
            elsif (((icmp_ln10_1_fu_771_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                count_4_reg_668 <= add_ln12_fu_765_p2;
            end if; 
        end if;
    end process;

    count_reg_690_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1070 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                                count_reg_690(31 downto 1) <= empty_947_reg_1116(31 downto 1);
            elsif (((icmp_ln10_fu_736_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                count_reg_690(1) <= '0';
                count_reg_690(2) <= '0';
                count_reg_690(3) <= '0';
                count_reg_690(4) <= '0';
                count_reg_690(5) <= '0';
                count_reg_690(6) <= '0';
                count_reg_690(7) <= '0';
                count_reg_690(8) <= '0';
                count_reg_690(9) <= '0';
                count_reg_690(10) <= '0';
                count_reg_690(11) <= '0';
                count_reg_690(12) <= '0';
                count_reg_690(13) <= '0';
                count_reg_690(14) <= '0';
                count_reg_690(15) <= '0';
                count_reg_690(16) <= '0';
                count_reg_690(17) <= '0';
                count_reg_690(18) <= '0';
                count_reg_690(19) <= '0';
                count_reg_690(20) <= '0';
                count_reg_690(21) <= '0';
                count_reg_690(22) <= '0';
                count_reg_690(23) <= '0';
                count_reg_690(24) <= '0';
                count_reg_690(25) <= '0';
                count_reg_690(26) <= '0';
                count_reg_690(27) <= '0';
                count_reg_690(28) <= '0';
                count_reg_690(29) <= '0';
                count_reg_690(30) <= '0';
                count_reg_690(31) <= '0';
            end if; 
        end if;
    end process;

    i_1_reg_679_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_1_reg_679 <= ap_const_lv31_0;
            elsif (((icmp_ln14_fu_841_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_1_reg_679 <= add_ln14_fu_835_p2;
            end if; 
        end if;
    end process;

    i_2_reg_702_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_2_reg_702 <= ap_const_lv31_0;
            elsif (((icmp_ln18_1_fu_922_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_2_reg_702 <= add_ln18_fu_916_p2;
            end if; 
        end if;
    end process;

    i_3_reg_713_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i_3_reg_713 <= ap_const_lv31_0;
            elsif (((icmp_ln23_fu_999_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_3_reg_713 <= add_ln23_fu_993_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                OC_1_reg_1037 <= OC_dout;
                mem_1_reg_1029 <= mem_dout;
                skip1_2_reg_1048 <= skip1_dout;
                skip3_3_reg_1043 <= skip3_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                count_3_reg_1203 <= count_3_fu_952_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    empty_947_reg_1116(31 downto 1) <= empty_947_fu_801_p2(31 downto 1);
                gmem4_addr_1_reg_1121 <= sext_ln14_fu_825_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                empty_951_reg_1167 <= empty_951_fu_913_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                gmem4_addr_1_read_reg_1145 <= m_axi_gmem4_RDATA;
                lshr_ln1_reg_1140_pp1_iter1_reg <= lshr_ln1_reg_1140;
                trunc_ln16_reg_1136_pp1_iter1_reg <= trunc_ln16_reg_1136;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                gmem4_addr_2_read_reg_1191 <= m_axi_gmem4_RDATA;
                lshr_ln2_reg_1186_pp2_iter1_reg <= lshr_ln2_reg_1186;
                trunc_ln20_reg_1182_pp2_iter1_reg <= trunc_ln20_reg_1182;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_871_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                gmem4_addr_2_reg_1161 <= sext_ln18_fu_903_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                gmem4_addr_3_read_reg_1232 <= m_axi_gmem4_RDATA;
                lshr_ln3_reg_1227_pp3_iter1_reg <= lshr_ln3_reg_1227;
                trunc_ln25_reg_1223_pp3_iter1_reg <= trunc_ln25_reg_1223;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                gmem4_addr_3_reg_1208 <= sext_ln23_fu_983_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem4_addr_read_reg_1104 <= m_axi_gmem4_RDATA;
                lshr_ln_reg_1099_pp0_iter1_reg <= lshr_ln_reg_1099;
                trunc_ln12_reg_1095_pp0_iter1_reg <= trunc_ln12_reg_1095;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln10_reg_1070 <= icmp_ln10_fu_736_p2;
                rep1_reg_1062 <= rep1_fu_730_p3;
                rep3_reg_1053 <= rep3_fu_724_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_841_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                lshr_ln1_reg_1140 <= i_1_reg_679(9 downto 3);
                trunc_ln16_reg_1136 <= trunc_ln16_fu_846_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_1_fu_922_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                lshr_ln2_reg_1186 <= i_2_reg_702(9 downto 3);
                trunc_ln20_reg_1182 <= trunc_ln20_fu_927_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_999_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                lshr_ln3_reg_1227 <= i_3_reg_713(9 downto 3);
                trunc_ln25_reg_1223 <= trunc_ln25_fu_1004_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_1_fu_771_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln_reg_1099 <= count_4_reg_668(9 downto 3);
                trunc_ln12_reg_1095 <= trunc_ln12_fu_776_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln10_2_reg_1080 <= trunc_ln10_2_fu_762_p1;
            end if;
        end if;
    end process;
    empty_947_reg_1116(0) <= '0';
    count_reg_690(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem4_ARREADY, mem_empty_n, OC_empty_n, skip3_empty_n, skip1_empty_n, skip1_out_full_n, skip1_out1_full_n, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_CS_fsm_state14, ap_enable_reg_pp1_iter1, ap_CS_fsm_state25, ap_enable_reg_pp2_iter1, ap_CS_fsm_state37, ap_enable_reg_pp3_iter1, ap_CS_fsm_state2, icmp_ln10_fu_736_p2, ap_enable_reg_pp0_iter0, icmp_ln10_1_fu_771_p2, ap_enable_reg_pp1_iter0, icmp_ln14_fu_841_p2, icmp_ln18_fu_871_p2, ap_CS_fsm_state24, ap_enable_reg_pp2_iter0, icmp_ln18_1_fu_922_p2, ap_enable_reg_pp3_iter0, icmp_ln23_fu_999_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out1_full_n = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = OC_empty_n) or (mem_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_736_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_1_fu_771_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln10_1_fu_771_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln14_fu_841_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((icmp_ln14_fu_841_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln18_fu_871_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln18_1_fu_922_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((icmp_ln18_1_fu_922_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((icmp_ln23_fu_999_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((icmp_ln23_fu_999_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    OC_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, OC_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            OC_blk_n <= OC_empty_n;
        else 
            OC_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    OC_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mem_empty_n, OC_empty_n, skip3_empty_n, skip1_empty_n, skip1_out_full_n, skip1_out1_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out1_full_n = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = OC_empty_n) or (mem_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            OC_read <= ap_const_logic_1;
        else 
            OC_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln12_fu_765_p2 <= std_logic_vector(unsigned(count_4_reg_668) + unsigned(ap_const_lv31_1));
    add_ln14_fu_835_p2 <= std_logic_vector(unsigned(i_1_reg_679) + unsigned(ap_const_lv31_1));
    add_ln18_fu_916_p2 <= std_logic_vector(unsigned(i_2_reg_702) + unsigned(ap_const_lv31_1));
    add_ln23_fu_993_p2 <= std_logic_vector(unsigned(i_3_reg_713) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(37);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(26);
    ap_CS_fsm_state35 <= ap_CS_fsm(28);
    ap_CS_fsm_state36 <= ap_CS_fsm(29);
    ap_CS_fsm_state37 <= ap_CS_fsm(30);
    ap_CS_fsm_state43 <= ap_CS_fsm(36);
    ap_CS_fsm_state47 <= ap_CS_fsm(38);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_gmem4_RVALID, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_gmem4_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_gmem4_RVALID, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_gmem4_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(m_axi_gmem4_RVALID, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_11001 <= ((m_axi_gmem4_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(m_axi_gmem4_RVALID, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_subdone <= ((m_axi_gmem4_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(m_axi_gmem4_RVALID, ap_enable_reg_pp2_iter1)
    begin
                ap_block_pp2_stage0_11001 <= ((m_axi_gmem4_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(m_axi_gmem4_RVALID, ap_enable_reg_pp2_iter1)
    begin
                ap_block_pp2_stage0_subdone <= ((m_axi_gmem4_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(m_axi_gmem4_RVALID, ap_enable_reg_pp3_iter1)
    begin
                ap_block_pp3_stage0_11001 <= ((m_axi_gmem4_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(m_axi_gmem4_RVALID, ap_enable_reg_pp3_iter1)
    begin
                ap_block_pp3_stage0_subdone <= ((m_axi_gmem4_RVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mem_empty_n, OC_empty_n, skip3_empty_n, skip1_empty_n, skip1_out_full_n, skip1_out1_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out1_full_n = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = OC_empty_n) or (mem_empty_n = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(m_axi_gmem4_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter1 <= (m_axi_gmem4_RVALID = ap_const_logic_0);
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp1_stage0_iter1_assign_proc : process(m_axi_gmem4_RVALID)
    begin
                ap_block_state22_pp1_stage0_iter1 <= (m_axi_gmem4_RVALID = ap_const_logic_0);
    end process;

        ap_block_state23_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_pp2_stage0_iter1_assign_proc : process(m_axi_gmem4_RVALID)
    begin
                ap_block_state33_pp2_stage0_iter1 <= (m_axi_gmem4_RVALID = ap_const_logic_0);
    end process;

        ap_block_state34_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state45_pp3_stage0_iter1_assign_proc : process(m_axi_gmem4_RVALID)
    begin
                ap_block_state45_pp3_stage0_iter1 <= (m_axi_gmem4_RVALID = ap_const_logic_0);
    end process;

        ap_block_state46_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state10_assign_proc : process(icmp_ln10_1_fu_771_p2)
    begin
        if ((icmp_ln10_1_fu_771_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(icmp_ln14_fu_841_p2)
    begin
        if ((icmp_ln14_fu_841_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state32_assign_proc : process(icmp_ln18_1_fu_922_p2)
    begin
        if ((icmp_ln18_1_fu_922_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state44_assign_proc : process(icmp_ln23_fu_999_p2)
    begin
        if ((icmp_ln23_fu_999_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state44 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_count_phi_fu_694_p4_assign_proc : process(icmp_ln10_reg_1070, empty_947_reg_1116, ap_CS_fsm_state24, count_reg_690)
    begin
        if (((icmp_ln10_reg_1070 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_phi_mux_count_phi_fu_694_p4 <= empty_947_reg_1116;
        else 
            ap_phi_mux_count_phi_fu_694_p4 <= count_reg_690;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias110_address0 <= zext_ln16_fu_860_p1(7 - 1 downto 0);

    bias110_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias110_ce0 <= ap_const_logic_1;
        else 
            bias110_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias110_d0 <= gmem4_addr_1_read_reg_1145;

    bias110_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln16_reg_1136_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (trunc_ln16_reg_1136_pp1_iter1_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias110_we0 <= ap_const_logic_1;
        else 
            bias110_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias111_address0 <= zext_ln16_fu_860_p1(7 - 1 downto 0);

    bias111_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias111_ce0 <= ap_const_logic_1;
        else 
            bias111_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias111_d0 <= gmem4_addr_1_read_reg_1145;

    bias111_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln16_reg_1136_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (trunc_ln16_reg_1136_pp1_iter1_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias111_we0 <= ap_const_logic_1;
        else 
            bias111_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias112_address0 <= zext_ln16_fu_860_p1(7 - 1 downto 0);

    bias112_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias112_ce0 <= ap_const_logic_1;
        else 
            bias112_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias112_d0 <= gmem4_addr_1_read_reg_1145;

    bias112_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln16_reg_1136_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (trunc_ln16_reg_1136_pp1_iter1_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias112_we0 <= ap_const_logic_1;
        else 
            bias112_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias113_address0 <= zext_ln16_fu_860_p1(7 - 1 downto 0);

    bias113_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias113_ce0 <= ap_const_logic_1;
        else 
            bias113_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias113_d0 <= gmem4_addr_1_read_reg_1145;

    bias113_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln16_reg_1136_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (trunc_ln16_reg_1136_pp1_iter1_reg = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias113_we0 <= ap_const_logic_1;
        else 
            bias113_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias114_address0 <= zext_ln16_fu_860_p1(7 - 1 downto 0);

    bias114_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias114_ce0 <= ap_const_logic_1;
        else 
            bias114_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias114_d0 <= gmem4_addr_1_read_reg_1145;

    bias114_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln16_reg_1136_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (trunc_ln16_reg_1136_pp1_iter1_reg = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias114_we0 <= ap_const_logic_1;
        else 
            bias114_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias18_address0 <= zext_ln16_fu_860_p1(7 - 1 downto 0);

    bias18_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias18_ce0 <= ap_const_logic_1;
        else 
            bias18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias18_d0 <= gmem4_addr_1_read_reg_1145;

    bias18_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln16_reg_1136_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (trunc_ln16_reg_1136_pp1_iter1_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias18_we0 <= ap_const_logic_1;
        else 
            bias18_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias19_address0 <= zext_ln16_fu_860_p1(7 - 1 downto 0);

    bias19_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias19_ce0 <= ap_const_logic_1;
        else 
            bias19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias19_d0 <= gmem4_addr_1_read_reg_1145;

    bias19_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln16_reg_1136_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (trunc_ln16_reg_1136_pp1_iter1_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias19_we0 <= ap_const_logic_1;
        else 
            bias19_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias1_address0 <= zext_ln16_fu_860_p1(7 - 1 downto 0);

    bias1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias1_ce0 <= ap_const_logic_1;
        else 
            bias1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias1_d0 <= gmem4_addr_1_read_reg_1145;

    bias1_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln16_reg_1136_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (trunc_ln16_reg_1136_pp1_iter1_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            bias1_we0 <= ap_const_logic_1;
        else 
            bias1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias322_address0 <= zext_ln25_fu_1018_p1(7 - 1 downto 0);

    bias322_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias322_ce0 <= ap_const_logic_1;
        else 
            bias322_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias322_d0 <= gmem4_addr_3_read_reg_1232;

    bias322_we0_assign_proc : process(ap_block_pp3_stage0_11001, trunc_ln25_reg_1223_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (trunc_ln25_reg_1223_pp3_iter1_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias322_we0 <= ap_const_logic_1;
        else 
            bias322_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias323_address0 <= zext_ln25_fu_1018_p1(7 - 1 downto 0);

    bias323_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias323_ce0 <= ap_const_logic_1;
        else 
            bias323_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias323_d0 <= gmem4_addr_3_read_reg_1232;

    bias323_we0_assign_proc : process(ap_block_pp3_stage0_11001, trunc_ln25_reg_1223_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (trunc_ln25_reg_1223_pp3_iter1_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias323_we0 <= ap_const_logic_1;
        else 
            bias323_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias324_address0 <= zext_ln25_fu_1018_p1(7 - 1 downto 0);

    bias324_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias324_ce0 <= ap_const_logic_1;
        else 
            bias324_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias324_d0 <= gmem4_addr_3_read_reg_1232;

    bias324_we0_assign_proc : process(ap_block_pp3_stage0_11001, trunc_ln25_reg_1223_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (trunc_ln25_reg_1223_pp3_iter1_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias324_we0 <= ap_const_logic_1;
        else 
            bias324_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias325_address0 <= zext_ln25_fu_1018_p1(7 - 1 downto 0);

    bias325_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias325_ce0 <= ap_const_logic_1;
        else 
            bias325_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias325_d0 <= gmem4_addr_3_read_reg_1232;

    bias325_we0_assign_proc : process(ap_block_pp3_stage0_11001, trunc_ln25_reg_1223_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (trunc_ln25_reg_1223_pp3_iter1_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias325_we0 <= ap_const_logic_1;
        else 
            bias325_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias326_address0 <= zext_ln25_fu_1018_p1(7 - 1 downto 0);

    bias326_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias326_ce0 <= ap_const_logic_1;
        else 
            bias326_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias326_d0 <= gmem4_addr_3_read_reg_1232;

    bias326_we0_assign_proc : process(ap_block_pp3_stage0_11001, trunc_ln25_reg_1223_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (trunc_ln25_reg_1223_pp3_iter1_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias326_we0 <= ap_const_logic_1;
        else 
            bias326_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias327_address0 <= zext_ln25_fu_1018_p1(7 - 1 downto 0);

    bias327_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias327_ce0 <= ap_const_logic_1;
        else 
            bias327_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias327_d0 <= gmem4_addr_3_read_reg_1232;

    bias327_we0_assign_proc : process(ap_block_pp3_stage0_11001, trunc_ln25_reg_1223_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (trunc_ln25_reg_1223_pp3_iter1_reg = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias327_we0 <= ap_const_logic_1;
        else 
            bias327_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias328_address0 <= zext_ln25_fu_1018_p1(7 - 1 downto 0);

    bias328_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias328_ce0 <= ap_const_logic_1;
        else 
            bias328_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias328_d0 <= gmem4_addr_3_read_reg_1232;

    bias328_we0_assign_proc : process(ap_block_pp3_stage0_11001, trunc_ln25_reg_1223_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (trunc_ln25_reg_1223_pp3_iter1_reg = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias328_we0 <= ap_const_logic_1;
        else 
            bias328_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias3_address0 <= zext_ln25_fu_1018_p1(7 - 1 downto 0);

    bias3_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias3_ce0 <= ap_const_logic_1;
        else 
            bias3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias3_d0 <= gmem4_addr_3_read_reg_1232;

    bias3_we0_assign_proc : process(ap_block_pp3_stage0_11001, trunc_ln25_reg_1223_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (trunc_ln25_reg_1223_pp3_iter1_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            bias3_we0 <= ap_const_logic_1;
        else 
            bias3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    count_3_fu_952_p2 <= std_logic_vector(unsigned(count_reg_690) + unsigned(rep3_reg_1053));
    empty_947_fu_801_p2 <= std_logic_vector(shift_left(unsigned(rep1_reg_1062),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    empty_948_fu_810_p2 <= std_logic_vector(unsigned(mem_1_reg_1029) + unsigned(p_cast73_i_fu_806_p1));
    empty_951_fu_913_p1 <= rep3_reg_1053(31 - 1 downto 0);
    empty_952_fu_888_p2 <= std_logic_vector(unsigned(mem_1_reg_1029) + unsigned(p_cast_i_fu_884_p1));
    empty_955_fu_968_p2 <= std_logic_vector(unsigned(mem_1_reg_1029) + unsigned(p_cast74_i_fu_964_p1));

    gmem4_blk_n_AR_assign_proc : process(m_axi_gmem4_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem4_blk_n_AR <= m_axi_gmem4_ARREADY;
        else 
            gmem4_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem4_blk_n_R_assign_proc : process(m_axi_gmem4_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem4_blk_n_R <= m_axi_gmem4_RVALID;
        else 
            gmem4_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln10_1_fu_771_p2 <= "1" when (count_4_reg_668 = trunc_ln10_2_reg_1080) else "0";
    icmp_ln10_fu_736_p2 <= "1" when (signed(rep1_fu_730_p3) > signed(ap_const_lv32_0)) else "0";
    icmp_ln14_fu_841_p2 <= "1" when (i_1_reg_679 = trunc_ln10_2_reg_1080) else "0";
    icmp_ln18_1_fu_922_p2 <= "1" when (i_2_reg_702 = empty_951_reg_1167) else "0";
    icmp_ln18_fu_871_p2 <= "1" when (signed(rep3_reg_1053) > signed(ap_const_lv32_0)) else "0";
    icmp_ln23_fu_999_p2 <= "1" when (i_3_reg_713 = empty_951_reg_1167) else "0";

    m_axi_gmem4_ARADDR_assign_proc : process(m_axi_gmem4_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state37, gmem4_addr_1_reg_1121, gmem4_addr_2_reg_1161, gmem4_addr_3_reg_1208, sext_ln10_fu_751_p1)
    begin
        if ((m_axi_gmem4_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                m_axi_gmem4_ARADDR <= gmem4_addr_3_reg_1208;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                m_axi_gmem4_ARADDR <= gmem4_addr_2_reg_1161;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                m_axi_gmem4_ARADDR <= gmem4_addr_1_reg_1121;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_gmem4_ARADDR <= sext_ln10_fu_751_p1;
            else 
                m_axi_gmem4_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem4_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem4_ARBURST <= ap_const_lv2_0;
    m_axi_gmem4_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem4_ARID <= ap_const_lv1_0;

    m_axi_gmem4_ARLEN_assign_proc : process(m_axi_gmem4_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state37, rep3_reg_1053, rep1_reg_1062)
    begin
        if ((((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            m_axi_gmem4_ARLEN <= rep3_reg_1053;
        elsif ((((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_gmem4_ARLEN <= rep1_reg_1062;
        else 
            m_axi_gmem4_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem4_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem4_ARPROT <= ap_const_lv3_0;
    m_axi_gmem4_ARQOS <= ap_const_lv4_0;
    m_axi_gmem4_ARREGION <= ap_const_lv4_0;
    m_axi_gmem4_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem4_ARUSER <= ap_const_lv1_0;

    m_axi_gmem4_ARVALID_assign_proc : process(m_axi_gmem4_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state37)
    begin
        if ((((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((m_axi_gmem4_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_gmem4_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem4_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem4_AWADDR <= ap_const_lv64_0;
    m_axi_gmem4_AWBURST <= ap_const_lv2_0;
    m_axi_gmem4_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem4_AWID <= ap_const_lv1_0;
    m_axi_gmem4_AWLEN <= ap_const_lv32_0;
    m_axi_gmem4_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem4_AWPROT <= ap_const_lv3_0;
    m_axi_gmem4_AWQOS <= ap_const_lv4_0;
    m_axi_gmem4_AWREGION <= ap_const_lv4_0;
    m_axi_gmem4_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem4_AWUSER <= ap_const_lv1_0;
    m_axi_gmem4_AWVALID <= ap_const_logic_0;
    m_axi_gmem4_BREADY <= ap_const_logic_0;

    m_axi_gmem4_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            m_axi_gmem4_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem4_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem4_WDATA <= ap_const_lv16_0;
    m_axi_gmem4_WID <= ap_const_lv1_0;
    m_axi_gmem4_WLAST <= ap_const_logic_0;
    m_axi_gmem4_WSTRB <= ap_const_lv2_0;
    m_axi_gmem4_WUSER <= ap_const_lv1_0;
    m_axi_gmem4_WVALID <= ap_const_logic_0;

    mem_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mem_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mem_blk_n <= mem_empty_n;
        else 
            mem_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mem_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mem_empty_n, OC_empty_n, skip3_empty_n, skip1_empty_n, skip1_out_full_n, skip1_out1_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out1_full_n = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = OC_empty_n) or (mem_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mem_read <= ap_const_logic_1;
        else 
            mem_read <= ap_const_logic_0;
        end if; 
    end process;

    p_cast73_i_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_947_fu_801_p2),64));
        p_cast74_i_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_957_p3),64));

        p_cast_i_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_876_p3),64));

    rep1_fu_730_p3 <= 
        ap_const_lv32_0 when (skip1_2_reg_1048(0) = '1') else 
        OC_1_reg_1037;
    rep3_fu_724_p3 <= 
        ap_const_lv32_0 when (skip3_3_reg_1043(0) = '1') else 
        OC_1_reg_1037;
    scale11_address0 <= zext_ln12_fu_790_p1(7 - 1 downto 0);

    scale11_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale11_ce0 <= ap_const_logic_1;
        else 
            scale11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale11_d0 <= gmem4_addr_read_reg_1104;

    scale11_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln12_reg_1095_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln12_reg_1095_pp0_iter1_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale11_we0 <= ap_const_logic_1;
        else 
            scale11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale12_address0 <= zext_ln12_fu_790_p1(7 - 1 downto 0);

    scale12_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale12_ce0 <= ap_const_logic_1;
        else 
            scale12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale12_d0 <= gmem4_addr_read_reg_1104;

    scale12_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln12_reg_1095_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln12_reg_1095_pp0_iter1_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale12_we0 <= ap_const_logic_1;
        else 
            scale12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale13_address0 <= zext_ln12_fu_790_p1(7 - 1 downto 0);

    scale13_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale13_ce0 <= ap_const_logic_1;
        else 
            scale13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale13_d0 <= gmem4_addr_read_reg_1104;

    scale13_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln12_reg_1095_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln12_reg_1095_pp0_iter1_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale13_we0 <= ap_const_logic_1;
        else 
            scale13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale14_address0 <= zext_ln12_fu_790_p1(7 - 1 downto 0);

    scale14_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale14_ce0 <= ap_const_logic_1;
        else 
            scale14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale14_d0 <= gmem4_addr_read_reg_1104;

    scale14_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln12_reg_1095_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln12_reg_1095_pp0_iter1_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale14_we0 <= ap_const_logic_1;
        else 
            scale14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale15_address0 <= zext_ln12_fu_790_p1(7 - 1 downto 0);

    scale15_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale15_ce0 <= ap_const_logic_1;
        else 
            scale15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale15_d0 <= gmem4_addr_read_reg_1104;

    scale15_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln12_reg_1095_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln12_reg_1095_pp0_iter1_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale15_we0 <= ap_const_logic_1;
        else 
            scale15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale16_address0 <= zext_ln12_fu_790_p1(7 - 1 downto 0);

    scale16_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale16_ce0 <= ap_const_logic_1;
        else 
            scale16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale16_d0 <= gmem4_addr_read_reg_1104;

    scale16_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln12_reg_1095_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln12_reg_1095_pp0_iter1_reg = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale16_we0 <= ap_const_logic_1;
        else 
            scale16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale17_address0 <= zext_ln12_fu_790_p1(7 - 1 downto 0);

    scale17_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale17_ce0 <= ap_const_logic_1;
        else 
            scale17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale17_d0 <= gmem4_addr_read_reg_1104;

    scale17_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln12_reg_1095_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln12_reg_1095_pp0_iter1_reg = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale17_we0 <= ap_const_logic_1;
        else 
            scale17_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale1_address0 <= zext_ln12_fu_790_p1(7 - 1 downto 0);

    scale1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale1_ce0 <= ap_const_logic_1;
        else 
            scale1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale1_d0 <= gmem4_addr_read_reg_1104;

    scale1_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln12_reg_1095_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln12_reg_1095_pp0_iter1_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            scale1_we0 <= ap_const_logic_1;
        else 
            scale1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale315_address0 <= zext_ln20_fu_941_p1(7 - 1 downto 0);

    scale315_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale315_ce0 <= ap_const_logic_1;
        else 
            scale315_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale315_d0 <= gmem4_addr_2_read_reg_1191;

    scale315_we0_assign_proc : process(ap_block_pp2_stage0_11001, trunc_ln20_reg_1182_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln20_reg_1182_pp2_iter1_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale315_we0 <= ap_const_logic_1;
        else 
            scale315_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale316_address0 <= zext_ln20_fu_941_p1(7 - 1 downto 0);

    scale316_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale316_ce0 <= ap_const_logic_1;
        else 
            scale316_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale316_d0 <= gmem4_addr_2_read_reg_1191;

    scale316_we0_assign_proc : process(ap_block_pp2_stage0_11001, trunc_ln20_reg_1182_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln20_reg_1182_pp2_iter1_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale316_we0 <= ap_const_logic_1;
        else 
            scale316_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale317_address0 <= zext_ln20_fu_941_p1(7 - 1 downto 0);

    scale317_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale317_ce0 <= ap_const_logic_1;
        else 
            scale317_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale317_d0 <= gmem4_addr_2_read_reg_1191;

    scale317_we0_assign_proc : process(ap_block_pp2_stage0_11001, trunc_ln20_reg_1182_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln20_reg_1182_pp2_iter1_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale317_we0 <= ap_const_logic_1;
        else 
            scale317_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale318_address0 <= zext_ln20_fu_941_p1(7 - 1 downto 0);

    scale318_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale318_ce0 <= ap_const_logic_1;
        else 
            scale318_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale318_d0 <= gmem4_addr_2_read_reg_1191;

    scale318_we0_assign_proc : process(ap_block_pp2_stage0_11001, trunc_ln20_reg_1182_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln20_reg_1182_pp2_iter1_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale318_we0 <= ap_const_logic_1;
        else 
            scale318_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale319_address0 <= zext_ln20_fu_941_p1(7 - 1 downto 0);

    scale319_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale319_ce0 <= ap_const_logic_1;
        else 
            scale319_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale319_d0 <= gmem4_addr_2_read_reg_1191;

    scale319_we0_assign_proc : process(ap_block_pp2_stage0_11001, trunc_ln20_reg_1182_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln20_reg_1182_pp2_iter1_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale319_we0 <= ap_const_logic_1;
        else 
            scale319_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale320_address0 <= zext_ln20_fu_941_p1(7 - 1 downto 0);

    scale320_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale320_ce0 <= ap_const_logic_1;
        else 
            scale320_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale320_d0 <= gmem4_addr_2_read_reg_1191;

    scale320_we0_assign_proc : process(ap_block_pp2_stage0_11001, trunc_ln20_reg_1182_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln20_reg_1182_pp2_iter1_reg = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale320_we0 <= ap_const_logic_1;
        else 
            scale320_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale321_address0 <= zext_ln20_fu_941_p1(7 - 1 downto 0);

    scale321_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale321_ce0 <= ap_const_logic_1;
        else 
            scale321_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale321_d0 <= gmem4_addr_2_read_reg_1191;

    scale321_we0_assign_proc : process(ap_block_pp2_stage0_11001, trunc_ln20_reg_1182_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln20_reg_1182_pp2_iter1_reg = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale321_we0 <= ap_const_logic_1;
        else 
            scale321_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scale3_address0 <= zext_ln20_fu_941_p1(7 - 1 downto 0);

    scale3_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale3_ce0 <= ap_const_logic_1;
        else 
            scale3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale3_d0 <= gmem4_addr_2_read_reg_1191;

    scale3_we0_assign_proc : process(ap_block_pp2_stage0_11001, trunc_ln20_reg_1182_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln20_reg_1182_pp2_iter1_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            scale3_we0 <= ap_const_logic_1;
        else 
            scale3_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln10_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln10_1_fu_742_p4),64));

        sext_ln14_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_815_p4),64));

        sext_ln18_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_893_p4),64));

        sext_ln23_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_973_p4),64));


    skip1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, skip1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_blk_n <= skip1_empty_n;
        else 
            skip1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    skip1_out1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, skip1_out1_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_out1_blk_n <= skip1_out1_full_n;
        else 
            skip1_out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    skip1_out1_din <= skip1_dout;

    skip1_out1_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mem_empty_n, OC_empty_n, skip3_empty_n, skip1_empty_n, skip1_out_full_n, skip1_out1_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out1_full_n = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = OC_empty_n) or (mem_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_out1_write <= ap_const_logic_1;
        else 
            skip1_out1_write <= ap_const_logic_0;
        end if; 
    end process;


    skip1_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, skip1_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_out_blk_n <= skip1_out_full_n;
        else 
            skip1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    skip1_out_din <= skip1_dout;

    skip1_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mem_empty_n, OC_empty_n, skip3_empty_n, skip1_empty_n, skip1_out_full_n, skip1_out1_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out1_full_n = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = OC_empty_n) or (mem_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_out_write <= ap_const_logic_1;
        else 
            skip1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    skip1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mem_empty_n, OC_empty_n, skip3_empty_n, skip1_empty_n, skip1_out_full_n, skip1_out1_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out1_full_n = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = OC_empty_n) or (mem_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_read <= ap_const_logic_1;
        else 
            skip1_read <= ap_const_logic_0;
        end if; 
    end process;


    skip3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, skip3_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip3_blk_n <= skip3_empty_n;
        else 
            skip3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    skip3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mem_empty_n, OC_empty_n, skip3_empty_n, skip1_empty_n, skip1_out_full_n, skip1_out1_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_out1_full_n = ap_const_logic_0) or (skip1_out_full_n = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = OC_empty_n) or (mem_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip3_read <= ap_const_logic_1;
        else 
            skip3_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_876_p3 <= (ap_phi_mux_count_phi_fu_694_p4 & ap_const_lv1_0);
    tmp_12_fu_957_p3 <= (count_3_reg_1203 & ap_const_lv1_0);
    trunc_ln10_1_fu_742_p4 <= mem_1_reg_1029(63 downto 1);
    trunc_ln10_2_fu_762_p1 <= rep1_reg_1062(31 - 1 downto 0);
    trunc_ln12_fu_776_p1 <= count_4_reg_668(3 - 1 downto 0);
    trunc_ln16_fu_846_p1 <= i_1_reg_679(3 - 1 downto 0);
    trunc_ln1_fu_973_p4 <= empty_955_fu_968_p2(63 downto 1);
    trunc_ln20_fu_927_p1 <= i_2_reg_702(3 - 1 downto 0);
    trunc_ln25_fu_1004_p1 <= i_3_reg_713(3 - 1 downto 0);
    trunc_ln7_fu_815_p4 <= empty_948_fu_810_p2(63 downto 1);
    trunc_ln_fu_893_p4 <= empty_952_fu_888_p2(63 downto 1);
    zext_ln12_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_1099_pp0_iter1_reg),64));
    zext_ln16_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_reg_1140_pp1_iter1_reg),64));
    zext_ln20_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_reg_1186_pp2_iter1_reg),64));
    zext_ln25_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_reg_1227_pp3_iter1_reg),64));
end behav;
