-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_M2S_addr_ap_uint_8_ap_uint_8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem5_AWVALID : OUT STD_LOGIC;
    m_axi_gmem5_AWREADY : IN STD_LOGIC;
    m_axi_gmem5_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem5_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem5_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem5_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem5_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem5_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem5_WVALID : OUT STD_LOGIC;
    m_axi_gmem5_WREADY : IN STD_LOGIC;
    m_axi_gmem5_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem5_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem5_WLAST : OUT STD_LOGIC;
    m_axi_gmem5_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem5_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem5_ARVALID : OUT STD_LOGIC;
    m_axi_gmem5_ARREADY : IN STD_LOGIC;
    m_axi_gmem5_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem5_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem5_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem5_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem5_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem5_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem5_RVALID : IN STD_LOGIC;
    m_axi_gmem5_RREADY : OUT STD_LOGIC;
    m_axi_gmem5_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem5_RLAST : IN STD_LOGIC;
    m_axi_gmem5_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem5_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem5_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_BVALID : IN STD_LOGIC;
    m_axi_gmem5_BREADY : OUT STD_LOGIC;
    m_axi_gmem5_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem5_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_mem_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_mem_full_n : IN STD_LOGIC;
    s_mem_write : OUT STD_LOGIC;
    offsets_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    offsets_empty_n : IN STD_LOGIC;
    offsets_read : OUT STD_LOGIC;
    batch_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    batch_empty_n : IN STD_LOGIC;
    batch_read : OUT STD_LOGIC;
    CONV_D_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    CONV_D_loc_empty_n : IN STD_LOGIC;
    CONV_D_loc_read : OUT STD_LOGIC;
    deform_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    deform_empty_n : IN STD_LOGIC;
    deform_read : OUT STD_LOGIC;
    skip3_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    skip3_empty_n : IN STD_LOGIC;
    skip3_read : OUT STD_LOGIC );
end;


architecture behav of top_M2S_addr_ap_uint_8_ap_uint_8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem5_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal skip3_read_reg_209 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem5_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal s_mem_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal offsets_blk_n : STD_LOGIC;
    signal batch_blk_n : STD_LOGIC;
    signal CONV_D_loc_blk_n : STD_LOGIC;
    signal deform_blk_n : STD_LOGIC;
    signal skip3_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_115 : STD_LOGIC_VECTOR (63 downto 0);
    signal rep_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal offsets_read_reg_204 : STD_LOGIC_VECTOR (63 downto 0);
    signal CONV_D_loc_read_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_fu_137_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_i_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln56_reg_240 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln60_fu_161_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln60_reg_245 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state12_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln60_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_250 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln60_fu_177_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln60_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem5_addr_reg_260 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state13_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln61_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln61_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem5_addr_read_reg_271 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state12 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_119_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_rep_phi_fu_130_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln64_fu_188_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_155_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln61_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln61_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_155_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_155_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_32s_32s_32_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mul_32ns_32ns_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mul_32s_32s_32_5_1_U54 : component top_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => CONV_D_loc_read_reg_213,
        din1 => CONV_D_loc_read_reg_213,
        ce => ap_const_logic_1,
        dout => grp_fu_145_p2);

    mul_32ns_32ns_64_5_1_U55 : component top_mul_32ns_32ns_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_155_p0,
        din1 => grp_fu_155_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_155_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_reg_250 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_115 <= add_ln60_reg_245;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten_reg_115 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    rep_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_reg_250 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                rep_reg_126 <= add_ln61_reg_266;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                rep_reg_126 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                CONV_D_loc_read_reg_213 <= CONV_D_loc_dout;
                offsets_read_reg_204 <= offsets_dout;
                select_ln57_reg_219 <= select_ln57_fu_137_p3;
                skip3_read_reg_209 <= skip3_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln60_reg_245 <= add_ln60_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_reg_250 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln61_reg_266 <= add_ln61_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (skip3_read_reg_209 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                gmem5_addr_read_reg_271 <= m_axi_gmem5_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_reg_250 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (skip3_read_reg_209 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                gmem5_addr_reg_260 <= add_ln64_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln60_reg_250 <= icmp_ln60_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_i_i_reg_224 <= grp_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_ln56_reg_240 <= grp_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln60_reg_254 <= select_ln60_fu_177_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, offsets_empty_n, batch_empty_n, CONV_D_loc_empty_n, deform_empty_n, skip3_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, icmp_ln60_fu_167_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((offsets_empty_n = ap_const_logic_0) or (ap_const_logic_0 = CONV_D_loc_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (deform_empty_n = ap_const_logic_0) or (batch_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln60_fu_167_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((icmp_ln60_fu_167_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    CONV_D_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, CONV_D_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            CONV_D_loc_blk_n <= CONV_D_loc_empty_n;
        else 
            CONV_D_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    CONV_D_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, offsets_empty_n, batch_empty_n, CONV_D_loc_empty_n, deform_empty_n, skip3_empty_n)
    begin
        if ((not(((offsets_empty_n = ap_const_logic_0) or (ap_const_logic_0 = CONV_D_loc_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (deform_empty_n = ap_const_logic_0) or (batch_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            CONV_D_loc_read <= ap_const_logic_1;
        else 
            CONV_D_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln60_fu_161_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_119_p4) + unsigned(ap_const_lv64_1));
    add_ln61_fu_199_p2 <= std_logic_vector(unsigned(select_ln60_reg_254) + unsigned(ap_const_lv32_1));
    add_ln64_fu_188_p2 <= std_logic_vector(unsigned(offsets_read_reg_204) + unsigned(zext_ln61_fu_185_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(13);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(s_mem_full_n, skip3_read_reg_209, ap_enable_reg_pp0_iter5)
    begin
                ap_block_pp0_stage0_01001 <= ((s_mem_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (skip3_read_reg_209 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(s_mem_full_n, ap_enable_reg_pp0_iter1, skip3_read_reg_209, ap_enable_reg_pp0_iter5, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_11001 <= (((s_mem_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (skip3_read_reg_209 = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(s_mem_full_n, ap_enable_reg_pp0_iter1, skip3_read_reg_209, ap_enable_reg_pp0_iter5, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_subdone <= (((s_mem_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (skip3_read_reg_209 = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(m_axi_gmem5_RVALID, skip3_read_reg_209, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage1_11001 <= ((m_axi_gmem5_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (skip3_read_reg_209 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(m_axi_gmem5_RVALID, skip3_read_reg_209, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage1_subdone <= ((m_axi_gmem5_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (skip3_read_reg_209 = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, offsets_empty_n, batch_empty_n, CONV_D_loc_empty_n, deform_empty_n, skip3_empty_n)
    begin
                ap_block_state1 <= ((offsets_empty_n = ap_const_logic_0) or (ap_const_logic_0 = CONV_D_loc_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (deform_empty_n = ap_const_logic_0) or (batch_empty_n = ap_const_logic_0));
    end process;

        ap_block_state12_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(m_axi_gmem5_ARREADY, skip3_read_reg_209)
    begin
                ap_block_state14_io <= ((m_axi_gmem5_ARREADY = ap_const_logic_0) and (skip3_read_reg_209 = ap_const_lv1_0));
    end process;

        ap_block_state14_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp0_stage1_iter4_assign_proc : process(m_axi_gmem5_RVALID, skip3_read_reg_209)
    begin
                ap_block_state21_pp0_stage1_iter4 <= ((m_axi_gmem5_RVALID = ap_const_logic_0) and (skip3_read_reg_209 = ap_const_lv1_0));
    end process;


    ap_block_state22_pp0_stage0_iter5_assign_proc : process(s_mem_full_n, skip3_read_reg_209)
    begin
                ap_block_state22_pp0_stage0_iter5 <= ((s_mem_full_n = ap_const_logic_0) and (skip3_read_reg_209 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state12_assign_proc : process(icmp_ln60_fu_167_p2)
    begin
        if ((icmp_ln60_fu_167_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_119_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, indvar_flatten_reg_115, add_ln60_reg_245, icmp_ln60_reg_250)
    begin
        if (((icmp_ln60_reg_250 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_119_p4 <= add_ln60_reg_245;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_119_p4 <= indvar_flatten_reg_115;
        end if; 
    end process;


    ap_phi_mux_rep_phi_fu_130_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, rep_reg_126, icmp_ln60_reg_250, add_ln61_reg_266)
    begin
        if (((icmp_ln60_reg_250 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_rep_phi_fu_130_p4 <= add_ln61_reg_266;
        else 
            ap_phi_mux_rep_phi_fu_130_p4 <= rep_reg_126;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    batch_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, batch_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            batch_blk_n <= batch_empty_n;
        else 
            batch_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    batch_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, offsets_empty_n, batch_empty_n, CONV_D_loc_empty_n, deform_empty_n, skip3_empty_n)
    begin
        if ((not(((offsets_empty_n = ap_const_logic_0) or (ap_const_logic_0 = CONV_D_loc_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (deform_empty_n = ap_const_logic_0) or (batch_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            batch_read <= ap_const_logic_1;
        else 
            batch_read <= ap_const_logic_0;
        end if; 
    end process;


    deform_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, deform_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            deform_blk_n <= deform_empty_n;
        else 
            deform_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    deform_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, offsets_empty_n, batch_empty_n, CONV_D_loc_empty_n, deform_empty_n, skip3_empty_n)
    begin
        if ((not(((offsets_empty_n = ap_const_logic_0) or (ap_const_logic_0 = CONV_D_loc_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (deform_empty_n = ap_const_logic_0) or (batch_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            deform_read <= ap_const_logic_1;
        else 
            deform_read <= ap_const_logic_0;
        end if; 
    end process;


    gmem5_blk_n_AR_assign_proc : process(m_axi_gmem5_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, skip3_read_reg_209)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (skip3_read_reg_209 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            gmem5_blk_n_AR <= m_axi_gmem5_ARREADY;
        else 
            gmem5_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem5_blk_n_R_assign_proc : process(m_axi_gmem5_RVALID, skip3_read_reg_209, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (skip3_read_reg_209 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            gmem5_blk_n_R <= m_axi_gmem5_RVALID;
        else 
            gmem5_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_155_p0 <= grp_fu_155_p00(32 - 1 downto 0);
    grp_fu_155_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_reg_219),64));
    grp_fu_155_p1 <= grp_fu_155_p10(32 - 1 downto 0);
    grp_fu_155_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_i_i_reg_224),64));
    icmp_ln60_fu_167_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_119_p4 = mul_ln56_reg_240) else "0";
    icmp_ln61_fu_172_p2 <= "1" when (ap_phi_mux_rep_phi_fu_130_p4 = mul_i_i_reg_224) else "0";
    m_axi_gmem5_ARADDR <= gmem5_addr_reg_260;
    m_axi_gmem5_ARBURST <= ap_const_lv2_0;
    m_axi_gmem5_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem5_ARID <= ap_const_lv1_0;
    m_axi_gmem5_ARLEN <= ap_const_lv32_1;
    m_axi_gmem5_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem5_ARPROT <= ap_const_lv3_0;
    m_axi_gmem5_ARQOS <= ap_const_lv4_0;
    m_axi_gmem5_ARREGION <= ap_const_lv4_0;
    m_axi_gmem5_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem5_ARUSER <= ap_const_lv1_0;

    m_axi_gmem5_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, skip3_read_reg_209, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (skip3_read_reg_209 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            m_axi_gmem5_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem5_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem5_AWADDR <= ap_const_lv64_0;
    m_axi_gmem5_AWBURST <= ap_const_lv2_0;
    m_axi_gmem5_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem5_AWID <= ap_const_lv1_0;
    m_axi_gmem5_AWLEN <= ap_const_lv32_0;
    m_axi_gmem5_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem5_AWPROT <= ap_const_lv3_0;
    m_axi_gmem5_AWQOS <= ap_const_lv4_0;
    m_axi_gmem5_AWREGION <= ap_const_lv4_0;
    m_axi_gmem5_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem5_AWUSER <= ap_const_lv1_0;
    m_axi_gmem5_AWVALID <= ap_const_logic_0;
    m_axi_gmem5_BREADY <= ap_const_logic_0;

    m_axi_gmem5_RREADY_assign_proc : process(skip3_read_reg_209, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (skip3_read_reg_209 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem5_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem5_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem5_WDATA <= ap_const_lv8_0;
    m_axi_gmem5_WID <= ap_const_lv1_0;
    m_axi_gmem5_WLAST <= ap_const_logic_0;
    m_axi_gmem5_WSTRB <= ap_const_lv1_0;
    m_axi_gmem5_WUSER <= ap_const_lv1_0;
    m_axi_gmem5_WVALID <= ap_const_logic_0;

    offsets_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, offsets_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            offsets_blk_n <= offsets_empty_n;
        else 
            offsets_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    offsets_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, offsets_empty_n, batch_empty_n, CONV_D_loc_empty_n, deform_empty_n, skip3_empty_n)
    begin
        if ((not(((offsets_empty_n = ap_const_logic_0) or (ap_const_logic_0 = CONV_D_loc_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (deform_empty_n = ap_const_logic_0) or (batch_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            offsets_read <= ap_const_logic_1;
        else 
            offsets_read <= ap_const_logic_0;
        end if; 
    end process;


    s_mem_blk_n_assign_proc : process(s_mem_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, skip3_read_reg_209, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (skip3_read_reg_209 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            s_mem_blk_n <= s_mem_full_n;
        else 
            s_mem_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_mem_din <= gmem5_addr_read_reg_271;

    s_mem_write_assign_proc : process(ap_CS_fsm_pp0_stage0, skip3_read_reg_209, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (skip3_read_reg_209 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            s_mem_write <= ap_const_logic_1;
        else 
            s_mem_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln57_fu_137_p3 <= 
        batch_dout when (deform_dout(0) = '1') else 
        ap_const_lv32_0;
    select_ln60_fu_177_p3 <= 
        ap_const_lv32_0 when (icmp_ln61_fu_172_p2(0) = '1') else 
        ap_phi_mux_rep_phi_fu_130_p4;

    skip3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, skip3_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip3_blk_n <= skip3_empty_n;
        else 
            skip3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    skip3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, offsets_empty_n, batch_empty_n, CONV_D_loc_empty_n, deform_empty_n, skip3_empty_n)
    begin
        if ((not(((offsets_empty_n = ap_const_logic_0) or (ap_const_logic_0 = CONV_D_loc_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip3_empty_n = ap_const_logic_0) or (deform_empty_n = ap_const_logic_0) or (batch_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip3_read <= ap_const_logic_1;
        else 
            skip3_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln61_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln60_reg_254),64));
end behav;
