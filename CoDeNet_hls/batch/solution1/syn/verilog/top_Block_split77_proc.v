// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_Block_split77_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        D_dout,
        D_empty_n,
        D_read,
        STRIDE_2_dout,
        STRIDE_2_empty_n,
        STRIDE_2_read,
        CONV_D_out_out_din,
        CONV_D_out_out_full_n,
        CONV_D_out_out_write,
        CONV_D_out_out1_din,
        CONV_D_out_out1_full_n,
        CONV_D_out_out1_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] D_dout;
input   D_empty_n;
output   D_read;
input  [0:0] STRIDE_2_dout;
input   STRIDE_2_empty_n;
output   STRIDE_2_read;
output  [31:0] CONV_D_out_out_din;
input   CONV_D_out_out_full_n;
output   CONV_D_out_out_write;
output  [31:0] CONV_D_out_out1_din;
input   CONV_D_out_out1_full_n;
output   CONV_D_out_out1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg D_read;
reg STRIDE_2_read;
reg CONV_D_out_out_write;
reg CONV_D_out_out1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    D_blk_n;
reg    STRIDE_2_blk_n;
reg    CONV_D_out_out_blk_n;
wire    ap_CS_fsm_state2;
reg    CONV_D_out_out1_blk_n;
wire   [31:0] CONV_D_fu_74_p3;
reg   [31:0] CONV_D_reg_82;
reg    ap_block_state1;
reg    ap_block_state2;
wire   [30:0] trunc_ln_fu_60_p4;
wire  signed [31:0] sext_ln154_fu_70_p1;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == CONV_D_out_out1_full_n) | (1'b0 == CONV_D_out_out_full_n)) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        CONV_D_reg_82 <= CONV_D_fu_74_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        CONV_D_out_out1_blk_n = CONV_D_out_out1_full_n;
    end else begin
        CONV_D_out_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == CONV_D_out_out1_full_n) | (1'b0 == CONV_D_out_out_full_n)) & (1'b1 == ap_CS_fsm_state2))) begin
        CONV_D_out_out1_write = 1'b1;
    end else begin
        CONV_D_out_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        CONV_D_out_out_blk_n = CONV_D_out_out_full_n;
    end else begin
        CONV_D_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == CONV_D_out_out1_full_n) | (1'b0 == CONV_D_out_out_full_n)) & (1'b1 == ap_CS_fsm_state2))) begin
        CONV_D_out_out_write = 1'b1;
    end else begin
        CONV_D_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_blk_n = D_empty_n;
    end else begin
        D_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STRIDE_2_empty_n) | (1'b0 == D_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_read = 1'b1;
    end else begin
        D_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        STRIDE_2_blk_n = STRIDE_2_empty_n;
    end else begin
        STRIDE_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STRIDE_2_empty_n) | (1'b0 == D_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        STRIDE_2_read = 1'b1;
    end else begin
        STRIDE_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == CONV_D_out_out1_full_n) | (1'b0 == CONV_D_out_out_full_n)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == CONV_D_out_out1_full_n) | (1'b0 == CONV_D_out_out_full_n)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == STRIDE_2_empty_n) | (1'b0 == D_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == CONV_D_out_out1_full_n) | (1'b0 == CONV_D_out_out_full_n)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign CONV_D_fu_74_p3 = ((STRIDE_2_dout[0:0] == 1'b1) ? sext_ln154_fu_70_p1 : D_dout);

assign CONV_D_out_out1_din = CONV_D_reg_82;

assign CONV_D_out_out_din = CONV_D_reg_82;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == STRIDE_2_empty_n) | (1'b0 == D_empty_n) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == CONV_D_out_out1_full_n) | (1'b0 == CONV_D_out_out_full_n));
end

assign sext_ln154_fu_70_p1 = $signed(trunc_ln_fu_60_p4);

assign trunc_ln_fu_60_p4 = {{D_dout[31:1]}};

endmodule //top_Block_split77_proc
