// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_Block_Z7wrapperP6ap_intILi128EES1_PS_ILi64EES3_PS_ILi16EEP7ap_uintILi8EEiiiibbbbbb_exit_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        D_V_loc_dout,
        D_V_loc_empty_n,
        D_V_loc_read,
        STRIDE_2_dout,
        STRIDE_2_empty_n,
        STRIDE_2_read,
        batch_dout,
        batch_empty_n,
        batch_read,
        mul_ln93_1_loc_out_din,
        mul_ln93_1_loc_out_full_n,
        mul_ln93_1_loc_out_write,
        mul_ln93_1_loc_out1_din,
        mul_ln93_1_loc_out1_full_n,
        mul_ln93_1_loc_out1_write,
        mul_ln93_1_loc_out2_din,
        mul_ln93_1_loc_out2_full_n,
        mul_ln93_1_loc_out2_write,
        mul_ln93_1_loc_out3_din,
        mul_ln93_1_loc_out3_full_n,
        mul_ln93_1_loc_out3_write
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] D_V_loc_dout;
input   D_V_loc_empty_n;
output   D_V_loc_read;
input  [0:0] STRIDE_2_dout;
input   STRIDE_2_empty_n;
output   STRIDE_2_read;
input  [31:0] batch_dout;
input   batch_empty_n;
output   batch_read;
output  [31:0] mul_ln93_1_loc_out_din;
input   mul_ln93_1_loc_out_full_n;
output   mul_ln93_1_loc_out_write;
output  [31:0] mul_ln93_1_loc_out1_din;
input   mul_ln93_1_loc_out1_full_n;
output   mul_ln93_1_loc_out1_write;
output  [31:0] mul_ln93_1_loc_out2_din;
input   mul_ln93_1_loc_out2_full_n;
output   mul_ln93_1_loc_out2_write;
output  [31:0] mul_ln93_1_loc_out3_din;
input   mul_ln93_1_loc_out3_full_n;
output   mul_ln93_1_loc_out3_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg D_V_loc_read;
reg STRIDE_2_read;
reg batch_read;
reg mul_ln93_1_loc_out_write;
reg mul_ln93_1_loc_out1_write;
reg mul_ln93_1_loc_out2_write;
reg mul_ln93_1_loc_out3_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    D_V_loc_blk_n;
reg    STRIDE_2_blk_n;
reg    batch_blk_n;
reg    mul_ln93_1_loc_out_blk_n;
wire    ap_CS_fsm_state11;
reg    mul_ln93_1_loc_out1_blk_n;
reg    mul_ln93_1_loc_out2_blk_n;
reg    mul_ln93_1_loc_out3_blk_n;
reg  signed [31:0] batch_read_reg_123;
wire   [15:0] select_ln71_fu_102_p3;
reg   [15:0] select_ln71_reg_128;
wire   [31:0] zext_ln71_fu_110_p1;
wire    ap_CS_fsm_state2;
wire  signed [31:0] grp_fu_117_p2;
reg  signed [31:0] mul_ln93_reg_139;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_113_p2;
reg   [31:0] mul_ln93_1_reg_144;
wire    ap_CS_fsm_state10;
reg    ap_block_state1;
reg    ap_block_state11;
wire   [14:0] lshr_ln_fu_88_p4;
wire   [15:0] zext_ln1497_fu_98_p1;
wire    ap_CS_fsm_state6;
wire   [15:0] grp_fu_117_p0;
wire   [15:0] grp_fu_117_p1;
reg   [10:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
end

top_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U568(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln93_reg_139),
    .din1(batch_read_reg_123),
    .ce(1'b1),
    .dout(grp_fu_113_p2)
);

top_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U569(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_117_p0),
    .din1(grp_fu_117_p1),
    .ce(1'b1),
    .dout(grp_fu_117_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((mul_ln93_1_loc_out3_full_n == 1'b0) | (mul_ln93_1_loc_out2_full_n == 1'b0) | (mul_ln93_1_loc_out1_full_n == 1'b0) | (mul_ln93_1_loc_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        batch_read_reg_123 <= batch_dout;
        select_ln71_reg_128 <= select_ln71_fu_102_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln93_1_reg_144 <= grp_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln93_reg_139 <= grp_fu_117_p2;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_V_loc_blk_n = D_V_loc_empty_n;
    end else begin
        D_V_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((batch_empty_n == 1'b0) | (1'b0 == STRIDE_2_empty_n) | (1'b0 == D_V_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        D_V_loc_read = 1'b1;
    end else begin
        D_V_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        STRIDE_2_blk_n = STRIDE_2_empty_n;
    end else begin
        STRIDE_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((batch_empty_n == 1'b0) | (1'b0 == STRIDE_2_empty_n) | (1'b0 == D_V_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        STRIDE_2_read = 1'b1;
    end else begin
        STRIDE_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((mul_ln93_1_loc_out3_full_n == 1'b0) | (mul_ln93_1_loc_out2_full_n == 1'b0) | (mul_ln93_1_loc_out1_full_n == 1'b0) | (mul_ln93_1_loc_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((mul_ln93_1_loc_out3_full_n == 1'b0) | (mul_ln93_1_loc_out2_full_n == 1'b0) | (mul_ln93_1_loc_out1_full_n == 1'b0) | (mul_ln93_1_loc_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_blk_n = batch_empty_n;
    end else begin
        batch_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((batch_empty_n == 1'b0) | (1'b0 == STRIDE_2_empty_n) | (1'b0 == D_V_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        batch_read = 1'b1;
    end else begin
        batch_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln93_1_loc_out1_blk_n = mul_ln93_1_loc_out1_full_n;
    end else begin
        mul_ln93_1_loc_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mul_ln93_1_loc_out3_full_n == 1'b0) | (mul_ln93_1_loc_out2_full_n == 1'b0) | (mul_ln93_1_loc_out1_full_n == 1'b0) | (mul_ln93_1_loc_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        mul_ln93_1_loc_out1_write = 1'b1;
    end else begin
        mul_ln93_1_loc_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln93_1_loc_out2_blk_n = mul_ln93_1_loc_out2_full_n;
    end else begin
        mul_ln93_1_loc_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mul_ln93_1_loc_out3_full_n == 1'b0) | (mul_ln93_1_loc_out2_full_n == 1'b0) | (mul_ln93_1_loc_out1_full_n == 1'b0) | (mul_ln93_1_loc_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        mul_ln93_1_loc_out2_write = 1'b1;
    end else begin
        mul_ln93_1_loc_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln93_1_loc_out3_blk_n = mul_ln93_1_loc_out3_full_n;
    end else begin
        mul_ln93_1_loc_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mul_ln93_1_loc_out3_full_n == 1'b0) | (mul_ln93_1_loc_out2_full_n == 1'b0) | (mul_ln93_1_loc_out1_full_n == 1'b0) | (mul_ln93_1_loc_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        mul_ln93_1_loc_out3_write = 1'b1;
    end else begin
        mul_ln93_1_loc_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln93_1_loc_out_blk_n = mul_ln93_1_loc_out_full_n;
    end else begin
        mul_ln93_1_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mul_ln93_1_loc_out3_full_n == 1'b0) | (mul_ln93_1_loc_out2_full_n == 1'b0) | (mul_ln93_1_loc_out1_full_n == 1'b0) | (mul_ln93_1_loc_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        mul_ln93_1_loc_out_write = 1'b1;
    end else begin
        mul_ln93_1_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((batch_empty_n == 1'b0) | (1'b0 == STRIDE_2_empty_n) | (1'b0 == D_V_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if ((~((mul_ln93_1_loc_out3_full_n == 1'b0) | (mul_ln93_1_loc_out2_full_n == 1'b0) | (mul_ln93_1_loc_out1_full_n == 1'b0) | (mul_ln93_1_loc_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((batch_empty_n == 1'b0) | (1'b0 == STRIDE_2_empty_n) | (1'b0 == D_V_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state11 = ((mul_ln93_1_loc_out3_full_n == 1'b0) | (mul_ln93_1_loc_out2_full_n == 1'b0) | (mul_ln93_1_loc_out1_full_n == 1'b0) | (mul_ln93_1_loc_out_full_n == 1'b0));
end

assign grp_fu_117_p0 = zext_ln71_fu_110_p1;

assign grp_fu_117_p1 = zext_ln71_fu_110_p1;

assign lshr_ln_fu_88_p4 = {{D_V_loc_dout[15:1]}};

assign mul_ln93_1_loc_out1_din = mul_ln93_1_reg_144;

assign mul_ln93_1_loc_out2_din = mul_ln93_1_reg_144;

assign mul_ln93_1_loc_out3_din = mul_ln93_1_reg_144;

assign mul_ln93_1_loc_out_din = mul_ln93_1_reg_144;

assign select_ln71_fu_102_p3 = ((STRIDE_2_dout[0:0] == 1'b1) ? zext_ln1497_fu_98_p1 : D_V_loc_dout);

assign zext_ln1497_fu_98_p1 = lshr_ln_fu_88_p4;

assign zext_ln71_fu_110_p1 = select_ln71_reg_128;

endmodule //top_Block_Z7wrapperP6ap_intILi128EES1_PS_ILi64EES3_PS_ILi16EEP7ap_uintILi8EEiiiibbbbbb_exit_proc
