-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_M2S_repeat_16_16_ap_int_16_ap_int_256_22 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_bias_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    s_bias_full_n : IN STD_LOGIC;
    s_bias_write : OUT STD_LOGIC;
    bias_buffer1_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_0_ce0 : OUT STD_LOGIC;
    bias_buffer1_V_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_0_ce1 : OUT STD_LOGIC;
    bias_buffer1_V_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_1_ce0 : OUT STD_LOGIC;
    bias_buffer1_V_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_1_ce1 : OUT STD_LOGIC;
    bias_buffer1_V_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_2_ce0 : OUT STD_LOGIC;
    bias_buffer1_V_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_2_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_2_ce1 : OUT STD_LOGIC;
    bias_buffer1_V_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_3_ce0 : OUT STD_LOGIC;
    bias_buffer1_V_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_3_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_3_ce1 : OUT STD_LOGIC;
    bias_buffer1_V_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_4_ce0 : OUT STD_LOGIC;
    bias_buffer1_V_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_4_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_4_ce1 : OUT STD_LOGIC;
    bias_buffer1_V_4_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_5_ce0 : OUT STD_LOGIC;
    bias_buffer1_V_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_5_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_5_ce1 : OUT STD_LOGIC;
    bias_buffer1_V_5_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_6_ce0 : OUT STD_LOGIC;
    bias_buffer1_V_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_6_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_6_ce1 : OUT STD_LOGIC;
    bias_buffer1_V_6_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_7_ce0 : OUT STD_LOGIC;
    bias_buffer1_V_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buffer1_V_7_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_buffer1_V_7_ce1 : OUT STD_LOGIC;
    bias_buffer1_V_7_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    mul_ln31_1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln31_1_loc_empty_n : IN STD_LOGIC;
    mul_ln31_1_loc_read : OUT STD_LOGIC;
    ret_V_cast_loc_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    ret_V_cast_loc_empty_n : IN STD_LOGIC;
    ret_V_cast_loc_read : OUT STD_LOGIC;
    skip1_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    skip1_empty_n : IN STD_LOGIC;
    skip1_read : OUT STD_LOGIC );
end;


architecture behav of top_M2S_repeat_16_16_ap_int_16_ap_int_256_22 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv44_0 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv44_1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_bias_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln35_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_825_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln31_1_loc_blk_n : STD_LOGIC;
    signal ret_V_cast_loc_blk_n : STD_LOGIC;
    signal skip1_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_309 : STD_LOGIC_VECTOR (43 downto 0);
    signal i_reg_320 : STD_LOGIC_VECTOR (11 downto 0);
    signal OCIC_reg_794 : STD_LOGIC_VECTOR (11 downto 0);
    signal REP_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal REP_reg_800 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln32_reg_815 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln35_fu_351_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal add_ln35_reg_820 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln35_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_367_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln35_reg_829 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln215_fu_375_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln215_reg_834 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln36_fu_416_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln36_reg_919 : STD_LOGIC_VECTOR (11 downto 0);
    signal bias_buffer1_V_0_load_reg_924 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_1_load_reg_929 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_2_load_reg_934 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_3_load_reg_939 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_4_load_reg_944 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_5_load_reg_949 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_6_load_reg_954 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_7_load_reg_959 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_0_load_1_reg_964 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_1_load_1_reg_969 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_2_load_1_reg_974 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_3_load_1_reg_979 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_4_load_1_reg_984 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_5_load_1_reg_989 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_6_load_1_reg_994 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer1_V_7_load_1_reg_999 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_313_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_324_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln215_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_2_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal grp_fu_345_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln36_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_379_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln215_fu_398_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_95_fu_736_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_94_fu_715_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_93_fu_694_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_92_fu_673_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_91_fu_652_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_90_fu_631_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_89_fu_610_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_88_fu_589_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_87_fu_568_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_86_fu_547_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_85_fu_526_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_84_fu_505_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_83_fu_484_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_82_fu_463_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_442_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_421_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_345_p00 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_345_p10 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_32ns_12ns_44_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component top_mux_864_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_32ns_12ns_44_5_1_U170 : component top_mul_32ns_12ns_44_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 12,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_345_p0,
        din1 => grp_fu_345_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p2);

    mux_864_16_1_1_U171 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_0_load_reg_924,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_fu_421_p10);

    mux_864_16_1_1_U172 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_1_load_reg_929,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_s_fu_442_p10);

    mux_864_16_1_1_U173 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_2_load_reg_934,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_82_fu_463_p10);

    mux_864_16_1_1_U174 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_3_load_reg_939,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_83_fu_484_p10);

    mux_864_16_1_1_U175 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_4_load_reg_944,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_84_fu_505_p10);

    mux_864_16_1_1_U176 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_5_load_reg_949,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_85_fu_526_p10);

    mux_864_16_1_1_U177 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_6_load_reg_954,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_86_fu_547_p10);

    mux_864_16_1_1_U178 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_7_load_reg_959,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_87_fu_568_p10);

    mux_864_16_1_1_U179 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_0_load_1_reg_964,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_88_fu_589_p10);

    mux_864_16_1_1_U180 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_1_load_1_reg_969,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_89_fu_610_p10);

    mux_864_16_1_1_U181 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_2_load_1_reg_974,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_90_fu_631_p10);

    mux_864_16_1_1_U182 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_3_load_1_reg_979,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_91_fu_652_p10);

    mux_864_16_1_1_U183 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_4_load_1_reg_984,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_92_fu_673_p10);

    mux_864_16_1_1_U184 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_5_load_1_reg_989,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_93_fu_694_p10);

    mux_864_16_1_1_U185 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_6_load_1_reg_994,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_94_fu_715_p10);

    mux_864_16_1_1_U186 : component top_mux_864_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buffer1_V_7_load_1_reg_999,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv64_0,
        dout => tmp_95_fu_736_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln35_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_320 <= add_ln36_reg_919;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_320 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln35_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_309 <= add_ln35_reg_820;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_309 <= ap_const_lv44_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                OCIC_reg_794 <= ret_V_cast_loc_dout;
                REP_reg_800 <= REP_fu_331_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln35_reg_820 <= add_ln35_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln35_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln36_reg_919 <= add_ln36_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln35_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                bias_buffer1_V_0_load_1_reg_964 <= bias_buffer1_V_0_q0;
                bias_buffer1_V_0_load_reg_924 <= bias_buffer1_V_0_q1;
                bias_buffer1_V_1_load_1_reg_969 <= bias_buffer1_V_1_q0;
                bias_buffer1_V_1_load_reg_929 <= bias_buffer1_V_1_q1;
                bias_buffer1_V_2_load_1_reg_974 <= bias_buffer1_V_2_q0;
                bias_buffer1_V_2_load_reg_934 <= bias_buffer1_V_2_q1;
                bias_buffer1_V_3_load_1_reg_979 <= bias_buffer1_V_3_q0;
                bias_buffer1_V_3_load_reg_939 <= bias_buffer1_V_3_q1;
                bias_buffer1_V_4_load_1_reg_984 <= bias_buffer1_V_4_q0;
                bias_buffer1_V_4_load_reg_944 <= bias_buffer1_V_4_q1;
                bias_buffer1_V_5_load_1_reg_989 <= bias_buffer1_V_5_q0;
                bias_buffer1_V_5_load_reg_949 <= bias_buffer1_V_5_q1;
                bias_buffer1_V_6_load_1_reg_994 <= bias_buffer1_V_6_q0;
                bias_buffer1_V_6_load_reg_954 <= bias_buffer1_V_6_q1;
                bias_buffer1_V_7_load_1_reg_999 <= bias_buffer1_V_7_q0;
                bias_buffer1_V_7_load_reg_959 <= bias_buffer1_V_7_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln35_reg_825 <= icmp_ln35_fu_357_p2;
                icmp_ln35_reg_825_pp0_iter1_reg <= icmp_ln35_reg_825;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln32_reg_815 <= grp_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln35_fu_357_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln35_reg_829 <= select_ln35_fu_367_p3;
                trunc_ln215_reg_834 <= trunc_ln215_fu_375_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, mul_ln31_1_loc_empty_n, ret_V_cast_loc_empty_n, skip1_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, icmp_ln35_fu_357_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (ret_V_cast_loc_empty_n = ap_const_logic_0) or (mul_ln31_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln35_fu_357_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln35_fu_357_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    REP_fu_331_p3 <= 
        ap_const_lv32_0 when (skip1_dout(0) = '1') else 
        mul_ln31_1_loc_dout;
    add_ln35_fu_351_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_313_p4) + unsigned(ap_const_lv44_1));
    add_ln36_fu_416_p2 <= std_logic_vector(unsigned(select_ln35_reg_829) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(s_bias_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_825_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_01001 <= ((s_bias_full_n = ap_const_logic_0) and (icmp_ln35_reg_825_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(s_bias_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_825_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_11001 <= ((s_bias_full_n = ap_const_logic_0) and (icmp_ln35_reg_825_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(s_bias_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_825_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_subdone <= ((s_bias_full_n = ap_const_logic_0) and (icmp_ln35_reg_825_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mul_ln31_1_loc_empty_n, ret_V_cast_loc_empty_n, skip1_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (ret_V_cast_loc_empty_n = ap_const_logic_0) or (mul_ln31_1_loc_empty_n = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage1_iter1_assign_proc : process(s_bias_full_n, icmp_ln35_reg_825_pp0_iter1_reg)
    begin
                ap_block_state10_pp0_stage1_iter1 <= ((s_bias_full_n = ap_const_logic_0) and (icmp_ln35_reg_825_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln35_fu_357_p2)
    begin
        if ((icmp_ln35_fu_357_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_324_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln35_reg_825, i_reg_320, ap_CS_fsm_pp0_stage0, add_ln36_reg_919, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln35_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_324_p4 <= add_ln36_reg_919;
        else 
            ap_phi_mux_i_phi_fu_324_p4 <= i_reg_320;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_313_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln35_reg_825, indvar_flatten_reg_309, add_ln35_reg_820, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln35_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_313_p4 <= add_ln35_reg_820;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_313_p4 <= indvar_flatten_reg_309;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_buffer1_V_0_address0 <= zext_ln215_2_fu_404_p1(7 - 1 downto 0);
    bias_buffer1_V_0_address1 <= zext_ln215_fu_386_p1(7 - 1 downto 0);

    bias_buffer1_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_0_ce0 <= ap_const_logic_1;
        else 
            bias_buffer1_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_buffer1_V_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_0_ce1 <= ap_const_logic_1;
        else 
            bias_buffer1_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buffer1_V_1_address0 <= zext_ln215_2_fu_404_p1(7 - 1 downto 0);
    bias_buffer1_V_1_address1 <= zext_ln215_fu_386_p1(7 - 1 downto 0);

    bias_buffer1_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_1_ce0 <= ap_const_logic_1;
        else 
            bias_buffer1_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_buffer1_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_1_ce1 <= ap_const_logic_1;
        else 
            bias_buffer1_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buffer1_V_2_address0 <= zext_ln215_2_fu_404_p1(7 - 1 downto 0);
    bias_buffer1_V_2_address1 <= zext_ln215_fu_386_p1(7 - 1 downto 0);

    bias_buffer1_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_2_ce0 <= ap_const_logic_1;
        else 
            bias_buffer1_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_buffer1_V_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_2_ce1 <= ap_const_logic_1;
        else 
            bias_buffer1_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buffer1_V_3_address0 <= zext_ln215_2_fu_404_p1(7 - 1 downto 0);
    bias_buffer1_V_3_address1 <= zext_ln215_fu_386_p1(7 - 1 downto 0);

    bias_buffer1_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_3_ce0 <= ap_const_logic_1;
        else 
            bias_buffer1_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_buffer1_V_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_3_ce1 <= ap_const_logic_1;
        else 
            bias_buffer1_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buffer1_V_4_address0 <= zext_ln215_2_fu_404_p1(7 - 1 downto 0);
    bias_buffer1_V_4_address1 <= zext_ln215_fu_386_p1(7 - 1 downto 0);

    bias_buffer1_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_4_ce0 <= ap_const_logic_1;
        else 
            bias_buffer1_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_buffer1_V_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_4_ce1 <= ap_const_logic_1;
        else 
            bias_buffer1_V_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buffer1_V_5_address0 <= zext_ln215_2_fu_404_p1(7 - 1 downto 0);
    bias_buffer1_V_5_address1 <= zext_ln215_fu_386_p1(7 - 1 downto 0);

    bias_buffer1_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_5_ce0 <= ap_const_logic_1;
        else 
            bias_buffer1_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_buffer1_V_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_5_ce1 <= ap_const_logic_1;
        else 
            bias_buffer1_V_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buffer1_V_6_address0 <= zext_ln215_2_fu_404_p1(7 - 1 downto 0);
    bias_buffer1_V_6_address1 <= zext_ln215_fu_386_p1(7 - 1 downto 0);

    bias_buffer1_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_6_ce0 <= ap_const_logic_1;
        else 
            bias_buffer1_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_buffer1_V_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_6_ce1 <= ap_const_logic_1;
        else 
            bias_buffer1_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buffer1_V_7_address0 <= zext_ln215_2_fu_404_p1(7 - 1 downto 0);
    bias_buffer1_V_7_address1 <= zext_ln215_fu_386_p1(7 - 1 downto 0);

    bias_buffer1_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_7_ce0 <= ap_const_logic_1;
        else 
            bias_buffer1_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_buffer1_V_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_buffer1_V_7_ce1 <= ap_const_logic_1;
        else 
            bias_buffer1_V_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_345_p0 <= grp_fu_345_p00(32 - 1 downto 0);
    grp_fu_345_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(REP_reg_800),44));
    grp_fu_345_p1 <= grp_fu_345_p10(12 - 1 downto 0);
    grp_fu_345_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(OCIC_reg_794),44));
    icmp_ln35_fu_357_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_313_p4 = mul_ln32_reg_815) else "0";
    icmp_ln36_fu_362_p2 <= "1" when (ap_phi_mux_i_phi_fu_324_p4 = OCIC_reg_794) else "0";

    mul_ln31_1_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln31_1_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln31_1_loc_blk_n <= mul_ln31_1_loc_empty_n;
        else 
            mul_ln31_1_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mul_ln31_1_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln31_1_loc_empty_n, ret_V_cast_loc_empty_n, skip1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (ret_V_cast_loc_empty_n = ap_const_logic_0) or (mul_ln31_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mul_ln31_1_loc_read <= ap_const_logic_1;
        else 
            mul_ln31_1_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln215_fu_398_p2 <= (shl_ln_fu_379_p3 or ap_const_lv7_1);

    ret_V_cast_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ret_V_cast_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ret_V_cast_loc_blk_n <= ret_V_cast_loc_empty_n;
        else 
            ret_V_cast_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ret_V_cast_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln31_1_loc_empty_n, ret_V_cast_loc_empty_n, skip1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (ret_V_cast_loc_empty_n = ap_const_logic_0) or (mul_ln31_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ret_V_cast_loc_read <= ap_const_logic_1;
        else 
            ret_V_cast_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    s_bias_blk_n_assign_proc : process(s_bias_full_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln35_reg_825_pp0_iter1_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln35_reg_825_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            s_bias_blk_n <= s_bias_full_n;
        else 
            s_bias_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_bias_din <= (((((((((((((((tmp_95_fu_736_p10 & tmp_94_fu_715_p10) & tmp_93_fu_694_p10) & tmp_92_fu_673_p10) & tmp_91_fu_652_p10) & tmp_90_fu_631_p10) & tmp_89_fu_610_p10) & tmp_88_fu_589_p10) & tmp_87_fu_568_p10) & tmp_86_fu_547_p10) & tmp_85_fu_526_p10) & tmp_84_fu_505_p10) & tmp_83_fu_484_p10) & tmp_82_fu_463_p10) & tmp_s_fu_442_p10) & tmp_fu_421_p10);

    s_bias_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln35_reg_825_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln35_reg_825_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            s_bias_write <= ap_const_logic_1;
        else 
            s_bias_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln35_fu_367_p3 <= 
        ap_const_lv12_0 when (icmp_ln36_fu_362_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_324_p4;
    shl_ln_fu_379_p3 <= (trunc_ln215_reg_834 & ap_const_lv1_0);

    skip1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, skip1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_blk_n <= skip1_empty_n;
        else 
            skip1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    skip1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mul_ln31_1_loc_empty_n, ret_V_cast_loc_empty_n, skip1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (skip1_empty_n = ap_const_logic_0) or (ret_V_cast_loc_empty_n = ap_const_logic_0) or (mul_ln31_1_loc_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            skip1_read <= ap_const_logic_1;
        else 
            skip1_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln215_fu_375_p1 <= select_ln35_fu_367_p3(6 - 1 downto 0);
    zext_ln215_2_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln215_fu_398_p2),64));
    zext_ln215_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_379_p3),64));
end behav;
